{
    "generatedOn": "2023-09-06T00:53:25+00:00",
    "hooks": [
        {
            "name": "activate_header",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-activate.php",
            "line": 79,
            "doc": {
                "summary": "Fires before the Site Activation page is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "activate_wp_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-activate.php",
            "line": 96,
            "doc": {
                "summary": "Fires before the Site Activation page is loaded.",
                "description": "<p>Fires on the {@see 'wp_head'} action.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "wp_ajax_{$action}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-ajax.php",
            "line": 188,
            "doc": {
                "summary": "Fires authenticated Ajax actions for logged-in users.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the name of the Ajax action callback being fired.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "wp_ajax_nopriv_{$action}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-ajax.php",
            "line": 203,
            "doc": {
                "summary": "Fires non-authenticated Ajax actions for logged-out users.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the name of the Ajax action callback being fired.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "in_admin_footer",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-footer.php",
            "line": 31,
            "doc": {
                "summary": "Fires after the opening tag for the admin footer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "admin_footer_text",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/admin-footer.php",
            "line": 48,
            "doc": {
                "summary": "Filters the \"Thank you\" text displayed in the admin footer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The content that will be printed.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "update_footer",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/admin-footer.php",
            "line": 65,
            "doc": {
                "summary": "Filters the version\/update text displayed in the admin footer.",
                "description": "<p>WordPress prints the current version and update information, using core_update_footer() at priority 10.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\core_update_footer()"
                    },
                    {
                        "name": "param",
                        "content": "The content that will be printed.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "admin_footer",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/admin-footer.php",
            "line": 78,
            "doc": {
                "summary": "Prints scripts or data before the default footer scripts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The data to print.",
                        "types": [
                            "string"
                        ],
                        "variable": "data"
                    }
                ]
            }
        },
        {
            "name": "admin_print_footer_scripts-{$hook_suffix}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-footer.php",
            "line": 88,
            "doc": {
                "summary": "Prints scripts and data queued for the footer.",
                "description": "<p>The dynamic portion of the hook name, <code>$hook_suffix<\/code>, refers to the global hook suffix of the current page.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    }
                ]
            }
        },
        {
            "name": "admin_print_footer_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-footer.php",
            "line": 95,
            "doc": {
                "summary": "Prints any scripts and data queued for the footer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "admin_footer-{$hook_suffix}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-footer.php",
            "line": 105,
            "doc": {
                "summary": "Prints scripts or data after the default footer scripts.",
                "description": "<p>The dynamic portion of the hook name, <code>$hook_suffix<\/code>, refers to the global hook suffix of the current page.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "admin_title",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/admin-header.php",
            "line": 84,
            "doc": {
                "summary": "Filters the title tag content for an admin page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The page title, with extra context added.",
                        "types": [
                            "string"
                        ],
                        "variable": "admin_title"
                    },
                    {
                        "name": "param",
                        "content": "The original page title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "admin_enqueue_scripts",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/admin-header.php",
            "line": 118,
            "doc": {
                "summary": "Enqueue scripts for all admin pages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The current admin page.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook_suffix"
                    }
                ]
            }
        },
        {
            "name": "admin_print_styles-{$hook_suffix}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 125,
            "doc": {
                "summary": "Fires when styles are printed for a specific admin page based on $hook_suffix.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "admin_print_styles",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 132,
            "doc": {
                "summary": "Fires when styles are printed for all admin pages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "admin_print_scripts-{$hook_suffix}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 139,
            "doc": {
                "summary": "Fires when scripts are printed for a specific admin page based on $hook_suffix.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "admin_print_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 146,
            "doc": {
                "summary": "Fires when scripts are printed for all admin pages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "admin_head-{$hook_suffix}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 156,
            "doc": {
                "summary": "Fires in head section for a specific admin page.",
                "description": "<p>The dynamic portion of the hook name, <code>$hook_suffix<\/code>, refers to the hook suffix for the admin page.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "admin_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 163,
            "doc": {
                "summary": "Fires in head section for all admin pages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "admin_body_class",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/admin-header.php",
            "line": 242,
            "doc": {
                "summary": "Filters the CSS classes for the body tag in the admin.",
                "description": "<p>This filter differs from the {@see 'post_class'} and {@see 'body_class'} filters in two important ways:<\/p> <ol> <li><code>$classes<\/code> is a space-separated string of class names instead of an array.<\/li> <li>Not all core admin classes are filterable, notably: wp-admin, wp-core-ui, and no-js cannot be removed.<\/li> <\/ol>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Space-separated list of CSS classes.",
                        "types": [
                            "string"
                        ],
                        "variable": "classes"
                    }
                ]
            }
        },
        {
            "name": "in_admin_header",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 267,
            "doc": {
                "summary": "Fires at the beginning of the content section in an admin page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "network_admin_notices",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 289,
            "doc": {
                "summary": "Prints network admin screen notices.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "user_admin_notices",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 296,
            "doc": {
                "summary": "Prints user admin screen notices.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "admin_notices",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 303,
            "doc": {
                "summary": "Prints admin screen notices.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "all_admin_notices",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-header.php",
            "line": 311,
            "doc": {
                "summary": "Prints generic admin screen notices.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "admin_post_nopriv",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-post.php",
            "line": 46,
            "doc": {
                "summary": "Fires on a non-authenticated admin post request where no action is supplied.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "admin_post_nopriv_{$action}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-post.php",
            "line": 61,
            "doc": {
                "summary": "Fires on a non-authenticated admin post request for the given action.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the given request action.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "admin_post",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-post.php",
            "line": 70,
            "doc": {
                "summary": "Fires on an authenticated admin post request where no action is supplied.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "admin_post_{$action}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin-post.php",
            "line": 85,
            "doc": {
                "summary": "Fires on an authenticated admin post request for the given action.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the given request action.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "after_db_upgrade",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin.php",
            "line": 48,
            "doc": {
                "summary": "Fires on the next page load after a successful DB upgrade.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "do_mu_upgrade",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/admin.php",
            "line": 73,
            "doc": {
                "summary": "Filters whether to attempt to perform the multisite DB upgrade routine.",
                "description": "<p>In single site, the user would be redirected to wp-admin\/upgrade.php.<br>In multisite, the DB upgrade routine is automatically fired, but only when this filter returns true.<\/p> <p>If the network is 50 sites or less, it will run every time. Otherwise, it will throttle itself to reduce load.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Whether to perform the Multisite upgrade routine. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "do_mu_upgrade"
                    }
                ]
            }
        },
        {
            "name": "admin_init",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin.php",
            "line": 175,
            "doc": {
                "summary": "Fires as an admin screen or script is being initialized.",
                "description": "<p>Note, this does not just run on user-facing admin screens.<br>It runs on admin-ajax.php and admin-post.php as well.<\/p> <p>This is roughly analogous to the more general {@see 'init'} hook, which fires earlier.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "load-{$page_hook}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin.php",
            "line": 237,
            "doc": {
                "summary": "Fires before a particular screen is loaded.",
                "description": "<p>The load-* hook fires in a number of contexts. This hook is for plugin screens where a callback is provided when the screen is registered.<\/p> <p>The dynamic portion of the hook name, <code>$page_hook<\/code>, refers to a mixture of plugin page information including:<\/p> <ol> <li>The page type. If the plugin page is registered as a submenu page, such as for Settings, the page type would be 'settings'. Otherwise the type is 'toplevel'.<\/li> <li>A separator of '<em>page<\/em>'.<\/li> <li>The plugin basename minus the file extension.<\/li> <\/ol> <p>Together, the three parts form the <code>$page_hook<\/code>. Citing the example above, the hook name used would be 'load-settings_page_pluginbasename'.<\/p>",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_plugin_page_hook()"
                    },
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "{$page_hook}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin.php",
            "line": 259,
            "doc": {
                "summary": "Used to call the registered callback for a plugin screen.",
                "description": "<p>This hook uses a dynamic hook name, <code>$page_hook<\/code>, which refers to a mixture of plugin page information including:<\/p> <ol> <li>The page type. If the plugin page is registered as a submenu page, such as for Settings, the page type would be 'settings'. Otherwise the type is 'toplevel'.<\/li> <li>A separator of '<em>page<\/em>'.<\/li> <li>The plugin basename minus the file extension.<\/li> <\/ol> <p>Together, the three parts form the <code>$page_hook<\/code>. Citing the example above, the hook name used would be 'settings_page_pluginbasename'.<\/p>",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_plugin_page_hook()"
                    },
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ]
            }
        },
        {
            "name": "load-{$plugin_page}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin.php",
            "line": 284,
            "doc": {
                "summary": "Fires before a particular screen is loaded.",
                "description": "<p>The load-* hook fires in a number of contexts. This hook is for plugin screens where the file to load is directly included, rather than the use of a function.<\/p> <p>The dynamic portion of the hook name, <code>$plugin_page<\/code>, refers to the plugin basename.<\/p>",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\plugin_basename()"
                    },
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ]
            }
        },
        {
            "name": "load-importer-{$importer}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin.php",
            "line": 335,
            "doc": {
                "summary": "Fires before an importer screen is loaded.",
                "description": "<p>The dynamic portion of the hook name, <code>$importer<\/code>, refers to the importer slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>load-importer-blogger<\/code><\/li> <li><code>load-importer-wpcat2tag<\/code><\/li> <li><code>load-importer-livejournal<\/code><\/li> <li><code>load-importer-mt<\/code><\/li> <li><code>load-importer-rss<\/code><\/li> <li><code>load-importer-tumblr<\/code><\/li> <li><code>load-importer-wordpress<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ]
            }
        },
        {
            "name": "force_filtered_html_on_import",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/admin.php",
            "line": 360,
            "doc": {
                "summary": "Whether to filter imported data through kses on import.",
                "description": "<p>Multisite uses this hook to filter all data through kses by default, as a super administrator may be assisting an untrusted user.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to force data to be filtered through kses. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "force"
                    }
                ]
            }
        },
        {
            "name": "load-{$pagenow}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin.php",
            "line": 385,
            "doc": {
                "summary": "Fires before a particular screen is loaded.",
                "description": "<p>The load-* hook fires in a number of contexts. This hook is for core screens.<\/p> <p>The dynamic portion of the hook name, <code>$pagenow<\/code>, is a global variable referring to the filename of the current screen, such as 'admin.php', 'post-new.php' etc. A complete hook for the latter would be 'load-post-new.php'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "load-page-new.php",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin.php",
            "line": 393,
            "doc": {
                "summary": "Fires before a particular screen is loaded.",
                "description": "<p>The load-* hook fires in a number of contexts. This hook is for core screens.<\/p> <p>The dynamic portion of the hook name, <code>$pagenow<\/code>, is a global variable referring to the filename of the current screen, such as 'admin.php', 'post-new.php' etc. A complete hook for the latter would be 'load-post-new.php'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "admin_action_{$action}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/admin.php",
            "line": 419,
            "doc": {
                "summary": "Fires when an 'action' request variable is sent.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the action derived from the <code>GET<\/code> or <code>POST<\/code> request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "async_upload_{$type}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/async-upload.php",
            "line": 155,
            "doc": {
                "summary": "Filters the returned ID of an uploaded attachment.",
                "description": "<p>The dynamic portion of the hook name, <code>$type<\/code>, refers to the attachment type.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>async_upload_audio<\/code><\/li> <li><code>async_upload_file<\/code><\/li> <li><code>async_upload_image<\/code><\/li> <li><code>async_upload_video<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Uploaded attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "wp_authorize_application_password_form_approved_no_js",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/authorize-application.php",
            "line": 228,
            "doc": {
                "summary": "Fires in the Authorize Application Password new password section in the no-JS version.",
                "description": "<p>In most cases, this should be used in combination with the {@see 'wp_application_passwords_approve_app_request_success'} action to ensure that both the JS and no-JS variants are handled.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.1",
                        "description": "Corrected action name and signature."
                    },
                    {
                        "name": "param",
                        "content": "The newly generated application password.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_password"
                    },
                    {
                        "name": "param",
                        "content": "The array of request data. All arguments are optional and may be empty.",
                        "types": [
                            "array"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "The user authorizing the application.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_authorize_application_password_form",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/authorize-application.php",
            "line": 258,
            "doc": {
                "summary": "Fires in the Authorize Application Password form before the submit buttons.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "{     The array of request data. All arguments are optional and may be empty.<br>    @type string $app_name    The suggested name of the application.<br>    @type string $success_url The URL the user will be redirected to after approving the application.<br>    @type string $reject_url  The URL the user will be redirected to after rejecting the application.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "The user authorizing the application.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "comment_edit_redirect",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/comment.php",
            "line": 364,
            "doc": {
                "summary": "Filters the URI the user is redirected to after editing a comment in the admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The URI the user will be redirected to.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the comment being edited.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "customize_controls_init",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/customize.php",
            "line": 112,
            "doc": {
                "summary": "Fires when Customizer controls are initialized, before scripts are enqueued.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ]
            }
        },
        {
            "name": "customize_controls_enqueue_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/customize.php",
            "line": 123,
            "doc": {
                "summary": "Enqueue Customizer control scripts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ]
            }
        },
        {
            "name": "customize_controls_print_styles",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/customize.php",
            "line": 167,
            "doc": {
                "summary": "Fires when Customizer control styles are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ]
            }
        },
        {
            "name": "customize_controls_print_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/customize.php",
            "line": 174,
            "doc": {
                "summary": "Fires when Customizer control scripts are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ]
            }
        },
        {
            "name": "customize_controls_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/customize.php",
            "line": 181,
            "doc": {
                "summary": "Fires in head section of Customizer controls.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    }
                ]
            }
        },
        {
            "name": "customize_controls_print_footer_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/customize.php",
            "line": 302,
            "doc": {
                "summary": "Prints templates, control scripts, and settings in the footer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ]
            }
        },
        {
            "name": "wp_editor_expand",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 60,
            "doc": {
                "summary": "Filters whether to enable the 'expand' functionality in the post editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "Added the <code>$post_type<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable the 'expand' functionality. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "expand"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "post_updated_messages",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 219,
            "doc": {
                "summary": "Filters the post updated messages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post updated messages. For defaults see <code>$messages<\/code> declarations above.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "messages"
                    }
                ]
            }
        },
        {
            "name": "post_edit_form_tag",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 463,
            "doc": {
                "summary": "Fires inside the post editor form tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "edit_form_top",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 500,
            "doc": {
                "summary": "Fires at the beginning of the edit form.",
                "description": "<p>At this point, the required hidden fields and nonces have already been output.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "enter_title_here",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 519,
            "doc": {
                "summary": "Filters the title field placeholder text.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Placeholder text. Default 'Add title'.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "edit_form_before_permalink",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 532,
            "doc": {
                "summary": "Fires before the permalink field in the edit form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "edit_form_after_title",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 581,
            "doc": {
                "summary": "Fires after the title field.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "edit_form_after_editor",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 649,
            "doc": {
                "summary": "Fires after the content editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "submitpage_box",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 666,
            "doc": {
                "summary": "Fires before meta boxes with 'side' context are output for the 'page' post type.",
                "description": "<p>The submitpage box is a meta box with 'side' context, so this hook fires just before it is output.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "submitpost_box",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 677,
            "doc": {
                "summary": "Fires before meta boxes with 'side' context are output for all post types other than 'page'.",
                "description": "<p>The submitpost box is a meta box with 'side' context, so this hook fires just before it is output.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "edit_page_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 698,
            "doc": {
                "summary": "Fires after 'normal' context meta boxes have been output for the 'page' post type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "edit_form_advanced",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 707,
            "doc": {
                "summary": "Fires after 'normal' context meta boxes have been output for all post types other than 'page'.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "dbx_post_sidebar",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-advanced.php",
            "line": 723,
            "doc": {
                "summary": "Fires after all meta box sections have been output, before the closing #post-body div.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "write_your_story",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-form-blocks.php",
            "line": 190,
            "doc": {
                "summary": "Filters the body placeholder text.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "Changed the default placeholder text."
                    },
                    {
                        "name": "param",
                        "content": "Placeholder text. Default 'Type \/ to choose a block'.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "enqueue_block_editor_assets",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/edit-form-blocks.php",
            "line": 272,
            "doc": {
                "summary": "Fires after block assets have been enqueued for the editing interface.",
                "description": "<p>Call <code>add_action<\/code> on any hook before 'admin_enqueue_scripts'.<\/p> <p>In the function call you supply, simply use <code>wp_enqueue_script<\/code> and <code>wp_enqueue_style<\/code> to add your functionality to the block editor.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    }
                ]
            }
        },
        {
            "name": "block_editor_no_javascript_message",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-form-blocks.php",
            "line": 340,
            "doc": {
                "summary": "Filters the message displayed in the block editor interface when JavaScript is not enabled in the browser.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The message being displayed.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    },
                    {
                        "name": "param",
                        "content": "The post being edited.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "edit_comment_misc_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-form-comment.php",
            "line": 233,
            "doc": {
                "summary": "Filters miscellaneous actions for the edit comment form sidebar.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Output HTML to display miscellaneous action.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Current comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "add_meta_boxes_comment",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-form-comment.php",
            "line": 266,
            "doc": {
                "summary": "Fires when comment-specific meta boxes are added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "add_meta_boxes_link",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-link-form.php",
            "line": 46,
            "doc": {
                "summary": "Fires when link-specific meta boxes are added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Link object.",
                        "types": [
                            "object"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "edit_category_form_pre",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 24,
            "doc": {
                "summary": "Fires before the Edit Category form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_pre_edit_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Current category term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "edit_link_category_form_pre",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 34,
            "doc": {
                "summary": "Fires before the Edit Link Category form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_pre_edit_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Current link category term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "edit_tag_form_pre",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 44,
            "doc": {
                "summary": "Fires before the Edit Tag form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_pre_edit_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Current tag term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_pre_edit_form",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 73,
            "doc": {
                "summary": "Fires before the Edit Term form for all taxonomies.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_pre_edit_form<\/code><\/li> <li><code>post_tag_pre_edit_form<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    },
                    {
                        "name": "param",
                        "content": "Current $taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_term_edit_form_tag",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 111,
            "doc": {
                "summary": "Fires inside the Edit Term form tag.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_term_edit_form_tag<\/code><\/li> <li><code>post_tag_term_edit_form_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_term_edit_form_top",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 138,
            "doc": {
                "summary": "Fires at the beginning of the Edit Term form.",
                "description": "<p>At this point, the required hidden fields and nonces have already been output.<\/p> <p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_term_edit_form_top<\/code><\/li> <li><code>post_tag_term_edit_form_top<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    },
                    {
                        "name": "param",
                        "content": "Current $taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "editable_slug",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 167,
            "doc": {
                "summary": "Filters the editable slug for a post or term.",
                "description": "<p>Note: This is a multi-use hook in that it is leveraged both for editable post URIs and term slugs.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$tag<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The editable slug. Will be either a term slug or post URI depending upon the context in which it is evaluated.",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    },
                    {
                        "name": "param",
                        "content": "Term or post object.",
                        "types": [
                            "\\WP_Term",
                            "\\WP_Post"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "edit_category_form_fields",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 218,
            "doc": {
                "summary": "Fires after the Edit Category form fields are displayed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_edit_form_fields'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Current category term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "edit_link_category_form_fields",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 228,
            "doc": {
                "summary": "Fires after the Edit Link Category form fields are displayed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_edit_form_fields'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Current link category term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "edit_tag_form_fields",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 238,
            "doc": {
                "summary": "Fires after the Edit Tag form fields are displayed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_edit_form_fields'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Current tag term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_edit_form_fields",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 256,
            "doc": {
                "summary": "Fires after the Edit Term form fields are displayed.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_edit_form_fields<\/code><\/li> <li><code>post_tag_edit_form_fields<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "edit_tag_form",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 276,
            "doc": {
                "summary": "Fires at the end of the Edit Term form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_edit_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_edit_form",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-tag-form.php",
            "line": 293,
            "doc": {
                "summary": "Fires at the end of the Edit Term form for all taxonomies.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_edit_form<\/code><\/li> <li><code>post_tag_edit_form<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "redirect_term_location",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 228,
            "doc": {
                "summary": "Filters the taxonomy redirect destination URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The destination URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy object.",
                        "types": [
                            "\\WP_Taxonomy"
                        ],
                        "variable": "tax"
                    }
                ]
            }
        },
        {
            "name": "add_category_form_pre",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 387,
            "doc": {
                "summary": "Fires before the Add Category form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_pre_add_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Optional arguments cast to an object.",
                        "types": [
                            "object"
                        ],
                        "variable": "arg"
                    }
                ]
            }
        },
        {
            "name": "add_link_category_form_pre",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 397,
            "doc": {
                "summary": "Fires before the link category form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_pre_add_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Optional arguments cast to an object.",
                        "types": [
                            "object"
                        ],
                        "variable": "arg"
                    }
                ]
            }
        },
        {
            "name": "add_tag_form_pre",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 407,
            "doc": {
                "summary": "Fires before the Add Tag form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_pre_add_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_pre_add_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 424,
            "doc": {
                "summary": "Fires before the Add Term form for all taxonomies.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_pre_add_form<\/code><\/li> <li><code>post_tag_pre_add_form<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_term_new_form_tag",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 443,
            "doc": {
                "summary": "Fires inside the Add Tag form tag.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_term_new_form_tag<\/code><\/li> <li><code>post_tag_term_new_form_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    }
                ]
            }
        },
        {
            "name": "taxonomy_parent_dropdown_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 497,
            "doc": {
                "summary": "Filters the taxonomy parent drop-down on the Edit Term page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.2.0",
                        "description": "Added <code>$context<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "{     An array of taxonomy parent drop-down arguments.<br>    @type int|bool $hide_empty       Whether to hide terms not attached to any posts. Default 0.<br>    @type bool     $hide_if_empty    Whether to hide the drop-down if no terms exist. Default false.<br>    @type string   $taxonomy         The taxonomy slug.<br>    @type string   $name             Value of the name attribute to use for the drop-down select element.<br>                                     Default 'parent'.<br>    @type string   $orderby          The field to order by. Default 'name'.<br>    @type bool     $hierarchical     Whether the taxonomy is hierarchical. Default true.<br>    @type string   $show_option_none Label to display if there are no terms. Default 'None'.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "dropdown_args"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Filter context. Accepts 'new' or 'edit'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "add_tag_form_fields",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 525,
            "doc": {
                "summary": "Fires after the Add Tag form fields for non-hierarchical taxonomies.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_add_form_fields",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 542,
            "doc": {
                "summary": "Fires after the Add Term form fields.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_add_form_fields<\/code><\/li> <li><code>post_tag_add_form_fields<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "edit_category_form",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 558,
            "doc": {
                "summary": "Fires at the end of the Edit Category form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_add_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Optional arguments cast to an object.",
                        "types": [
                            "object"
                        ],
                        "variable": "arg"
                    }
                ]
            }
        },
        {
            "name": "edit_link_category_form",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 568,
            "doc": {
                "summary": "Fires at the end of the Edit Link form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_add_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Optional arguments cast to an object.",
                        "types": [
                            "object"
                        ],
                        "variable": "arg"
                    }
                ]
            }
        },
        {
            "name": "add_tag_form",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 578,
            "doc": {
                "summary": "Fires at the end of the Add Tag form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use {@see '{$taxonomy}_add_form'} instead."
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_add_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 595,
            "doc": {
                "summary": "Fires at the end of the Add Term form for all taxonomies.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_add_form<\/code><\/li> <li><code>post_tag_add_form<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "after-{$taxonomy}-table",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/edit-tags.php",
            "line": 668,
            "doc": {
                "summary": "Fires after the taxonomy list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>after-category-table<\/code><\/li> <li><code>after-post_tag-table<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "handle_bulk_actions-{$screen}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/edit.php",
            "line": 222,
            "doc": {
                "summary": "Fires when a custom bulk action should be handled.",
                "description": "<p>The redirect link should be modified with success or failure feedback from the action to be used to display feedback to the user.<\/p> <p>The dynamic portion of the hook name, <code>$screen<\/code>, refers to the current screen ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The redirect URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "sendback"
                    },
                    {
                        "name": "param",
                        "content": "The action being taken.",
                        "types": [
                            "string"
                        ],
                        "variable": "doaction"
                    },
                    {
                        "name": "param",
                        "content": "The items to take the action on. Accepts an array of IDs of posts, comments, terms, links, plugins, attachments, or users.",
                        "types": [
                            "array"
                        ],
                        "variable": "items"
                    }
                ]
            }
        },
        {
            "name": "bulk_post_updated_messages",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/edit.php",
            "line": 404,
            "doc": {
                "summary": "Filters the bulk action updated messages.",
                "description": "<p>By default, custom post types use the messages for the 'post' post type.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Arrays of messages, each keyed by the corresponding post type. Messages are keyed with 'updated', 'locked', 'deleted', 'trashed', and 'untrashed'.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "bulk_messages"
                    },
                    {
                        "name": "param",
                        "content": "Array of item counts for each message, used to build internationalized strings.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "bulk_counts"
                    }
                ]
            }
        },
        {
            "name": "export_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/export.php",
            "line": 121,
            "doc": {
                "summary": "Filters the export args.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The arguments to send to the exporter.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "export_filters",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/export.php",
            "line": 339,
            "doc": {
                "summary": "Fires at the end of the export filters form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ]
            }
        },
        {
            "name": "heartbeat_nopriv_received",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 43,
            "doc": {
                "summary": "Filters Heartbeat Ajax response in no-privilege environments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The no-priv Heartbeat response.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The $_POST data sent.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_id"
                    }
                ]
            }
        },
        {
            "name": "heartbeat_nopriv_send",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 54,
            "doc": {
                "summary": "Filters Heartbeat Ajax response in no-privilege environments when no data is passed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The no-priv Heartbeat response.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_id"
                    }
                ]
            }
        },
        {
            "name": "heartbeat_nopriv_tick",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 66,
            "doc": {
                "summary": "Fires when Heartbeat ticks in no-privilege environments.",
                "description": "<p>Allows the transport to be easily replaced with long-polling.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The no-priv Heartbeat response.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_id"
                    }
                ]
            }
        },
        {
            "name": "term_search_min_chars",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 145,
            "doc": {
                "summary": "Filters the minimum number of characters required to fire a tag search via Ajax.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The minimum number of characters required. Default 2.",
                        "types": [
                            "int"
                        ],
                        "variable": "characters"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy object.",
                        "types": [
                            "\\WP_Taxonomy"
                        ],
                        "variable": "taxonomy_object"
                    },
                    {
                        "name": "param",
                        "content": "The search term.",
                        "types": [
                            "string"
                        ],
                        "variable": "search"
                    }
                ]
            }
        },
        {
            "name": "ajax_term_search_results",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 174,
            "doc": {
                "summary": "Filters the Ajax term search results.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of term names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "results"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy object.",
                        "types": [
                            "\\WP_Taxonomy"
                        ],
                        "variable": "taxonomy_object"
                    },
                    {
                        "name": "param",
                        "content": "The search term.",
                        "types": [
                            "string"
                        ],
                        "variable": "search"
                    }
                ]
            }
        },
        {
            "name": "load-widgets.php",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 2336,
            "doc": {
                "summary": "Fires early when editing the widgets displayed in sidebars.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "widgets.php",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 2343,
            "doc": {
                "summary": "Fires early when editing the widgets displayed in sidebars.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "wp_check_post_lock_window",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 2911,
            "doc": {
                "summary": "Filters the post lock window duration.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The interval in seconds the post lock duration should last, plus 5 seconds. Default 150.",
                        "types": [
                            "int"
                        ],
                        "variable": "interval"
                    }
                ]
            }
        },
        {
            "name": "ajax_query_attachments_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 3043,
            "doc": {
                "summary": "Filters the arguments passed to WP_Query during an Ajax call for querying attachments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Query::parse_query()"
                    },
                    {
                        "name": "param",
                        "content": "An array of query variables.",
                        "types": [
                            "array"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "wp_refresh_nonces",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 3450,
            "doc": {
                "summary": "Filters the nonces to send to the New\/Edit Post screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The Heartbeat response.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The $_POST data sent.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_id"
                    }
                ]
            }
        },
        {
            "name": "heartbeat_received",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 3469,
            "doc": {
                "summary": "Filters the Heartbeat response received.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The Heartbeat response.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The $_POST data sent.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_id"
                    }
                ]
            }
        },
        {
            "name": "heartbeat_send",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 3480,
            "doc": {
                "summary": "Filters the Heartbeat response sent.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The Heartbeat response.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_id"
                    }
                ]
            }
        },
        {
            "name": "heartbeat_tick",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 3492,
            "doc": {
                "summary": "Fires when Heartbeat ticks in logged-in environments.",
                "description": "<p>Allows the transport to be easily replaced with long-polling.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The Heartbeat response.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_id"
                    }
                ]
            }
        },
        {
            "name": "wp_ajax_crop_image_pre_save",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 4015,
            "doc": {
                "summary": "Fires before a cropped image is saved.",
                "description": "<p>Allows to add filters to modify the way a cropped image is saved.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The Customizer control requesting the cropped image.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "The attachment ID of the original image.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Path to the cropped image file.",
                        "types": [
                            "string"
                        ],
                        "variable": "cropped"
                    }
                ]
            }
        },
        {
            "name": "wp_ajax_cropped_attachment_metadata",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 4073,
            "doc": {
                "summary": "Filters the cropped image attachment metadata.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_generate_attachment_metadata()"
                    },
                    {
                        "name": "param",
                        "content": "Attachment metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    }
                ]
            }
        },
        {
            "name": "wp_ajax_cropped_attachment_id",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 4084,
            "doc": {
                "summary": "Filters the attachment ID for a cropped image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The attachment ID of the cropped image.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "The Customizer control requesting the cropped image.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_exporters",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 4922,
            "doc": {
                "summary": "Filters the array of exporter callbacks.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of callable exporters of personal data. Default empty array.<br>    @type array ...$0 {         Array of personal data exporters.<br>        @type callable $callback               Callable exporter function that accepts an                                                email address and a page and returns an array                                                of name =&gt; value pairs of personal data.<br>        @type string   $exporter_friendly_name Translated user facing friendly name for the                                                exporter.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_export_page",
            "type": "filter",
            "numArgs": 7,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 5035,
            "doc": {
                "summary": "Filters a page of personal data exporter data. Used to build the export report.",
                "description": "<p>Allows the export response to be consumed by destinations in addition to Ajax.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The personal data for the given exporter and page.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The index of the exporter that provided this data.",
                        "types": [
                            "int"
                        ],
                        "variable": "exporter_index"
                    },
                    {
                        "name": "param",
                        "content": "The email address associated with this personal data.",
                        "types": [
                            "string"
                        ],
                        "variable": "email_address"
                    },
                    {
                        "name": "param",
                        "content": "The page for this response.",
                        "types": [
                            "int"
                        ],
                        "variable": "page"
                    },
                    {
                        "name": "param",
                        "content": "The privacy request post ID associated with this request.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether the final results of the export should be emailed to the user.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send_as_email"
                    },
                    {
                        "name": "param",
                        "content": "The key (slug) of the exporter that provided this data.",
                        "types": [
                            "string"
                        ],
                        "variable": "exporter_key"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_erasers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 5113,
            "doc": {
                "summary": "Filters the array of personal data eraser callbacks.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of callable erasers of personal data. Default empty array.<br>    @type array ...$0 {         Array of personal data exporters.<br>        @type callable $callback               Callable eraser that accepts an email address and                                                a page and returns an array with boolean values for                                                whether items were removed or retained and any messages                                                from the eraser, as well as if additional pages are                                                available.<br>        @type string   $exporter_friendly_name Translated user facing friendly name for the eraser.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_erasure_page",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-admin\/includes\/ajax-actions.php",
            "line": 5264,
            "doc": {
                "summary": "Filters a page of personal data eraser data.",
                "description": "<p>Allows the erasure response to be consumed by destinations in addition to Ajax.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The personal data for the given exporter and page.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The index of the eraser that provided this data.",
                        "types": [
                            "int"
                        ],
                        "variable": "eraser_index"
                    },
                    {
                        "name": "param",
                        "content": "The email address associated with this personal data.",
                        "types": [
                            "string"
                        ],
                        "variable": "email_address"
                    },
                    {
                        "name": "param",
                        "content": "The page for this response.",
                        "types": [
                            "int"
                        ],
                        "variable": "page"
                    },
                    {
                        "name": "param",
                        "content": "The privacy request post ID associated with this request.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    },
                    {
                        "name": "param",
                        "content": "The key (slug) of the eraser that provided this data.",
                        "types": [
                            "string"
                        ],
                        "variable": "eraser_key"
                    }
                ]
            }
        },
        {
            "name": "delete_link",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/bookmark.php",
            "line": 99,
            "doc": {
                "summary": "Fires before a link is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the link to delete.",
                        "types": [
                            "int"
                        ],
                        "variable": "link_id"
                    }
                ]
            }
        },
        {
            "name": "deleted_link",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/bookmark.php",
            "line": 112,
            "doc": {
                "summary": "Fires after a link has been deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted link.",
                        "types": [
                            "int"
                        ],
                        "variable": "link_id"
                    }
                ]
            }
        },
        {
            "name": "edit_link",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/bookmark.php",
            "line": 254,
            "doc": {
                "summary": "Fires after a link was updated in the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the link that was updated.",
                        "types": [
                            "int"
                        ],
                        "variable": "link_id"
                    }
                ]
            }
        },
        {
            "name": "add_link",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/bookmark.php",
            "line": 263,
            "doc": {
                "summary": "Fires after a link was added to the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the link that was added.",
                        "types": [
                            "int"
                        ],
                        "variable": "link_id"
                    }
                ]
            }
        },
        {
            "name": "update_bulk_plugins_complete_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-bulk-plugin-upgrader-skin.php",
            "line": 81,
            "doc": {
                "summary": "Filters the list of action links available following bulk plugin updates.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of plugin action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "update_actions"
                    },
                    {
                        "name": "param",
                        "content": "Array of information for the last-updated plugin.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_info"
                    }
                ]
            }
        },
        {
            "name": "update_bulk_theme_complete_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-bulk-theme-upgrader-skin.php",
            "line": 82,
            "doc": {
                "summary": "Filters the list of action links available following bulk theme updates.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of theme action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "update_actions"
                    },
                    {
                        "name": "param",
                        "content": "Theme object for the last-updated theme.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme_info"
                    }
                ]
            }
        },
        {
            "name": "allow_dev_auto_core_updates",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-core-upgrader.php",
            "line": 351,
            "doc": {
                "summary": "Filters whether to enable automatic core updates for development versions.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable automatic updates for development versions.",
                        "types": [
                            "bool"
                        ],
                        "variable": "upgrade_dev"
                    }
                ]
            }
        },
        {
            "name": "allow_minor_auto_core_updates",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-core-upgrader.php",
            "line": 367,
            "doc": {
                "summary": "Filters whether to enable minor automatic core updates.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable minor automatic core updates.",
                        "types": [
                            "bool"
                        ],
                        "variable": "upgrade_minor"
                    }
                ]
            }
        },
        {
            "name": "allow_major_auto_core_updates",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-core-upgrader.php",
            "line": 380,
            "doc": {
                "summary": "Filters whether to enable major automatic core updates.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable major automatic core updates.",
                        "types": [
                            "bool"
                        ],
                        "variable": "upgrade_major"
                    }
                ]
            }
        },
        {
            "name": "custom_header_options",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/class-custom-image-header.php",
            "line": 796,
            "doc": {
                "summary": "Fires just before the submit button in the custom header options form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "wp_create_file_in_uploads",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-custom-image-header.php",
            "line": 879,
            "doc": {
                "summary": "Fires after the header image is set or an error is returned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the file.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_header_image_attachment_metadata",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-custom-image-header.php",
            "line": 1354,
            "doc": {
                "summary": "Filters the header image attachment metadata.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_generate_attachment_metadata()"
                    },
                    {
                        "name": "param",
                        "content": "Attachment metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    }
                ]
            }
        },
        {
            "name": "update_translations_complete_actions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-language-pack-upgrader-skin.php",
            "line": 91,
            "doc": {
                "summary": "Filters the list of action links available following a translations update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of translations update links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "update_actions"
                    }
                ]
            }
        },
        {
            "name": "async_update_translation",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-language-pack-upgrader.php",
            "line": 81,
            "doc": {
                "summary": "Filters whether to asynchronously update translation for core, a plugin, or a theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to update.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "The update offer.",
                        "types": [
                            "object"
                        ],
                        "variable": "language_update"
                    }
                ]
            }
        },
        {
            "name": "install_plugin_complete_actions",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-plugin-installer-skin.php",
            "line": 172,
            "doc": {
                "summary": "Filters the list of action links available following a single plugin installation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of plugin action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "install_actions"
                    },
                    {
                        "name": "param",
                        "content": "Object containing WordPress.org API plugin data. Empty for non-API installs, such as when a plugin is installed via upload.",
                        "types": [
                            "object"
                        ],
                        "variable": "api"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    }
                ]
            }
        },
        {
            "name": "install_plugin_overwrite_comparison",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-plugin-installer-skin.php",
            "line": 254,
            "doc": {
                "summary": "Filters the compare table output for overwriting a plugin package on upload.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The output table with Name, Version, Author, RequiresWP, and RequiresPHP info.",
                        "types": [
                            "string"
                        ],
                        "variable": "table"
                    },
                    {
                        "name": "param",
                        "content": "Array with current plugin data.",
                        "types": [
                            "array"
                        ],
                        "variable": "current_plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "Array with uploaded plugin data.",
                        "types": [
                            "array"
                        ],
                        "variable": "new_plugin_data"
                    }
                ]
            }
        },
        {
            "name": "install_plugin_overwrite_actions",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-plugin-installer-skin.php",
            "line": 337,
            "doc": {
                "summary": "Filters the list of action links available following a single plugin installation failure when overwriting is allowed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of plugin action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "install_actions"
                    },
                    {
                        "name": "param",
                        "content": "Object containing WordPress.org API plugin data.",
                        "types": [
                            "object"
                        ],
                        "variable": "api"
                    },
                    {
                        "name": "param",
                        "content": "Array with uploaded plugin data.",
                        "types": [
                            "array"
                        ],
                        "variable": "new_plugin_data"
                    }
                ]
            }
        },
        {
            "name": "update_plugin_complete_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-plugin-upgrader-skin.php",
            "line": 117,
            "doc": {
                "summary": "Filters the list of action links available following a single plugin update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of plugin action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "update_actions"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin"
                    }
                ]
            }
        },
        {
            "name": "upgrader_overwrote_package",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-plugin-upgrader.php",
            "line": 169,
            "doc": {
                "summary": "Fires when the upgrader has successfully overwritten a currently installed plugin or theme with an uploaded zip package.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The package file.",
                        "types": [
                            "string"
                        ],
                        "variable": "package"
                    },
                    {
                        "name": "param",
                        "content": "The new plugin or theme data.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The package type ('plugin' or 'theme').",
                        "types": [
                            "string"
                        ],
                        "variable": "package_type"
                    }
                ]
            }
        },
        {
            "name": "install_theme_complete_actions",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-theme-installer-skin.php",
            "line": 184,
            "doc": {
                "summary": "Filters the list of action links available following a single theme installation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of theme action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "install_actions"
                    },
                    {
                        "name": "param",
                        "content": "Object containing WordPress.org API theme data.",
                        "types": [
                            "object"
                        ],
                        "variable": "api"
                    },
                    {
                        "name": "param",
                        "content": "Theme directory name.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme_info"
                    }
                ]
            }
        },
        {
            "name": "install_theme_overwrite_comparison",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-theme-installer-skin.php",
            "line": 289,
            "doc": {
                "summary": "Filters the compare table output for overwriting a theme package on upload.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The output table with Name, Version, Author, RequiresWP, and RequiresPHP info.",
                        "types": [
                            "string"
                        ],
                        "variable": "table"
                    },
                    {
                        "name": "param",
                        "content": "Active theme data.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "current_theme_data"
                    },
                    {
                        "name": "param",
                        "content": "Array with uploaded theme data.",
                        "types": [
                            "array"
                        ],
                        "variable": "new_theme_data"
                    }
                ]
            }
        },
        {
            "name": "install_theme_overwrite_actions",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-theme-installer-skin.php",
            "line": 372,
            "doc": {
                "summary": "Filters the list of action links available following a single theme installation failure when overwriting is allowed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of theme action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "install_actions"
                    },
                    {
                        "name": "param",
                        "content": "Object containing WordPress.org API theme data.",
                        "types": [
                            "object"
                        ],
                        "variable": "api"
                    },
                    {
                        "name": "param",
                        "content": "Array with uploaded theme data.",
                        "types": [
                            "array"
                        ],
                        "variable": "new_theme_data"
                    }
                ]
            }
        },
        {
            "name": "update_theme_complete_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-theme-upgrader-skin.php",
            "line": 138,
            "doc": {
                "summary": "Filters the list of action links available following a single theme update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of theme action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "update_actions"
                    },
                    {
                        "name": "param",
                        "content": "Theme directory name.",
                        "types": [
                            "string"
                        ],
                        "variable": "theme"
                    }
                ]
            }
        },
        {
            "name": "wp_nav_menu_item_custom_fields",
            "type": "action",
            "numArgs": 5,
            "path": "\/wp-admin\/includes\/class-walker-nav-menu-edit.php",
            "line": 252,
            "doc": {
                "summary": "Fires just before the move buttons of a nav menu item in the menu editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Menu item ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "item_id"
                    },
                    {
                        "name": "param",
                        "content": "Menu item data object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "menu_item"
                    },
                    {
                        "name": "param",
                        "content": "Depth of menu item. Used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    },
                    {
                        "name": "param",
                        "content": "An object of menu item arguments.",
                        "types": [
                            "\\stdClass",
                            "null"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Nav menu ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "current_object_id"
                    }
                ]
            }
        },
        {
            "name": "manage_{$this->screen->id}_custom_column",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-application-passwords-list-table.php",
            "line": 141,
            "doc": {
                "summary": "Fires for each custom column in the Application Passwords list table.",
                "description": "<p>Custom columns are registered using the {@see 'manage_application-passwords-user_columns'} filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the custom column.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The application password item.",
                        "types": [
                            "array"
                        ],
                        "variable": "item"
                    }
                ]
            }
        },
        {
            "name": "manage_{$this->screen->id}_custom_column_js_template",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-application-passwords-list-table.php",
            "line": 251,
            "doc": {
                "summary": "Fires in the JavaScript row template for each custom column in the Application Passwords list table.",
                "description": "<p>Custom columns are registered using the {@see 'manage_application-passwords-user_columns'} filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the custom column.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    }
                ]
            }
        },
        {
            "name": "automatic_updater_disabled",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 56,
            "doc": {
                "summary": "Filters whether to entirely disable background updates.",
                "description": "<p>There are more fine-grained filters and controls for selective disabling.<br>This filter parallels the AUTOMATIC_UPDATER_DISABLED constant in name.<\/p> <p>This also disables update notification emails. That may change in the future.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the updater should be disabled.",
                        "types": [
                            "bool"
                        ],
                        "variable": "disabled"
                    }
                ]
            }
        },
        {
            "name": "automatic_updates_is_vcs_checkout",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 175,
            "doc": {
                "summary": "Filters whether the automatic updater should consider a filesystem location to be potentially managed by a version control system.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether a VCS checkout was discovered at <code>$context<\/code> or ABSPATH, or anywhere higher.",
                        "types": [
                            "bool"
                        ],
                        "variable": "checkout"
                    },
                    {
                        "name": "param",
                        "content": "The filesystem context (a path) against which filesystem status should be checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "auto_update_{$type}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 265,
            "doc": {
                "summary": "Filters whether to automatically update core, a plugin, a theme, or a language.",
                "description": "<p>The dynamic portion of the hook name, <code>$type<\/code>, refers to the type of update being checked.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>auto_update_core<\/code><\/li> <li><code>auto_update_plugin<\/code><\/li> <li><code>auto_update_theme<\/code><\/li> <li><code>auto_update_translation<\/code><\/li> <\/ul> <p>Since WordPress 3.7, minor and development versions of core, and translations have been auto-updated by default. New installs on WordPress 5.6 or higher will also auto-update major versions by default. Starting in 5.6, older sites can opt-in to major version auto-updates, and auto-updates for plugins and themes.<\/p> <p>See the {@see 'allow_dev_auto_core_updates'}, {@see 'allow_minor_auto_core_updates'}, and {@see 'allow_major_auto_core_updates'} filters for a more straightforward way to adjust core updates.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$update<\/code> parameter accepts the value of null."
                    },
                    {
                        "name": "param",
                        "content": "Whether to update. The value of null is internally used to detect whether nothing has hooked into this filter.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "The update offer.",
                        "types": [
                            "object"
                        ],
                        "variable": "item"
                    }
                ]
            }
        },
        {
            "name": "send_core_update_notification_email",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 342,
            "doc": {
                "summary": "Filters whether to notify the site administrator of a new core update.",
                "description": "<p>By default, administrators are notified when the update offer received from WordPress.org sets a particular flag. This allows some discretion in if and when to notify.<\/p> <p>This filter is only evaluated once per release. If the same email address was already notified of the same new version, WordPress won't repeatedly email the administrator.<\/p> <p>This filter is also used on about.php to check if a plugin has disabled these notifications.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the site administrator is notified.",
                        "types": [
                            "bool"
                        ],
                        "variable": "notify"
                    },
                    {
                        "name": "param",
                        "content": "The update offer.",
                        "types": [
                            "object"
                        ],
                        "variable": "item"
                    }
                ]
            }
        },
        {
            "name": "pre_auto_update",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 398,
            "doc": {
                "summary": "Fires immediately prior to an auto-update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The type of update being checked: 'core', 'theme', 'plugin', or 'translation'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "The update offer.",
                        "types": [
                            "object"
                        ],
                        "variable": "item"
                    },
                    {
                        "name": "param",
                        "content": "The filesystem context (a path) against which filesystem access and status should be checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "automatic_updates_send_debug_email",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 594,
            "doc": {
                "summary": "Filters whether to send a debugging email for each automatic background update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "By default, emails are sent if the install is a development version.<br>Return false to avoid the email.",
                        "types": [
                            "bool"
                        ],
                        "variable": "development_version"
                    }
                ]
            }
        },
        {
            "name": "automatic_updates_complete",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 611,
            "doc": {
                "summary": "Fires after all automatic updates have run.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The results of all attempted updates.",
                        "types": [
                            "array"
                        ],
                        "variable": "update_results"
                    }
                ]
            }
        },
        {
            "name": "auto_core_update_send_email",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 761,
            "doc": {
                "summary": "Filters whether to send an email following an automatic background core update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the email. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "The type of email to send. Can be one of 'success', 'fail', 'critical'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "The update offer that was attempted.",
                        "types": [
                            "object"
                        ],
                        "variable": "core_update"
                    },
                    {
                        "name": "param",
                        "content": "The result for the core update. Can be WP_Error.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "auto_core_update_email",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 961,
            "doc": {
                "summary": "Filters the email sent following an automatic background core update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of email arguments that will be passed to wp_mail().<br>    @type string $to      The email recipient. An array of emails                            can be returned, as handled by wp_mail().<br>    @type string $subject The email's subject.<br>    @type string $body    The email message body.<br>    @type string $headers Any email headers, defaults to no headers.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email"
                    },
                    {
                        "name": "param",
                        "content": "The type of email being sent. Can be one of 'success', 'fail', 'manual', 'critical'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "The update offer that was attempted.",
                        "types": [
                            "object"
                        ],
                        "variable": "core_update"
                    },
                    {
                        "name": "param",
                        "content": "The result for the core update. Can be WP_Error.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "auto_plugin_update_send_email",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 988,
            "doc": {
                "summary": "Filters whether to send an email following an automatic background plugin update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.1",
                        "description": "Added the <code>$update_results<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "True if plugin update notifications are enabled, false otherwise.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enabled"
                    },
                    {
                        "name": "param",
                        "content": "The results of plugins update tasks.",
                        "types": [
                            "array"
                        ],
                        "variable": "update_results"
                    }
                ]
            }
        },
        {
            "name": "auto_theme_update_send_email",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 1011,
            "doc": {
                "summary": "Filters whether to send an email following an automatic background theme update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.1",
                        "description": "Added the <code>$update_results<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "True if theme update notifications are enabled, false otherwise.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enabled"
                    },
                    {
                        "name": "param",
                        "content": "The results of theme update tasks.",
                        "types": [
                            "array"
                        ],
                        "variable": "update_results"
                    }
                ]
            }
        },
        {
            "name": "auto_plugin_theme_update_email",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 1344,
            "doc": {
                "summary": "Filters the email sent following an automatic background update for plugins and themes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of email arguments that will be passed to wp_mail().<br>    @type string $to      The email recipient. An array of emails                           can be returned, as handled by wp_mail().<br>    @type string $subject The email's subject.<br>    @type string $body    The email message body.<br>    @type string $headers Any email headers, defaults to no headers.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email"
                    },
                    {
                        "name": "param",
                        "content": "The type of email being sent. Can be one of 'success', 'fail', 'mixed'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "A list of updates that succeeded.",
                        "types": [
                            "array"
                        ],
                        "variable": "successful_updates"
                    },
                    {
                        "name": "param",
                        "content": "A list of updates that failed.",
                        "types": [
                            "array"
                        ],
                        "variable": "failed_updates"
                    }
                ]
            }
        },
        {
            "name": "automatic_updates_debug_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-automatic-updater.php",
            "line": 1537,
            "doc": {
                "summary": "Filters the debug email that can be sent following an automatic background core update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.8.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of email arguments that will be passed to wp_mail().<br>    @type string $to      The email recipient. An array of emails                           can be returned, as handled by wp_mail().<br>    @type string $subject Email subject.<br>    @type string $body    Email message body.<br>    @type string $headers Any email headers. Default empty.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email"
                    },
                    {
                        "name": "param",
                        "content": "The number of failures encountered while upgrading.",
                        "types": [
                            "int"
                        ],
                        "variable": "failures"
                    },
                    {
                        "name": "param",
                        "content": "The results of all attempted updates.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "results"
                    }
                ]
            }
        },
        {
            "name": "comments_list_table_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-comments-list-table.php",
            "line": 162,
            "doc": {
                "summary": "Filters the arguments for the comment query in the comments list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of get_comments() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "comments_per_page",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-comments-list-table.php",
            "line": 211,
            "doc": {
                "summary": "Filters the number of comments listed per page in the comments list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The number of comments to list per page.",
                        "types": [
                            "int"
                        ],
                        "variable": "comments_per_page"
                    },
                    {
                        "name": "param",
                        "content": "The comment status name. Default 'All'.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_status"
                    }
                ]
            }
        },
        {
            "name": "comment_status_links",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-comments-list-table.php",
            "line": 348,
            "doc": {
                "summary": "Filters the comment status links.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "The 'Mine' link was added."
                    },
                    {
                        "name": "param",
                        "content": "An associative array of fully-formed comment status links. Includes 'All', 'Mine', 'Pending', 'Approved', 'Spam', and 'Trash'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "status_links"
                    }
                ]
            }
        },
        {
            "name": "restrict_manage_comments",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/class-wp-comments-list-table.php",
            "line": 414,
            "doc": {
                "summary": "Fires just before the Filter submit button for comment types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ]
            }
        },
        {
            "name": "manage_comments_nav",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-comments-list-table.php",
            "line": 441,
            "doc": {
                "summary": "Fires after the Filter submit button for comment types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The <code>$which<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The comment status name. Default 'All'.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_status"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "which"
                    }
                ]
            }
        },
        {
            "name": "admin_comment_types_dropdown",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-comments-list-table.php",
            "line": 500,
            "endLine": 506,
            "doc": {
                "summary": "Filters the comment types shown in the drop-down menu on the Comments list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of comment type labels keyed by their name.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "comment_types"
                    }
                ]
            }
        },
        {
            "name": "manage_comments_custom_column",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-comments-list-table.php",
            "line": 1086,
            "doc": {
                "summary": "Fires when the default column output is displayed for a single row.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The custom column's name.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "plugin_auto_update_debug_string",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-debug-data.php",
            "line": 1056,
            "doc": {
                "summary": "Filters the text string of the auto-updates setting for each plugin in the Site Health debug data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The string output for the auto-updates column.",
                        "types": [
                            "string"
                        ],
                        "variable": "auto_updates_string"
                    },
                    {
                        "name": "param",
                        "content": "The path to the plugin file.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_path"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin"
                    },
                    {
                        "name": "param",
                        "content": "Whether auto-updates are enabled for this item.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enabled"
                    }
                ]
            }
        },
        {
            "name": "theme_auto_update_debug_string",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-debug-data.php",
            "line": 1370,
            "doc": {
                "summary": "Filters the text string of the auto-updates setting for each theme in the Site Health debug data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The string output for the auto-updates column.",
                        "types": [
                            "string"
                        ],
                        "variable": "auto_updates_string"
                    },
                    {
                        "name": "param",
                        "content": "An object of theme data.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "Whether auto-updates are enabled for this item.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enabled"
                    }
                ]
            }
        },
        {
            "name": "debug_information",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-debug-data.php",
            "line": 1459,
            "doc": {
                "summary": "Filters the debug information shown on the Tools -> Site Health -> Info screen.",
                "description": "<p>Plugin or themes may wish to introduce their own debug information without creating additional admin pages. They can utilize this filter to introduce their own sections or add more data to existing sections.<\/p> <p>Array keys for sections added by core are all prefixed with <code>wp-<\/code>. Plugins and themes should use their own slug as a prefix, both for consistency as well as avoiding key collisions. Note that the array keys are used as labels for the copied data.<\/p> <p>All strings are expected to be plain text except <code>$description<\/code> that can contain inline HTML tags (see below).<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "{     The debug information to be added to the core information page.<br>    This is an associative multi-dimensional array, up to three levels deep.<br>    The topmost array holds the sections, keyed by section ID.<br>    @type array ...$0 {         Each section has a <code>$fields<\/code> associative array (see below), and each <code>$value<\/code> in <code>$fields<\/code>         can be another associative array of name\/value pairs when there is more structured data         to display.<br>        @type string $label       Required. The title for this section of the debug output.<br>        @type string $description Optional. A description for your information section which                                   may contain basic HTML markup, inline tags only as it is                                   outputted in a paragraph.<br>        @type bool   $show_count  Optional. If set to <code>true<\/code>, the amount of fields will be included                                   in the title for this section. Default false.<br>        @type bool   $private     Optional. If set to <code>true<\/code>, the section and all associated fields                                   will be excluded from the copied data. Default false.<br>        @type array  $fields {             Required. An associative array containing the fields to be displayed in the section,             keyed by field ID.<br>            @type array ...$0 {                 An associative array containing the data to be displayed for the field.<br>                @type string $label    Required. The label for this piece of information.<br>                @type mixed  $value    Required. The output that is displayed for this field.<br>                                       Text should be translated. Can be an associative array                                        that is displayed as name\/value pairs.<br>                                       Accepted types: <code>string|int|float|(string|int|float)[]<\/code>.<br>                @type string $debug    Optional. The output that is used for this field when                                        the user copies the data. It should be more concise and                                        not translated. If not set, the content of <code>$value<\/code>                                        is used. Note that the array keys are used as labels                                        for the copied data.<br>                @type bool   $private  Optional. If set to <code>true<\/code>, the field will be excluded                                        from the copied data, allowing you to show, for example,                                        API keys here. Default false.<br>            }         }     } }",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "manage_link_custom_column",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-links-list-table.php",
            "line": 299,
            "doc": {
                "summary": "Fires for each registered custom link column.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the custom column.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "Link ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "link_id"
                    }
                ]
            }
        },
        {
            "name": "views_{$this->screen->id}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-list-table.php",
            "line": 482,
            "doc": {
                "summary": "Filters the list of available list table views.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;screen-&gt;id<\/code>, refers to the ID of the current screen.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of available list table views.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "views"
                    }
                ]
            }
        },
        {
            "name": "bulk_actions-{$this->screen->id}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-list-table.php",
            "line": 552,
            "doc": {
                "summary": "Filters the items in the bulk actions menu of the list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;screen-&gt;id<\/code>, refers to the ID of the current screen.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "A bulk action can now contain an array of options in order to create an optgroup."
                    },
                    {
                        "name": "param",
                        "content": "An array of the available bulk actions.",
                        "types": [
                            "array"
                        ],
                        "variable": "actions"
                    }
                ]
            }
        },
        {
            "name": "disable_months_dropdown",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-list-table.php",
            "line": 677,
            "doc": {
                "summary": "Filters whether to remove the 'Months' drop-down from the post list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to disable the drop-down. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "disable"
                    },
                    {
                        "name": "param",
                        "content": "The post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "pre_months_dropdown_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-list-table.php",
            "line": 689,
            "doc": {
                "summary": "Filters whether to short-circuit performing the months dropdown query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "'Months' drop-down results. Default false.",
                        "types": [
                            "object[]",
                            "false"
                        ],
                        "variable": "months"
                    },
                    {
                        "name": "param",
                        "content": "The post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "months_dropdown_results",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-list-table.php",
            "line": 721,
            "doc": {
                "summary": "Filters the 'Months' drop-down results.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of the months drop-down query results.",
                        "types": [
                            "object[]"
                        ],
                        "variable": "months"
                    },
                    {
                        "name": "param",
                        "content": "The post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "{$option}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-list-table.php",
            "line": 947,
            "doc": {
                "summary": "Filters the number of items to be displayed on each page of the list table.",
                "description": "<p>The dynamic hook name, <code>$option<\/code>, refers to the <code>per_page<\/code> option depending on the type of list table in use. Possible filter names include:<\/p> <ul> <li><code>edit_comments_per_page<\/code><\/li> <li><code>sites_network_per_page<\/code><\/li> <li><code>site_themes_network_per_page<\/code><\/li> <li><code>themes_network_per_page'<\/code><\/li> <li><code>users_network_per_page<\/code><\/li> <li><code>edit_post_per_page<\/code><\/li> <li><code>edit_page_per_page'<\/code><\/li> <li><code>edit_{$post_type}_per_page<\/code><\/li> <li><code>edit_post_tag_per_page<\/code><\/li> <li><code>edit_category_per_page<\/code><\/li> <li><code>edit_{$taxonomy}_per_page<\/code><\/li> <li><code>site_users_network_per_page<\/code><\/li> <li><code>users_per_page<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of items to be displayed. Default 20.",
                        "types": [
                            "int"
                        ],
                        "variable": "per_page"
                    }
                ]
            }
        },
        {
            "name": "list_table_primary_column",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-list-table.php",
            "line": 1190,
            "doc": {
                "summary": "Filters the name of the primary column for the current list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Column name default for the specific list table, e.g. 'name'.",
                        "types": [
                            "string"
                        ],
                        "variable": "default"
                    },
                    {
                        "name": "param",
                        "content": "Screen ID for specific list table, e.g. 'plugins'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "manage_{$this->screen->id}_sortable_columns",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-list-table.php",
            "line": 1247,
            "doc": {
                "summary": "Filters the list table sortable columns for a specific screen.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;screen-&gt;id<\/code>, refers to the ID of the current screen.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of sortable columns.",
                        "types": [
                            "array"
                        ],
                        "variable": "sortable_columns"
                    }
                ]
            }
        },
        {
            "name": "manage_taxonomies_for_attachment_columns",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-media-list-table.php",
            "line": 343,
            "doc": {
                "summary": "Filters the taxonomy columns for attachments in the Media list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of registered taxonomy names to show for attachments.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    },
                    {
                        "name": "param",
                        "content": "The post type. Default 'attachment'.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "manage_media_columns",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-media-list-table.php",
            "line": 384,
            "doc": {
                "summary": "Filters the Media list table columns.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of columns displayed in the Media list table.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "posts_columns"
                    },
                    {
                        "name": "param",
                        "content": "Whether the list table contains media not attached to any posts. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "detached"
                    }
                ]
            }
        },
        {
            "name": "media_date_column_time",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-media-list-table.php",
            "line": 552,
            "doc": {
                "summary": "Filters the published time of an attachment displayed in the Media list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The published time.",
                        "types": [
                            "string"
                        ],
                        "variable": "h_time"
                    },
                    {
                        "name": "param",
                        "content": "Attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The column name.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    }
                ]
            }
        },
        {
            "name": "manage_media_custom_column",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-media-list-table.php",
            "line": 697,
            "doc": {
                "summary": "Fires for each custom column in the Media list table.",
                "description": "<p>Custom columns are registered using the {@see 'manage_media_columns'} filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the custom column.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "media_row_actions",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-media-list-table.php",
            "line": 887,
            "doc": {
                "summary": "Filters the action links for each attachment in the Media list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of action links for each attachment.<br>Default 'Edit', 'Delete Permanently', 'View'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current attachment.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether the list table contains media not attached to any posts. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "detached"
                    }
                ]
            }
        },
        {
            "name": "ms_sites_list_table_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-ms-sites-list-table.php",
            "line": 175,
            "doc": {
                "summary": "Filters the arguments for the site query in the sites list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of get_sites() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "restrict_manage_sites",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-ms-sites-list-table.php",
            "line": 329,
            "doc": {
                "summary": "Fires before the Filter button on the MS sites list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "which"
                    }
                ]
            }
        },
        {
            "name": "manage_sites_extra_tablenav",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-ms-sites-list-table.php",
            "line": 349,
            "doc": {
                "summary": "Fires immediately following the closing \"actions\" div in the tablenav for the MS sites list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "which"
                    }
                ]
            }
        },
        {
            "name": "wpmu_blogs_columns",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-ms-sites-list-table.php",
            "line": 376,
            "doc": {
                "summary": "Filters the displayed site columns in Sites list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "An array of displayed site columns. Default 'cb', 'blogname', 'lastupdated', 'registered', 'users'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "sites_columns"
                    }
                ]
            }
        },
        {
            "name": "wpmublogsaction",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-ms-sites-list-table.php",
            "line": 554,
            "doc": {
                "summary": "Fires inside the auxiliary 'Actions' column of the Sites list table.",
                "description": "<p>By default this column is hidden unless something is hooked to the action.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "manage_sites_custom_column",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-ms-sites-list-table.php",
            "line": 576,
            "doc": {
                "summary": "Fires for each registered custom column in the Sites list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "display_site_states",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-ms-sites-list-table.php",
            "line": 637,
            "doc": {
                "summary": "Filters the default site display states for items in the Sites list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of site states. Default 'Main', 'Archived', 'Mature', 'Spam', 'Deleted'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "site_states"
                    },
                    {
                        "name": "param",
                        "content": "The current site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "site"
                    }
                ]
            }
        },
        {
            "name": "manage_sites_action_links",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-ms-sites-list-table.php",
            "line": 745,
            "doc": {
                "summary": "Filters the action links displayed for each site in the Sites list table.",
                "description": "<p>The 'Edit', 'Dashboard', 'Delete', and 'Visit' links are displayed by default for each site. The site's status determines whether to show the 'Activate' or 'Deactivate' link, 'Unarchive' or 'Archive' links, and 'Not Spam' or 'Spam' link for each site.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of action links to be displayed.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    },
                    {
                        "name": "param",
                        "content": "Site path, formatted depending on whether it is a sub-domain or subdirectory multisite installation.",
                        "types": [
                            "string"
                        ],
                        "variable": "blogname"
                    }
                ]
            }
        },
        {
            "name": "all_themes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-ms-themes-list-table.php",
            "line": 113,
            "doc": {
                "summary": "Filters the full array of WP_Theme objects to list in the Multisite themes list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of WP_Theme objects to display in the list table.",
                        "types": [
                            "\\WP_Theme[]"
                        ],
                        "variable": "all"
                    }
                ]
            }
        },
        {
            "name": "theme_action_links",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-ms-themes-list-table.php",
            "line": 664,
            "doc": {
                "summary": "Filters the action links displayed for each theme in the Multisite themes list table.",
                "description": "<p>The action links displayed are determined by the theme's status, and which Multisite themes list table is being displayed - the Network themes list table (themes.php), which displays all installed themes, or the Site themes list table (site-themes.php), which displays the non-network enabled themes when editing a site in the Network admin.<\/p> <p>The default action links for the Network themes list table include 'Network Enable', 'Network Disable', and 'Delete'.<\/p> <p>The default action links for the Site themes list table include 'Enable', and 'Disable'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "Status of the theme, one of 'all', 'enabled', or 'disabled'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "theme_action_links_{$stylesheet}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-ms-themes-list-table.php",
            "line": 680,
            "doc": {
                "summary": "Filters the action links of a specific theme in the Multisite themes list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$stylesheet<\/code>, refers to the directory name of the theme, which in most cases is synonymous with the template name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of action links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "Status of the theme, one of 'all', 'enabled', or 'disabled'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "theme_row_meta",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-ms-themes-list-table.php",
            "line": 760,
            "doc": {
                "summary": "Filters the array of row meta for each theme in the Multisite themes list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of the theme's metadata, including the version, author, and theme URI.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "theme_meta"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "Status of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "status"
                    }
                ]
            }
        },
        {
            "name": "theme_auto_update_setting_html",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-ms-themes-list-table.php",
            "line": 858,
            "doc": {
                "summary": "Filters the HTML of the auto-updates setting for each theme in the Themes list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML for theme's auto-update setting, including toggle auto-update action link and time to next update.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    }
                ]
            }
        },
        {
            "name": "manage_themes_custom_column",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-ms-themes-list-table.php",
            "line": 882,
            "endLine": 887,
            "doc": {
                "summary": "Fires inside each custom column of the Multisite themes list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the column.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    }
                ]
            }
        },
        {
            "name": "after_theme_row",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-ms-themes-list-table.php",
            "line": 1012,
            "doc": {
                "summary": "Fires after each row in the Multisite themes list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "Status of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "status"
                    }
                ]
            }
        },
        {
            "name": "after_theme_row_{$stylesheet}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-ms-themes-list-table.php",
            "line": 1027,
            "doc": {
                "summary": "Fires after each specific row in the Multisite themes list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$stylesheet<\/code>, refers to the directory name of the theme, most often synonymous with the template name of the theme.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "Status of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "status"
                    }
                ]
            }
        },
        {
            "name": "wpmu_users_columns",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-ms-users-list-table.php",
            "line": 207,
            "doc": {
                "summary": "Filters the columns displayed in the Network Admin Users list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "An array of user columns. Default 'cb', 'username', 'name', 'email', 'registered', 'blogs'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "users_columns"
                    }
                ]
            }
        },
        {
            "name": "ms_user_list_site_class",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-ms-users-list-table.php",
            "line": 394,
            "doc": {
                "summary": "Filters the span class for a site listing on the mulisite user list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of class names used within the span tag. Default &quot;site-#&quot; with the site's network ID.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "site_classes"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    },
                    {
                        "name": "param",
                        "content": "Network ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "ms_user_list_site_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-ms-users-list-table.php",
            "line": 431,
            "doc": {
                "summary": "Filters the action links displayed next the sites a user belongs to in the Network Admin Users list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of action links to be displayed. Default 'Edit', 'View'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "userblog_id"
                    }
                ]
            }
        },
        {
            "name": "ms_user_row_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-ms-users-list-table.php",
            "line": 542,
            "doc": {
                "summary": "Filters the action links displayed under each user in the Network Admin Users list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of action links to be displayed. Default 'Edit', 'Delete'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "install_plugins_tabs",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-plugin-install-list-table.php",
            "line": 133,
            "doc": {
                "summary": "Filters the tabs shown on the Add Plugins screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The tabs shown on the Add Plugins screen. Defaults include 'featured', 'popular', 'recommended', 'favorites', and 'upload'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "tabs"
                    }
                ]
            }
        },
        {
            "name": "install_plugins_nonmenu_tabs",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-plugin-install-list-table.php",
            "line": 142,
            "doc": {
                "summary": "Filters tabs not associated with a menu item on the Add Plugins screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The tabs that don't have a menu item on the Add Plugins screen.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "nonmenu_tabs"
                    }
                ]
            }
        },
        {
            "name": "install_plugins_table_api_args_{$tab}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-plugin-install-list-table.php",
            "line": 234,
            "doc": {
                "summary": "Filters API request arguments for each Add Plugins screen tab.",
                "description": "<p>The dynamic portion of the hook name, <code>$tab<\/code>, refers to the plugin install tabs.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>install_plugins_table_api_args_favorites<\/code><\/li> <li><code>install_plugins_table_api_args_featured<\/code><\/li> <li><code>install_plugins_table_api_args_popular<\/code><\/li> <li><code>install_plugins_table_api_args_recommended<\/code><\/li> <li><code>install_plugins_table_api_args_upload<\/code><\/li> <li><code>install_plugins_table_api_args_search<\/code><\/li> <li><code>install_plugins_table_api_args_beta<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Plugin install API arguments.",
                        "types": [
                            "array",
                            "false"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "install_plugins_table_header",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/class-wp-plugin-install-list-table.php",
            "line": 404,
            "doc": {
                "summary": "Fires before the Plugin Install table header pagination is displayed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    }
                ]
            }
        },
        {
            "name": "plugin_install_description",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-plugin-install-list-table.php",
            "line": 528,
            "doc": {
                "summary": "Filters the plugin card description on the Add Plugins screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Plugin card description.",
                        "types": [
                            "string"
                        ],
                        "variable": "description"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See {@see \\plugins_api()} for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin"
                    }
                ]
            }
        },
        {
            "name": "plugin_install_action_links",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-plugin-install-list-table.php",
            "line": 680,
            "doc": {
                "summary": "Filters the install action links for a plugin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin action links.<br>Defaults are links to Details and Install Now.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "action_links"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See {@see \\plugins_api()} for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin"
                    }
                ]
            }
        },
        {
            "name": "all_plugins",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 105,
            "doc": {
                "summary": "Filters the full array of plugins to list in the Plugins list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_plugins()"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugins to display in the list table.",
                        "types": [
                            "array"
                        ],
                        "variable": "all_plugins"
                    }
                ]
            }
        },
        {
            "name": "show_advanced_plugins",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 144,
            "doc": {
                "summary": "Filters whether to display the advanced plugins list table.",
                "description": "<p>There are two types of advanced plugins - must-use and drop-ins - which can be used in a single site or Multisite network.<\/p> <p>The $type parameter allows you to differentiate between the type of advanced plugins to filter the display of. Contexts include 'mustuse' and 'dropins'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the advanced plugins for the specified plugin type. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    },
                    {
                        "name": "param",
                        "content": "The plugin type. Accepts 'mustuse', 'dropins'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "show_network_active_plugins",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 179,
            "doc": {
                "summary": "Filters whether to display network-active plugins alongside plugins active for the current site.",
                "description": "<p>This also controls the display of inactive network-only plugins (plugins with &quot;Network: true&quot; in the plugin header).<\/p> <p>Plugins cannot be network-activated or network-deactivated from this screen.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show network-active plugins. Default is whether the current user can manage network plugins (ie. a Super Admin).",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "network_admin_plugin_action_links",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 910,
            "doc": {
                "summary": "Filters the action links displayed for each plugin in the Network Admin Plugins list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin action links. By default this can include 'activate', 'deactivate', and 'delete'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "The plugin context. By default this can include 'all', 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', and 'search'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "network_admin_plugin_action_links_{$plugin_file}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 930,
            "doc": {
                "summary": "Filters the list of action links displayed for a specific plugin in the Network Admin Plugins list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$plugin_file<\/code>, refers to the path to the plugin file, relative to the plugins directory.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin action links. By default this can include 'activate', 'deactivate', and 'delete'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "The plugin context. By default this can include 'all', 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', and 'search'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "plugin_action_links",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 952,
            "doc": {
                "summary": "Filters the action links displayed for each plugin in the Plugins list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "2.6.0",
                        "description": "The <code>$context<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The 'Edit' link was removed from the list of action links."
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin action links. By default this can include 'activate', 'deactivate', and 'delete'. With Multisite active this can also include 'network_active' and 'network_only' items.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "The plugin context. By default this can include 'all', 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', and 'search'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "plugin_action_links_{$plugin_file}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 974,
            "doc": {
                "summary": "Filters the list of action links displayed for a specific plugin in the Plugins list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$plugin_file<\/code>, refers to the path to the plugin file, relative to the plugins directory.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The 'Edit' link was removed from the list of action links."
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin action links. By default this can include 'activate', 'deactivate', and 'delete'. With Multisite active this can also include 'network_active' and 'network_only' items.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "The plugin context. By default this can include 'all', 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', and 'search'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "plugin_row_meta",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 1136,
            "doc": {
                "summary": "Filters the array of row meta for each plugin in the Plugins list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of the plugin's metadata, including the version, author, author URI, and plugin URI.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "plugin_meta"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of plugin data.<br>    @type string   $id               Plugin ID, e.g. <code>w.org\/plugins\/[plugin-name]<\/code>.<br>    @type string   $slug             Plugin slug.<br>    @type string   $plugin           Plugin basename.<br>    @type string   $new_version      New plugin version.<br>    @type string   $url              Plugin URL.<br>    @type string   $package          Plugin update package URL.<br>    @type string[] $icons            An array of plugin icon URLs.<br>    @type string[] $banners          An array of plugin banner URLs.<br>    @type string[] $banners_rtl      An array of plugin RTL banner URLs.<br>    @type string   $requires         The version of WordPress which the plugin requires.<br>    @type string   $tested           The version of WordPress the plugin is tested against.<br>    @type string   $requires_php     The version of PHP which the plugin requires.<br>    @type string   $upgrade_notice   The upgrade notice for the new plugin version.<br>    @type bool     $update-supported Whether the plugin supports updates.<br>    @type string   $Name             The human-readable name of the plugin.<br>    @type string   $PluginURI        Plugin URI.<br>    @type string   $Version          Plugin version.<br>    @type string   $Description      Plugin description.<br>    @type string   $Author           Plugin author.<br>    @type string   $AuthorURI        Plugin author URI.<br>    @type string   $TextDomain       Plugin textdomain.<br>    @type string   $DomainPath       Relative path to the plugin's .mo file(s).<br>    @type bool     $Network          Whether the plugin can only be activated network-wide.<br>    @type string   $RequiresWP       The version of WordPress which the plugin requires.<br>    @type string   $RequiresPHP      The version of PHP which the plugin requires.<br>    @type string   $UpdateURI        ID of the plugin for update purposes, should be a URI.<br>    @type string   $Title            The human-readable title of the plugin.<br>    @type string   $AuthorName       Plugin author's name.<br>    @type bool     $update           Whether there's an available update. Default null.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "Status filter currently applied to the plugin list. Possible values are: 'all', 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', 'search', 'paused', 'auto-update-enabled', 'auto-update-disabled'.",
                        "types": [
                            "string"
                        ],
                        "variable": "status"
                    }
                ]
            }
        },
        {
            "name": "plugin_auto_update_setting_html",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 1234,
            "doc": {
                "summary": "Filters the HTML of the auto-updates setting for each plugin in the Plugins list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML of the plugin's auto-update column content, including toggle auto-update action links and time to next update.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    }
                ]
            }
        },
        {
            "name": "manage_plugins_custom_column",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 1256,
            "doc": {
                "summary": "Fires inside each custom column of the Plugins list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the column.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    }
                ]
            }
        },
        {
            "name": "after_plugin_row",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 1336,
            "doc": {
                "summary": "Fires after each row in the Plugins list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added 'auto-update-enabled' and 'auto-update-disabled' to possible values for <code>$status<\/code>."
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "Status filter currently applied to the plugin list.<br>Possible values are: 'all', 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', 'search', 'paused', 'auto-update-enabled', 'auto-update-disabled'.",
                        "types": [
                            "string"
                        ],
                        "variable": "status"
                    }
                ]
            }
        },
        {
            "name": "after_plugin_row_{$plugin_file}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-plugins-list-table.php",
            "line": 1357,
            "doc": {
                "summary": "Fires after each specific row in the Plugins list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$plugin_file<\/code>, refers to the path to the plugin file, relative to the plugins directory.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added 'auto-update-enabled' and 'auto-update-disabled' to possible values for <code>$status<\/code>."
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "Status filter currently applied to the plugin list.<br>Possible values are: 'all', 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', 'search', 'paused', 'auto-update-enabled', 'auto-update-disabled'.",
                        "types": [
                            "string"
                        ],
                        "variable": "status"
                    }
                ]
            }
        },
        {
            "name": "disable_categories_dropdown",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 475,
            "doc": {
                "summary": "Filters whether to remove the 'Categories' drop-down from the post list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to disable the categories drop-down. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "disable"
                    },
                    {
                        "name": "param",
                        "content": "Post type slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "disable_formats_dropdown",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 513,
            "doc": {
                "summary": "Filters whether to remove the 'Formats' drop-down from the post list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$post_type<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Whether to disable the drop-down. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "disable"
                    },
                    {
                        "name": "param",
                        "content": "Post type slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "restrict_manage_posts",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 594,
            "doc": {
                "summary": "Fires before the Filter button on the Posts and Pages list tables.",
                "description": "<p>The Filter button allows sorting by date and\/or category on the Posts list table, and sorting by date on the Pages list table.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$post_type<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "The <code>$which<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The post type slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom' for WP_Posts_List_Table, 'bar' for WP_Media_List_Table.",
                        "types": [
                            "string"
                        ],
                        "variable": "which"
                    }
                ]
            }
        },
        {
            "name": "manage_posts_extra_tablenav",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 620,
            "doc": {
                "summary": "Fires immediately following the closing \"actions\" div in the tablenav for the posts list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "which"
                    }
                ]
            }
        },
        {
            "name": "manage_taxonomies_for_{$post_type}_columns",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 689,
            "doc": {
                "summary": "Filters the taxonomy columns in the Posts list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>manage_taxonomies_for_post_columns<\/code><\/li> <li><code>manage_taxonomies_for_page_columns<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of taxonomy names to show columns for.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    },
                    {
                        "name": "param",
                        "content": "The post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "manage_pages_columns",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 728,
            "doc": {
                "summary": "Filters the columns displayed in the Pages list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of column headings.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_columns"
                    }
                ]
            }
        },
        {
            "name": "manage_posts_columns",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 739,
            "doc": {
                "summary": "Filters the columns displayed in the Posts list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of column headings.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_columns"
                    },
                    {
                        "name": "param",
                        "content": "The post type slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "manage_{$post_type}_posts_columns",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 756,
            "doc": {
                "summary": "Filters the columns displayed in the Posts list table for a specific post type.",
                "description": "<p>The dynamic portion of the hook name, <code>$post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>manage_post_posts_columns<\/code><\/li> <li><code>manage_page_posts_columns<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of column headings.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_columns"
                    }
                ]
            }
        },
        {
            "name": "wp_list_table_show_post_checkbox",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1013,
            "doc": {
                "summary": "Filters whether to show the bulk edit checkbox for a post in its list table.",
                "description": "<p>By default the checkbox is only shown if the current user can edit the post.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the checkbox.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_date_column_status",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1201,
            "doc": {
                "summary": "Filters the status text of the post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The status text.",
                        "types": [
                            "string"
                        ],
                        "variable": "status"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The column name.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The list display mode ('excerpt' or 'list').",
                        "types": [
                            "string"
                        ],
                        "variable": "mode"
                    }
                ]
            }
        },
        {
            "name": "post_date_column_time",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1220,
            "doc": {
                "summary": "Filters the published time of the post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.1"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Removed the difference between 'excerpt' and 'list' modes.<br>The published time and date are both displayed now, which is equivalent to the previous 'excerpt' mode."
                    },
                    {
                        "name": "param",
                        "content": "The published time.",
                        "types": [
                            "string"
                        ],
                        "variable": "t_time"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The column name.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The list display mode ('excerpt' or 'list').",
                        "types": [
                            "string"
                        ],
                        "variable": "mode"
                    }
                ]
            }
        },
        {
            "name": "post_column_taxonomy_links",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1315,
            "doc": {
                "summary": "Filters the links in `$taxonomy` column of edit.php.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of term editing links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "term_links"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Array of term objects appearing in the post row.",
                        "types": [
                            "\\WP_Term[]"
                        ],
                        "variable": "terms"
                    }
                ]
            }
        },
        {
            "name": "manage_pages_custom_column",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1337,
            "doc": {
                "summary": "Fires in each custom column on the Posts list table.",
                "description": "<p>This hook only fires if the current post type is hierarchical, such as pages.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The current post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "manage_posts_custom_column",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1351,
            "doc": {
                "summary": "Fires in each custom column in the Posts list table.",
                "description": "<p>This hook only fires if the current post type is non-hierarchical, such as posts.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The current post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "manage_{$post->post_type}_posts_custom_column",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1369,
            "doc": {
                "summary": "Fires for each custom column of a specific post type in the Posts list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$post-&gt;post_type<\/code>, refers to the post type.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>manage_post_posts_custom_column<\/code><\/li> <li><code>manage_page_posts_custom_column<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The current post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "page_row_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1540,
            "doc": {
                "summary": "Filters the array of row action links on the Pages list table.",
                "description": "<p>The filter is evaluated only for hierarchical post types.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of row action links. Defaults are 'Edit', 'Quick Edit', 'Restore', 'Trash', 'Delete Permanently', 'Preview', and 'View'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "The post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_row_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1555,
            "doc": {
                "summary": "Filters the array of row action links on the Posts list table.",
                "description": "<p>The filter is evaluated only for non-hierarchical post types.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of row action links. Defaults are 'Edit', 'Quick Edit', 'Restore', 'Trash', 'Delete Permanently', 'Preview', and 'View'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "The post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "quick_edit_show_taxonomy",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1594,
            "doc": {
                "summary": "Filters whether the current taxonomy should be shown in the Quick Edit panel.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the current taxonomy in Quick Edit.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show_in_quick_edit"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy_name"
                    },
                    {
                        "name": "param",
                        "content": "Post type of current Quick Edit post.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "quick_edit_dropdown_authors_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1709,
            "doc": {
                "summary": "Filters the arguments used to generate the Quick Edit authors drop-down.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_dropdown_users()"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments passed to wp_dropdown_users().",
                        "types": [
                            "array"
                        ],
                        "variable": "users_opt"
                    },
                    {
                        "name": "param",
                        "content": "A flag to denote if it's a bulk action.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bulk"
                    }
                ]
            }
        },
        {
            "name": "quick_edit_dropdown_pages_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 1813,
            "doc": {
                "summary": "Filters the arguments used to generate the Quick Edit page-parent drop-down.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The <code>$bulk<\/code> parameter was added."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_dropdown_pages()"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments passed to wp_dropdown_pages().",
                        "types": [
                            "array"
                        ],
                        "variable": "dropdown_args"
                    },
                    {
                        "name": "param",
                        "content": "A flag to denote if it's a bulk action.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bulk"
                    }
                ]
            }
        },
        {
            "name": "bulk_edit_custom_box",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 2019,
            "doc": {
                "summary": "Fires once for each column in Bulk Edit mode.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the column to edit.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The post type slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "quick_edit_custom_box",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-posts-list-table.php",
            "line": 2031,
            "doc": {
                "summary": "Fires once for each column in Quick Edit mode.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the column to edit.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The post type slug, or current screen name if this is a taxonomy list table.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy name, if any.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "wp_get_default_privacy_policy_content",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-privacy-policy-content.php",
            "line": 684,
            "endLine": 689,
            "doc": {
                "summary": "Filters the default content suggested for inclusion in a privacy policy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "since",
                        "content": "5.0.0",
                        "description": "Added the <code>$strings<\/code>, <code>$description<\/code>, and <code>$blocks<\/code> parameters."
                    },
                    {
                        "name": "deprecated",
                        "content": "5.7.0",
                        "description": "Use wp_add_privacy_policy_content() instead."
                    },
                    {
                        "name": "param",
                        "content": "The default policy content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "An array of privacy policy content strings.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "strings"
                    },
                    {
                        "name": "param",
                        "content": "Whether policy descriptions should be included.",
                        "types": [
                            "bool"
                        ],
                        "variable": "description"
                    },
                    {
                        "name": "param",
                        "content": "Whether the content should be formatted for the block editor.",
                        "types": [
                            "bool"
                        ],
                        "variable": "blocks"
                    }
                ]
            }
        },
        {
            "name": "manage_{$this->screen->id}_custom_column",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-privacy-requests-table.php",
            "line": 502,
            "doc": {
                "summary": "Fires for each custom column of a specific request type in the Requests list table.",
                "description": "<p>Custom columns are registered using the {@see 'manage_export-personal-data_columns'} and the {@see 'manage_erase-personal-data_columns'} filters.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "The item being shown.",
                        "types": [
                            "\\WP_User_Request"
                        ],
                        "variable": "item"
                    }
                ]
            }
        },
        {
            "name": "current_screen",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-screen.php",
            "line": 424,
            "doc": {
                "summary": "Fires after the current screen has been set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Screen object.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "current_screen"
                    }
                ]
            }
        },
        {
            "name": "contextual_help_list",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-screen.php",
            "line": 802,
            "endLine": 807,
            "doc": {
                "summary": "Filters the legacy contextual help list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.3.0",
                        "description": "Use {@see get_current_screen()-&gt;add_help_tab()} or {@see get_current_screen()-&gt;remove_help_tab()} instead."
                    },
                    {
                        "name": "param",
                        "content": "Old contextual help.",
                        "types": [
                            "array"
                        ],
                        "variable": "old_compat_help"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Screen instance.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    }
                ]
            }
        },
        {
            "name": "contextual_help",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-screen.php",
            "line": 822,
            "endLine": 827,
            "doc": {
                "summary": "Filters the legacy contextual help text.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.3.0",
                        "description": "Use {@see get_current_screen()-&gt;add_help_tab()} or {@see get_current_screen()-&gt;remove_help_tab()} instead."
                    },
                    {
                        "name": "param",
                        "content": "Help text that appears on the screen.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_help"
                    },
                    {
                        "name": "param",
                        "content": "Screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_id"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Screen instance.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    }
                ]
            }
        },
        {
            "name": "default_contextual_help",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-screen.php",
            "line": 841,
            "endLine": 846,
            "doc": {
                "summary": "Filters the default legacy contextual help text.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.3.0",
                        "description": "Use {@see get_current_screen()-&gt;add_help_tab()} or {@see get_current_screen()-&gt;remove_help_tab()} instead."
                    },
                    {
                        "name": "param",
                        "content": "Default contextual help text.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_help_default"
                    }
                ]
            }
        },
        {
            "name": "screen_layout_columns",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-screen.php",
            "line": 943,
            "doc": {
                "summary": "Filters the array of screen layout columns.",
                "description": "<p>This hook provides back-compat for plugins using the back-compat Filters instead of add_screen_option().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "empty_columns"
                    },
                    {
                        "name": "param",
                        "content": "Screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_id"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Screen instance.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    }
                ]
            }
        },
        {
            "name": "screen_settings",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-screen.php",
            "line": 1019,
            "doc": {
                "summary": "Filters the screen settings text displayed in the Screen Options tab.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Screen settings.",
                        "types": [
                            "string"
                        ],
                        "variable": "screen_settings"
                    },
                    {
                        "name": "param",
                        "content": "WP_Screen object.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    }
                ]
            }
        },
        {
            "name": "screen_options_show_screen",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-screen.php",
            "line": 1034,
            "doc": {
                "summary": "Filters whether to show the Screen Options tab.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show Screen Options tab.<br>Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show_screen"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Screen instance.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    }
                ]
            }
        },
        {
            "name": "screen_options_show_submit",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-screen.php",
            "line": 1092,
            "doc": {
                "summary": "Filters whether to show the Screen Options submit button.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show Screen Options submit button.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show_button"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Screen instance.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    }
                ]
            }
        },
        {
            "name": "view_mode_post_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-screen.php",
            "line": 1315,
            "doc": {
                "summary": "Filters the post types that have different view mode options.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of post types that can change view modes.<br>Default post types with show_ui on.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "view_mode_post_types"
                    }
                ]
            }
        },
        {
            "name": "site_status_test_result",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 194,
            "doc": {
                "summary": "Filters the output of a finished Site Health test.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An associative array of test result data.<br>    @type string $label       A label describing the test, and is used as a header in the output.<br>    @type string $status      The status of the test, which can be a value of <code>good<\/code>, <code>recommended<\/code> or <code>critical<\/code>.<br>    @type array  $badge {         Tests are put into categories which have an associated badge shown, these can be modified and assigned here.<br>        @type string $label The test label, for example <code>Performance<\/code>.<br>        @type string $color Default <code>blue<\/code>. A string representing a color to use for the label.<br>    }     @type string $description A more descriptive explanation of what the test looks for, and why it is important for the end user.<br>    @type string $actions     An action to direct the user to where they can resolve the issue, if one exists.<br>    @type string $test        The name of the test being ran, used as a reference point.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "test_result"
                    }
                ]
            }
        },
        {
            "name": "site_status_test_php_modules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 1024,
            "doc": {
                "summary": "Filters the array representing all the modules we wish to test for.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.3.0",
                        "description": "The <code>$constant<\/code> and <code>$class<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "{     An associative array of modules to test for.<br>    @type array ...$0 {         An associative array of module properties used during testing.<br>        One of either <code>$function<\/code> or <code>$extension<\/code> must be provided, or they will fail by default.<br>        @type string $function     Optional. A function name to test for the existence of.<br>        @type string $extension    Optional. An extension to check if is loaded in PHP.<br>        @type string $constant     Optional. A constant name to check for to verify an extension exists.<br>        @type string $class        Optional. A class name to check for to verify an extension exists.<br>        @type bool   $required     Is this a required feature or not.<br>        @type string $fallback_for Optional. The module this module replaces as a fallback.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "modules"
                    }
                ]
            }
        },
        {
            "name": "site_status_persistent_object_cache_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 2438,
            "endLine": 2442,
            "doc": {
                "summary": "Filters the action URL for the persistent object cache health check.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Learn more link for persistent object cache health check.",
                        "types": [
                            "string"
                        ],
                        "variable": "action_url"
                    }
                ]
            }
        },
        {
            "name": "site_status_persistent_object_cache_notes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 2500,
            "doc": {
                "summary": "Filters the second paragraph of the health check's description when suggesting the use of a persistent object cache.",
                "description": "<p>Hosts may want to replace the notes to recommend their preferred object caching solution.<\/p> <p>Plugin authors may want to append notes (not replace) on why object caching is recommended for their plugin.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The notes appended to the health check description.",
                        "types": [
                            "string"
                        ],
                        "variable": "notes"
                    },
                    {
                        "name": "param",
                        "content": "The list of available persistent object cache services.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "available_services"
                    }
                ]
            }
        },
        {
            "name": "site_status_tests",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 2707,
            "doc": {
                "summary": "Filters which site status tests are run on a site.",
                "description": "<p>The site health is determined by a set of tests based on best practices from both the WordPress Hosting Team and web standards in general.<\/p> <p>Some sites may not have the same requirements, for example the automatic update checks may be handled by a host, and are therefore disabled in core.<br>Or maybe you want to introduce a new test, is caching enabled\/disabled\/stale for example.<\/p> <p>Tests may be added either as direct, or asynchronous ones. Any test that may require some time to complete should run asynchronously, to avoid extended loading periods within wp-admin.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "Added the <code>async_direct_test<\/code> array key for asynchronous tests.<br>Added the <code>skip_cron<\/code> array key for all tests."
                    },
                    {
                        "name": "param",
                        "content": "{     An associative array of direct and asynchronous tests.<br>    @type array[] $direct {         An array of direct tests.<br>        @type array ...$identifier {             <code>$identifier<\/code> should be a unique identifier for the test. Plugins and themes are encouraged to             prefix test identifiers with their slug to avoid collisions between tests.<br>            @type string   $label     The friendly label to identify the test.<br>            @type callable $test      The callback function that runs the test and returns its result.<br>            @type bool     $skip_cron Whether to skip this test when running as cron.<br>        }     }     @type array[] $async {         An array of asynchronous tests.<br>        @type array ...$identifier {             <code>$identifier<\/code> should be a unique identifier for the test. Plugins and themes are encouraged to             prefix test identifiers with their slug to avoid collisions between tests.<br>            @type string   $label             The friendly label to identify the test.<br>            @type string   $test              An admin-ajax.php action to be called to perform the test, or                                               if <code>$has_rest<\/code> is true, a URL to a REST API endpoint to perform                                               the test.<br>            @type bool     $has_rest          Whether the <code>$test<\/code> property points to a REST API endpoint.<br>            @type bool     $skip_cron         Whether to skip this test when running as cron.<br>            @type callable $async_direct_test A manner of directly calling the test marked as asynchronous,                                               as the scheduled event can not authenticate, and endpoints                                               may require authentication.<br>        }     } }",
                        "types": [
                            "array[]"
                        ],
                        "variable": "tests"
                    }
                ]
            }
        },
        {
            "name": "site_status_page_cache_supported_cache_headers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 3175,
            "doc": {
                "summary": "Filters the list of cache headers supported by core.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of supported cache headers.",
                        "types": [
                            "array"
                        ],
                        "variable": "cache_headers"
                    }
                ]
            }
        },
        {
            "name": "site_status_good_response_time_threshold",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 3321,
            "doc": {
                "summary": "Filters the threshold below which a response time is considered good.",
                "description": "<p>The default is based on <a href=\"https:\/\/web.dev\/time-to-first-byte\/\">https:\/\/web.dev\/time-to-first-byte\/<\/a>.<\/p>",
                "tags": [
                    {
                        "name": "param",
                        "content": "Threshold in milliseconds. Default 600.",
                        "types": [
                            "int"
                        ],
                        "variable": "threshold"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0"
                    }
                ]
            }
        },
        {
            "name": "site_status_should_suggest_persistent_object_cache",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 3346,
            "doc": {
                "summary": "Filters whether to suggest use of a persistent object cache and bypass default threshold checks.",
                "description": "<p>Using this filter allows to override the default logic, effectively short-circuiting the method.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Boolean to short-circuit, for whether to suggest using a persistent object cache.<br>Default null.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "suggest"
                    }
                ]
            }
        },
        {
            "name": "site_status_persistent_object_cache_thresholds",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 3362,
            "endLine": 3373,
            "doc": {
                "summary": "Filters the thresholds used to determine whether to suggest the use of a persistent object cache.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The list of threshold numbers keyed by threshold name.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "thresholds"
                    }
                ]
            }
        },
        {
            "name": "site_status_available_object_cache_services",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-health.php",
            "line": 3444,
            "doc": {
                "summary": "Filters the persistent object cache services available to the user.",
                "description": "<p>This can be useful to hide or add services not included in the defaults.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The list of available persistent object cache services.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "services"
                    }
                ]
            }
        },
        {
            "name": "site_icon_attachment_metadata",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-icon.php",
            "line": 128,
            "doc": {
                "summary": "Filters the site icon attachment metadata.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_generate_attachment_metadata()"
                    },
                    {
                        "name": "param",
                        "content": "Attachment metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    }
                ]
            }
        },
        {
            "name": "site_icon_image_sizes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-site-icon.php",
            "line": 152,
            "doc": {
                "summary": "Filters the different dimensions that a site icon is saved in.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of sizes available for the Site Icon.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "site_icon_sizes"
                    }
                ]
            }
        },
        {
            "name": "edit_tags_per_page",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-terms-list-table.php",
            "line": 91,
            "doc": {
                "summary": "Filters the number of terms displayed per page for the Tags list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of tags to be displayed. Default 20.",
                        "types": [
                            "int"
                        ],
                        "variable": "tags_per_page"
                    }
                ]
            }
        },
        {
            "name": "tagsperpage",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-terms-list-table.php",
            "line": 101,
            "doc": {
                "summary": "Filters the number of terms displayed per page for the Tags list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "2.8.0",
                        "description": "Use {@see 'edit_tags_per_page'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Number of tags to be displayed. Default 20.",
                        "types": [
                            "int"
                        ],
                        "variable": "tags_per_page"
                    }
                ]
            }
        },
        {
            "name": "edit_categories_per_page",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-terms-list-table.php",
            "line": 110,
            "doc": {
                "summary": "Filters the number of terms displayed per page for the Categories list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of categories to be displayed. Default 20.",
                        "types": [
                            "int"
                        ],
                        "variable": "tags_per_page"
                    }
                ]
            }
        },
        {
            "name": "term_name",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-terms-list-table.php",
            "line": 393,
            "doc": {
                "summary": "Filters display of the term name in the terms list table.",
                "description": "<p>The default output may include padding due to the term's current level in the term hierarchy.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Terms_List_Table::column_name()"
                    },
                    {
                        "name": "param",
                        "content": "The term name, padded if not top-level.",
                        "types": [
                            "string"
                        ],
                        "variable": "pad_tag_name"
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "tag_row_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-terms-list-table.php",
            "line": 519,
            "doc": {
                "summary": "Filters the action links displayed for each term in the Tags list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0",
                        "description": "Deprecated in favor of {@see '{$taxonomy}_row_actions'} filter."
                    },
                    {
                        "name": "since",
                        "content": "5.4.2",
                        "description": "Restored (un-deprecated)."
                    },
                    {
                        "name": "param",
                        "content": "An array of action links to be displayed. Default 'Edit', 'Quick Edit', 'Delete', and 'View'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_row_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-terms-list-table.php",
            "line": 537,
            "doc": {
                "summary": "Filters the action links displayed for each term in the terms list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_row_actions<\/code><\/li> <li><code>post_tag_row_actions<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of action links to be displayed. Default 'Edit', 'Quick Edit', 'Delete', and 'View'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "tag"
                    }
                ]
            }
        },
        {
            "name": "manage_{$this->screen->taxonomy}_custom_column",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-terms-list-table.php",
            "line": 639,
            "doc": {
                "summary": "Filters the displayed columns in the terms list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;screen-&gt;taxonomy<\/code>, refers to the slug of the current taxonomy.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>manage_category_custom_column<\/code><\/li> <li><code>manage_post_tag_custom_column<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Custom column output. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "string"
                    },
                    {
                        "name": "param",
                        "content": "Name of the column.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    }
                ]
            }
        },
        {
            "name": "install_themes_nonmenu_tabs",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-theme-install-list-table.php",
            "line": 81,
            "doc": {
                "summary": "Filters tabs not associated with a menu item on the Install Themes screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The tabs that don't have a menu item on the Install Themes screen.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "nonmenu_tabs"
                    }
                ]
            }
        },
        {
            "name": "install_themes_table_api_args_{$tab}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-theme-install-list-table.php",
            "line": 149,
            "doc": {
                "summary": "Filters API request arguments for each Install Themes screen tab.",
                "description": "<p>The dynamic portion of the hook name, <code>$tab<\/code>, refers to the theme install tab.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>install_themes_table_api_args_dashboard<\/code><\/li> <li><code>install_themes_table_api_args_featured<\/code><\/li> <li><code>install_themes_table_api_args_new<\/code><\/li> <li><code>install_themes_table_api_args_search<\/code><\/li> <li><code>install_themes_table_api_args_updated<\/code><\/li> <li><code>install_themes_table_api_args_upload<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Theme install API arguments.",
                        "types": [
                            "array",
                            "false"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "install_themes_table_header",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/class-wp-theme-install-list-table.php",
            "line": 216,
            "doc": {
                "summary": "Fires in the Install Themes list table header.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "theme_install_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-theme-install-list-table.php",
            "line": 359,
            "doc": {
                "summary": "Filters the install action links for a theme in the Install Themes list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of theme action links. Defaults are links to Install Now, Preview, and Details.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "An object that contains theme data returned by the WordPress.org API.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "theme"
                    }
                ]
            }
        },
        {
            "name": "upgrader_pre_download",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-upgrader.php",
            "line": 270,
            "doc": {
                "summary": "Filters whether to return the package.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$hook_extra<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Whether to bail without returning the package.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "reply"
                    },
                    {
                        "name": "param",
                        "content": "The package file name.",
                        "types": [
                            "string"
                        ],
                        "variable": "package"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Upgrader instance.",
                        "types": [
                            "\\WP_Upgrader"
                        ],
                        "variable": "upgrader"
                    },
                    {
                        "name": "param",
                        "content": "Extra arguments passed to hooked filters.",
                        "types": [
                            "array"
                        ],
                        "variable": "hook_extra"
                    }
                ]
            }
        },
        {
            "name": "upgrader_pre_install",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-upgrader.php",
            "line": 494,
            "doc": {
                "summary": "Filters the installation response before the installation has started.",
                "description": "<p>Returning a value that could be evaluated as a <code>WP_Error<\/code> will effectively short-circuit the installation, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Installation response.",
                        "types": [
                            "bool",
                            "\\WP_Error"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Extra arguments passed to hooked filters.",
                        "types": [
                            "array"
                        ],
                        "variable": "hook_extra"
                    }
                ]
            }
        },
        {
            "name": "upgrader_source_selection",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-upgrader.php",
            "line": 531,
            "doc": {
                "summary": "Filters the source file location for the upgrade package.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The $hook_extra parameter became available."
                    },
                    {
                        "name": "param",
                        "content": "File source location.",
                        "types": [
                            "string"
                        ],
                        "variable": "source"
                    },
                    {
                        "name": "param",
                        "content": "Remote file source location.",
                        "types": [
                            "string"
                        ],
                        "variable": "remote_source"
                    },
                    {
                        "name": "param",
                        "content": "WP_Upgrader instance.",
                        "types": [
                            "\\WP_Upgrader"
                        ],
                        "variable": "upgrader"
                    },
                    {
                        "name": "param",
                        "content": "Extra arguments passed to hooked filters.",
                        "types": [
                            "array"
                        ],
                        "variable": "hook_extra"
                    }
                ]
            }
        },
        {
            "name": "upgrader_clear_destination",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/class-wp-upgrader.php",
            "line": 577,
            "doc": {
                "summary": "Filters whether the upgrader cleared the destination.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the destination was cleared.<br>True upon success, WP_Error on failure.",
                        "types": [
                            "true",
                            "\\WP_Error"
                        ],
                        "variable": "removed"
                    },
                    {
                        "name": "param",
                        "content": "The local package destination.",
                        "types": [
                            "string"
                        ],
                        "variable": "local_destination"
                    },
                    {
                        "name": "param",
                        "content": "The remote package destination.",
                        "types": [
                            "string"
                        ],
                        "variable": "remote_destination"
                    },
                    {
                        "name": "param",
                        "content": "Extra arguments passed to hooked filters.",
                        "types": [
                            "array"
                        ],
                        "variable": "hook_extra"
                    }
                ]
            }
        },
        {
            "name": "upgrader_post_install",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-upgrader.php",
            "line": 642,
            "doc": {
                "summary": "Filters the installation response after the installation has finished.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Installation response.",
                        "types": [
                            "bool"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Extra arguments passed to hooked filters.",
                        "types": [
                            "array"
                        ],
                        "variable": "hook_extra"
                    },
                    {
                        "name": "param",
                        "content": "Installation result data.",
                        "types": [
                            "array"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "upgrader_package_options",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-upgrader.php",
            "line": 730,
            "doc": {
                "summary": "Filters the package options before running an update.",
                "description": "<p>See also {@see 'upgrader_process_complete'}.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Options used by the upgrader.<br>    @type string $package                     Package for update.<br>    @type string $destination                 Update location.<br>    @type bool   $clear_destination           Clear the destination resource.<br>    @type bool   $clear_working               Clear the working resource.<br>    @type bool   $abort_if_destination_exists Abort if the Destination directory exists.<br>    @type bool   $is_multi                    Whether the upgrader is running multiple times.<br>    @type array  $hook_extra {         Extra hook arguments.<br>        @type string $action               Type of action. Default 'update'.<br>        @type string $type                 Type of update process. Accepts 'plugin', 'theme', or 'core'.<br>        @type bool   $bulk                 Whether the update process is a bulk update. Default true.<br>        @type string $plugin               Path to the plugin file relative to the plugins directory.<br>        @type string $theme                The stylesheet or template name of the theme.<br>        @type string $language_update_type The language pack update type. Accepts 'plugin', 'theme',                                            or 'core'.<br>        @type object $language_update      The language pack update offer.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "options"
                    }
                ]
            }
        },
        {
            "name": "upgrader_install_package_result",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-upgrader.php",
            "line": 827,
            "doc": {
                "summary": "Filters the result of WP_Upgrader::install_package().",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Result from WP_Upgrader::install_package().",
                        "types": [
                            "array",
                            "\\WP_Error"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Extra arguments passed to hooked filters.",
                        "types": [
                            "array"
                        ],
                        "variable": "hook_extra"
                    }
                ]
            }
        },
        {
            "name": "upgrader_process_complete",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-upgrader.php",
            "line": 875,
            "doc": {
                "summary": "Fires when the upgrader process is complete.",
                "description": "<p>See also {@see 'upgrader_package_options'}.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "3.7.0",
                        "description": "Added to WP_Upgrader::run()."
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "<code>$translations<\/code> was added as a possible argument to <code>$hook_extra<\/code>."
                    },
                    {
                        "name": "param",
                        "content": "WP_Upgrader instance. In other contexts this might be a Theme_Upgrader, Plugin_Upgrader, Core_Upgrade, or Language_Pack_Upgrader instance.",
                        "types": [
                            "\\WP_Upgrader"
                        ],
                        "variable": "upgrader"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of bulk item update data.<br>    @type string $action       Type of action. Default 'update'.<br>    @type string $type         Type of update process. Accepts 'plugin', 'theme', 'translation', or 'core'.<br>    @type bool   $bulk         Whether the update process is a bulk update. Default true.<br>    @type array  $plugins      Array of the basename paths of the plugins' main files.<br>    @type array  $themes       The theme slugs.<br>    @type array  $translations {         Array of translations update data.<br>        @type string $language The locale the translation is for.<br>        @type string $type     Type of translation. Accepts 'plugin', 'theme', or 'core'.<br>        @type string $slug     Text domain the translation is for. The slug of a theme\/plugin or                                'default' for core translations.<br>        @type string $version  The version of a theme, plugin, or core.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "hook_extra"
                    }
                ]
            }
        },
        {
            "name": "users_list_table_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-users-list-table.php",
            "line": 137,
            "doc": {
                "summary": "Filters the query arguments used to retrieve users for the current users list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to WP_User_Query to retrieve items for the current users list table.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "restrict_manage_users",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-users-list-table.php",
            "line": 330,
            "doc": {
                "summary": "Fires just before the closing div containing the bulk role-change controls in the Users list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "The <code>$which<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "which"
                    }
                ]
            }
        },
        {
            "name": "manage_users_extra_tablenav",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/class-wp-users-list-table.php",
            "line": 342,
            "doc": {
                "summary": "Fires immediately following the closing \"actions\" div in the tablenav for the users list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "which"
                    }
                ]
            }
        },
        {
            "name": "user_row_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-users-list-table.php",
            "line": 519,
            "doc": {
                "summary": "Filters the action links displayed under each user in the Users list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of action links to be displayed.<br>Default 'Edit', 'Delete' for single site, and 'Edit', 'Remove' for Multisite.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object for the currently listed user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user_object"
                    }
                ]
            }
        },
        {
            "name": "manage_users_custom_column",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/class-wp-users-list-table.php",
            "line": 624,
            "doc": {
                "summary": "Filters the display output of custom columns in the Users list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Custom column output. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Column name.",
                        "types": [
                            "string"
                        ],
                        "variable": "column_name"
                    },
                    {
                        "name": "param",
                        "content": "ID of the currently-listed user.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "get_role_list",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/class-wp-users-list-table.php",
            "line": 680,
            "doc": {
                "summary": "Filters the returned array of translated role names for a user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of translated user role names keyed by role.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "role_list"
                    },
                    {
                        "name": "param",
                        "content": "A WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user_object"
                    }
                ]
            }
        },
        {
            "name": "comment_edit_pre",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/comment.php",
            "line": 127,
            "doc": {
                "summary": "Filters the comment content before editing.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment content.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_content"
                    }
                ]
            }
        },
        {
            "name": "wp_network_dashboard_setup",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 101,
            "doc": {
                "summary": "Fires after core widgets for the Network Admin dashboard have been registered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "wp_network_dashboard_widgets",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 110,
            "doc": {
                "summary": "Filters the list of widgets to load for the Network Admin dashboard.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of dashboard widget IDs.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "dashboard_widgets"
                    }
                ]
            }
        },
        {
            "name": "wp_user_dashboard_setup",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 118,
            "doc": {
                "summary": "Fires after core widgets for the User Admin dashboard have been registered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "wp_user_dashboard_widgets",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 127,
            "doc": {
                "summary": "Filters the list of widgets to load for the User Admin dashboard.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of dashboard widget IDs.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "dashboard_widgets"
                    }
                ]
            }
        },
        {
            "name": "wp_dashboard_setup",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 135,
            "doc": {
                "summary": "Fires after core widgets for the admin dashboard have been registered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "wp_dashboard_widgets",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 144,
            "doc": {
                "summary": "Filters the list of widgets to load for the admin dashboard.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of dashboard widget IDs.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "dashboard_widgets"
                    }
                ]
            }
        },
        {
            "name": "dashboard_glance_items",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 362,
            "doc": {
                "summary": "Filters the array of extra elements to list in the 'At a Glance' dashboard widget.",
                "description": "<p>Prior to 3.8.0, the widget was named 'Right Now'. Each element is wrapped in list-item tags on output.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of extra 'At a Glance' widget items.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "items"
                    }
                ]
            }
        },
        {
            "name": "privacy_on_link_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 389,
            "doc": {
                "summary": "Filters the link title attribute for the 'Search engines discouraged' message displayed in the 'At a Glance' dashboard widget.",
                "description": "<p>Prior to 3.8.0, the widget was named 'Right Now'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The default for <code>$title<\/code> was updated to an empty string."
                    },
                    {
                        "name": "param",
                        "content": "Default attribute text.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "privacy_on_link_text",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 401,
            "doc": {
                "summary": "Filters the link label for the 'Search engines discouraged' message displayed in the 'At a Glance' dashboard widget.",
                "description": "<p>Prior to 3.8.0, the widget was named 'Right Now'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Default text.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "rightnow_end",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 423,
            "doc": {
                "summary": "Fires at the end of the 'At a Glance' dashboard widget.",
                "description": "<p>Prior to 3.8.0, the widget was named 'Right Now'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "activity_box_end",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 432,
            "doc": {
                "summary": "Fires at the end of the 'At a Glance' dashboard widget.",
                "description": "<p>Prior to 3.8.0, the widget was named 'Right Now'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "wpmuadminresult",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 490,
            "doc": {
                "summary": "Fires in the Network Admin 'Right Now' dashboard widget just before the user and site search form fields.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    }
                ]
            }
        },
        {
            "name": "mu_rightnow_end",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 524,
            "doc": {
                "summary": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    }
                ]
            }
        },
        {
            "name": "mu_activity_box_end",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 531,
            "doc": {
                "summary": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    }
                ]
            }
        },
        {
            "name": "dashboard_recent_drafts_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 635,
            "doc": {
                "summary": "Filters the post query arguments for the 'Recent Drafts' dashboard widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The query arguments for the 'Recent Drafts' dashboard widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_args"
                    }
                ]
            }
        },
        {
            "name": "comment_row_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 808,
            "doc": {
                "summary": "Filters the action links displayed for each comment in the 'Recent Comments' dashboard widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of comment actions. Default actions include: 'Approve', 'Unapprove', 'Edit', 'Reply', 'Spam', 'Delete', and 'Trash'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "dashboard_recent_posts_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 996,
            "doc": {
                "summary": "Filters the query arguments used for the Recent Posts widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The arguments passed to WP_Query to produce the list of posts.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_args"
                    }
                ]
            }
        },
        {
            "name": "dashboard_primary_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 1521,
            "doc": {
                "summary": "Filters the primary link URL for the 'WordPress Events and News' dashboard widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget's primary link URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "dashboard_primary_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 1530,
            "doc": {
                "summary": "Filters the primary feed URL for the 'WordPress Events and News' dashboard widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget's primary feed URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "dashboard_primary_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 1539,
            "doc": {
                "summary": "Filters the primary link title for the 'WordPress Events and News' dashboard widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Title attribute for the widget's primary link.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "dashboard_secondary_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 1554,
            "doc": {
                "summary": "Filters the secondary link URL for the 'WordPress Events and News' dashboard widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget's secondary link URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "dashboard_secondary_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 1563,
            "doc": {
                "summary": "Filters the secondary feed URL for the 'WordPress Events and News' dashboard widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget's secondary feed URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "dashboard_secondary_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 1572,
            "doc": {
                "summary": "Filters the secondary link title for the 'WordPress Events and News' dashboard widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Title attribute for the widget's secondary link.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "dashboard_secondary_items",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 1581,
            "doc": {
                "summary": "Filters the number of secondary link items for the 'WordPress Events and News' dashboard widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "How many items to show in the secondary feed.",
                        "types": [
                            "string"
                        ],
                        "variable": "items"
                    }
                ]
            }
        },
        {
            "name": "browse-happy-notice",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/dashboard.php",
            "line": 1755,
            "doc": {
                "summary": "Filters the notice output for the 'Browse Happy' nag meta box.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The notice content.",
                        "types": [
                            "string"
                        ],
                        "variable": "notice"
                    },
                    {
                        "name": "param",
                        "content": "An array containing web browser information, or false on failure. See wp_check_browser_version().",
                        "types": [
                            "array",
                            "false"
                        ],
                        "variable": "response"
                    }
                ]
            }
        },
        {
            "name": "term_updated_messages",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/edit-tag-messages.php",
            "line": 49,
            "doc": {
                "summary": "Filters the messages displayed when a tag is updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of arrays of messages to be displayed, keyed by taxonomy name.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "messages"
                    }
                ]
            }
        },
        {
            "name": "export_wp",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/export.php",
            "line": 77,
            "doc": {
                "summary": "Fires at the beginning of an export, before any headers are sent.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of export arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "export_wp_filename",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/export.php",
            "line": 94,
            "doc": {
                "summary": "Filters the export filename.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the file for download.",
                        "types": [
                            "string"
                        ],
                        "variable": "wp_filename"
                    },
                    {
                        "name": "param",
                        "content": "The site name.",
                        "types": [
                            "string"
                        ],
                        "variable": "sitename"
                    },
                    {
                        "name": "param",
                        "content": "Today's date, formatted.",
                        "types": [
                            "string"
                        ],
                        "variable": "date"
                    }
                ]
            }
        },
        {
            "name": "wxr_export_skip_termmeta",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/export.php",
            "line": 343,
            "doc": {
                "summary": "Filters whether to selectively skip term meta used for WXR exports.",
                "description": "<p>Returning a truthy value from the filter will skip the current meta object from being exported.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to skip the current piece of term meta. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "skip"
                    },
                    {
                        "name": "param",
                        "content": "Current meta key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Current meta object.",
                        "types": [
                            "object"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "the_title_export",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/export.php",
            "line": 559,
            "doc": {
                "summary": "Filters the post title used for WXR exports.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Title of the current post.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_title"
                    }
                ]
            }
        },
        {
            "name": "the_content_export",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/export.php",
            "line": 568,
            "doc": {
                "summary": "Filters the post content used for WXR exports.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Content of the current post.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_content"
                    }
                ]
            }
        },
        {
            "name": "the_excerpt_export",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/export.php",
            "line": 577,
            "doc": {
                "summary": "Filters the post excerpt used for WXR exports.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Excerpt for the current post.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_excerpt"
                    }
                ]
            }
        },
        {
            "name": "wxr_export_skip_postmeta",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/export.php",
            "line": 623,
            "doc": {
                "summary": "Filters whether to selectively skip post meta used for WXR exports.",
                "description": "<p>Returning a truthy value from the filter will skip the current meta object from being exported.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to skip the current post meta. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "skip"
                    },
                    {
                        "name": "param",
                        "content": "Current meta key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Current meta object.",
                        "types": [
                            "object"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wxr_export_skip_commentmeta",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/export.php",
            "line": 666,
            "doc": {
                "summary": "Filters whether to selectively skip comment meta used for WXR exports.",
                "description": "<p>Returning a truthy value from the filter will skip the current meta object from being exported.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to skip the current comment meta. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "skip"
                    },
                    {
                        "name": "param",
                        "content": "Current meta key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Current meta object.",
                        "types": [
                            "object"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "editable_extensions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 235,
            "doc": {
                "summary": "Filters the list of file types allowed for editing in the plugin file editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$plugin<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of editable plugin file extensions.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "default_types"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin"
                    }
                ]
            }
        },
        {
            "name": "wp_theme_editor_filetypes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 293,
            "doc": {
                "summary": "Filters the list of file types allowed for editing in the theme file editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of editable theme file extensions.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "default_types"
                    },
                    {
                        "name": "param",
                        "content": "The active theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    }
                ]
            }
        },
        {
            "name": "{$action}_prefilter",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 810,
            "doc": {
                "summary": "Filters the data for a file before it is uploaded to WordPress.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the post action.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>wp_handle_sideload_prefilter<\/code><\/li> <li><code>wp_handle_upload_prefilter<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "as 'wp_handle_upload_prefilter'."
                    },
                    {
                        "name": "since",
                        "content": "4.0.0",
                        "description": "Converted to a dynamic hook with <code>$action<\/code>."
                    },
                    {
                        "name": "param",
                        "content": "{     Reference to a single element from <code>$_FILES<\/code>.<br>    @type string $name     The original name of the file on the client machine.<br>    @type string $type     The mime type of the file, if the browser provided this information.<br>    @type string $tmp_name The temporary filename of the file in which the uploaded file was stored on the server.<br>    @type int    $size     The size, in bytes, of the uploaded file.<br>    @type int    $error    The error code associated with this file upload.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "{$action}_overrides",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 836,
            "doc": {
                "summary": "Filters the override parameters for a file before it is uploaded to WordPress.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the post action.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>wp_handle_sideload_overrides<\/code><\/li> <li><code>wp_handle_upload_overrides<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of override parameters for this file. Boolean false if none are provided. @see _wp_handle_upload().",
                        "types": [
                            "array",
                            "false"
                        ],
                        "variable": "overrides"
                    },
                    {
                        "name": "param",
                        "content": "{     Reference to a single element from <code>$_FILES<\/code>.<br>    @type string $name     The original name of the file on the client machine.<br>    @type string $type     The mime type of the file, if the browser provided this information.<br>    @type string $tmp_name The temporary filename of the file in which the uploaded file was stored on the server.<br>    @type int    $size     The size, in bytes, of the uploaded file.<br>    @type int    $error    The error code associated with this file upload.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "pre_move_uploaded_file",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 987,
            "doc": {
                "summary": "Filters whether to short-circuit moving the uploaded file after passing all checks.",
                "description": "<p>If a non-null value is returned from the filter, moving the file and any related error reporting will be completely skipped.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "If null (default) move the file after the upload.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "move_new_file"
                    },
                    {
                        "name": "param",
                        "content": "{     Reference to a single element from <code>$_FILES<\/code>.<br>    @type string $name     The original name of the file on the client machine.<br>    @type string $type     The mime type of the file, if the browser provided this information.<br>    @type string $tmp_name The temporary filename of the file in which the uploaded file was stored on the server.<br>    @type int    $size     The size, in bytes, of the uploaded file.<br>    @type int    $error    The error code associated with this file upload.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "Filename of the newly-uploaded file.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_file"
                    },
                    {
                        "name": "param",
                        "content": "Mime type of the newly-uploaded file.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "wp_handle_upload",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 1043,
            "endLine": 1051,
            "doc": {
                "summary": "Filters the data array for the uploaded file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of upload data.<br>    @type string $file Filename of the newly-uploaded file.<br>    @type string $url  URL of the newly-uploaded file.<br>    @type string $type Mime type of the newly-uploaded file.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "upload"
                    },
                    {
                        "name": "param",
                        "content": "The type of upload action. Values include 'upload' or 'sideload'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "download_url_error_max_body_size",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 1183,
            "doc": {
                "summary": "Filters the maximum error response body size in `download_url()`.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\download_url()"
                    },
                    {
                        "name": "param",
                        "content": "The maximum error response body size. Default 1 KB.",
                        "types": [
                            "int"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "wp_signature_hosts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 1241,
            "doc": {
                "summary": "Filters the list of hosts which should have Signature Verification attempted on.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "List of hostnames.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "hostnames"
                    }
                ]
            }
        },
        {
            "name": "wp_signature_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 1268,
            "doc": {
                "summary": "Filters the URL where the signature for a file is located.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The URL where signatures can be found for a file, or false if none are known.",
                        "types": [
                            "false",
                            "string"
                        ],
                        "variable": "signature_url"
                    },
                    {
                        "name": "param",
                        "content": "The URL being verified.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "wp_signature_softfail",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 1300,
            "doc": {
                "summary": "Filters whether Signature Verification failures should be allowed to soft fail.",
                "description": "<p>WARNING: This may be removed from a future release.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "If a softfail is allowed.",
                        "types": [
                            "bool"
                        ],
                        "variable": "signature_softfail"
                    },
                    {
                        "name": "param",
                        "content": "The url being accessed.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "wp_trusted_keys",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 1534,
            "doc": {
                "summary": "Filters the valid signing keys used to verify the contents of files.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The trusted keys that may sign packages.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "trusted_keys"
                    }
                ]
            }
        },
        {
            "name": "unzip_file_use_ziparchive",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 1596,
            "doc": {
                "summary": "Filters whether to use ZipArchive to unzip archives.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to use ZipArchive. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "ziparchive"
                    }
                ]
            }
        },
        {
            "name": "filesystem_method_file",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 2074,
            "doc": {
                "summary": "Filters the path for a specific filesystem method class file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_filesystem_method()"
                    },
                    {
                        "name": "param",
                        "content": "Path to the specific filesystem method class file.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The filesystem method to use.",
                        "types": [
                            "string"
                        ],
                        "variable": "method"
                    }
                ]
            }
        },
        {
            "name": "filesystem_method",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 2213,
            "doc": {
                "summary": "Filters the filesystem method to use.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Filesystem method to return.",
                        "types": [
                            "string"
                        ],
                        "variable": "method"
                    },
                    {
                        "name": "param",
                        "content": "An array of connection details for the method.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the directory that is tested for being writable.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow Group\/World writable.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow_relaxed_file_ownership"
                    }
                ]
            }
        },
        {
            "name": "request_filesystem_credentials",
            "type": "filter",
            "numArgs": 7,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 2271,
            "doc": {
                "summary": "Filters the filesystem credentials.",
                "description": "<p>Returning anything other than an empty string will effectively short-circuit output of the filesystem credentials form, returning that value instead.<\/p> <p>A filter should return true if no filesystem credentials are required, false if they are required but have not been provided, or an array of credentials if they are required and have been provided.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "The <code>$context<\/code> parameter default changed from <code>false<\/code> to an empty string."
                    },
                    {
                        "name": "param",
                        "content": "Credentials to return instead. Default empty string.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "credentials"
                    },
                    {
                        "name": "param",
                        "content": "The URL to post the form to.",
                        "types": [
                            "string"
                        ],
                        "variable": "form_post"
                    },
                    {
                        "name": "param",
                        "content": "Chosen type of filesystem.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "Whether the current request has failed to connect, or an error object.",
                        "types": [
                            "bool",
                            "\\WP_Error"
                        ],
                        "variable": "error"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the directory that is tested for being writable.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Extra POST fields.",
                        "types": [
                            "array"
                        ],
                        "variable": "extra_fields"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow Group\/World writable.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow_relaxed_file_ownership"
                    }
                ]
            }
        },
        {
            "name": "fs_ftp_connection_types",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 2417,
            "doc": {
                "summary": "Filters the connection types to output to the filesystem credentials form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "The <code>$context<\/code> parameter default changed from <code>false<\/code> to an empty string."
                    },
                    {
                        "name": "param",
                        "content": "Types of connections.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "types"
                    },
                    {
                        "name": "param",
                        "content": "Credentials to connect with.",
                        "types": [
                            "array"
                        ],
                        "variable": "credentials"
                    },
                    {
                        "name": "param",
                        "content": "Chosen filesystem method.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "Whether the current request has failed to connect, or an error object.",
                        "types": [
                            "bool",
                            "\\WP_Error"
                        ],
                        "variable": "error"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the directory that is tested for being writable.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "wp_opcache_invalidate_file",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/file.php",
            "line": 2634,
            "doc": {
                "summary": "Filters whether to invalidate a file from the opcode cache.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether WordPress will invalidate <code>$filepath<\/code>. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "will_invalidate"
                    },
                    {
                        "name": "param",
                        "content": "The path to the PHP file to invalidate.",
                        "types": [
                            "string"
                        ],
                        "variable": "filepath"
                    }
                ]
            }
        },
        {
            "name": "edit_custom_thumbnail_sizes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/image-edit.php",
            "line": 54,
            "doc": {
                "summary": "Filters whether custom sizes are available options for image editing.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "True if custom sizes can be edited or array of custom size names.",
                        "types": [
                            "bool",
                            "string[]"
                        ],
                        "variable": "edit_custom_sizes"
                    }
                ]
            }
        },
        {
            "name": "image_editor_save_pre",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/image-edit.php",
            "line": 351,
            "doc": {
                "summary": "Filters the WP_Image_Editor instance for the image to be streamed to the browser.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The image editor instance.",
                        "types": [
                            "\\WP_Image_Editor"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "The attachment post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "image_save_pre",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image-edit.php",
            "line": 371,
            "doc": {
                "summary": "Filters the GD image resource to be streamed to the browser.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.5.0",
                        "description": "Use {@see 'image_editor_save_pre'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Image resource to be streamed.",
                        "types": [
                            "resource",
                            "\\GdImage"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "The attachment post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_save_image_editor_file",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-admin\/includes\/image-edit.php",
            "line": 440,
            "doc": {
                "summary": "Filters whether to skip saving the image file.",
                "description": "<p>Returning a non-null value will short-circuit the save method, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Value to return instead of saving. Default null.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "override"
                    },
                    {
                        "name": "param",
                        "content": "Name of the file to be saved.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename"
                    },
                    {
                        "name": "param",
                        "content": "The image editor instance.",
                        "types": [
                            "\\WP_Image_Editor"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "The mime type of the image.",
                        "types": [
                            "string"
                        ],
                        "variable": "mime_type"
                    },
                    {
                        "name": "param",
                        "content": "Attachment post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "wp_save_image_file",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image-edit.php",
            "line": 469,
            "endLine": 474,
            "doc": {
                "summary": "Filters whether to skip saving the image file.",
                "description": "<p>Returning a non-null value will short-circuit the save method, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.5.0",
                        "description": "Use {@see 'wp_save_image_editor_file'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Value to return instead of saving. Default null.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "override"
                    },
                    {
                        "name": "param",
                        "content": "Name of the file to be saved.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename"
                    },
                    {
                        "name": "param",
                        "content": "Image resource or GdImage instance.",
                        "types": [
                            "resource",
                            "\\GdImage"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "The mime type of the image.",
                        "types": [
                            "string"
                        ],
                        "variable": "mime_type"
                    },
                    {
                        "name": "param",
                        "content": "Attachment post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "wp_image_editor_before_change",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/image-edit.php",
            "line": 675,
            "doc": {
                "summary": "Filters the WP_Image_Editor instance before applying changes to the image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Image_Editor instance.",
                        "types": [
                            "\\WP_Image_Editor"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "Array of change operations.",
                        "types": [
                            "array"
                        ],
                        "variable": "changes"
                    }
                ]
            }
        },
        {
            "name": "image_edit_before_change",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image-edit.php",
            "line": 687,
            "doc": {
                "summary": "Filters the GD image resource before applying changes to the image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.5.0",
                        "description": "Use {@see 'wp_image_editor_before_change'} instead."
                    },
                    {
                        "name": "param",
                        "content": "GD image resource or GdImage instance.",
                        "types": [
                            "resource",
                            "\\GdImage"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "Array of change operations.",
                        "types": [
                            "array"
                        ],
                        "variable": "changes"
                    }
                ]
            }
        },
        {
            "name": "wp_get_missing_image_subsizes",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 144,
            "doc": {
                "summary": "Filters the array of missing image sub-sizes for an uploaded image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of arrays of image sub-size information for missing image sizes, keyed by image size name.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "missing_sizes"
                    },
                    {
                        "name": "param",
                        "content": "The image meta data.",
                        "types": [
                            "array"
                        ],
                        "variable": "image_meta"
                    },
                    {
                        "name": "param",
                        "content": "The image attachment post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "big_image_size_threshold",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 284,
            "doc": {
                "summary": "Filters the \"BIG image\" threshold value.",
                "description": "<p>If the original image width or height is above the threshold, it will be scaled down. The threshold is used as max width and max height. The scaled down image will be used as the largest available size, including the <code>_wp_attached_file<\/code> post meta value.<\/p> <p>Returning <code>false<\/code> from the filter callback will disable the scaling.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The threshold value in pixels. Default 2560.",
                        "types": [
                            "int"
                        ],
                        "variable": "threshold"
                    },
                    {
                        "name": "param",
                        "content": "{     Indexed array of the image width and height in pixels.<br>    @type int $0 The image width.<br>    @type int $1 The image height.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "imagesize"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the uploaded image file.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "Attachment post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "intermediate_image_sizes_advanced",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 375,
            "doc": {
                "summary": "Filters the image sizes automatically generated when uploading an image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$image_meta<\/code> argument."
                    },
                    {
                        "name": "since",
                        "content": "5.3.0",
                        "description": "Added the <code>$attachment_id<\/code> argument."
                    },
                    {
                        "name": "param",
                        "content": "Associative array of image sizes to be created.",
                        "types": [
                            "array"
                        ],
                        "variable": "new_sizes"
                    },
                    {
                        "name": "param",
                        "content": "The image meta data: width, height, file, sizes, etc.",
                        "types": [
                            "array"
                        ],
                        "variable": "image_meta"
                    },
                    {
                        "name": "param",
                        "content": "The attachment post ID for the image.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "attachment_thumbnail_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 568,
            "doc": {
                "summary": "Filters the parameters for the attachment thumbnail creation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of parameters to create the thumbnail.",
                        "types": [
                            "array"
                        ],
                        "variable": "image_attachment"
                    },
                    {
                        "name": "param",
                        "content": "Current attachment metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    },
                    {
                        "name": "param",
                        "content": "{     Information about the newly-uploaded file.<br>    @type string $file  Filename of the newly-uploaded file.<br>    @type string $url   URL of the uploaded file.<br>    @type string $type  File type.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "uploaded"
                    }
                ]
            }
        },
        {
            "name": "fallback_intermediate_image_sizes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 594,
            "doc": {
                "summary": "Filters the image sizes generated for non-image mime types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of image size names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "fallback_sizes"
                    },
                    {
                        "name": "param",
                        "content": "Current attachment metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    }
                ]
            }
        },
        {
            "name": "wp_generate_attachment_metadata",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 658,
            "doc": {
                "summary": "Filters the generated attachment meta data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.3.0",
                        "description": "The <code>$context<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "An array of attachment meta data.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    },
                    {
                        "name": "param",
                        "content": "Current attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Additional context. Can be 'create' when metadata was initially created for new attachment or 'update' when the metadata was updated.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "wp_read_image_metadata_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 841,
            "doc": {
                "summary": "Filters the image types to check for exif data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of image types to check for exif data. Each value is usually one of the <code>IMAGETYPE_*<\/code> constants.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "image_types"
                    }
                ]
            }
        },
        {
            "name": "wp_read_image_metadata",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 947,
            "doc": {
                "summary": "Filters the array of meta data read from an image's exif data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$iptc<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "5.0.0",
                        "description": "The <code>$exif<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Image meta data.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    },
                    {
                        "name": "param",
                        "content": "Path to image file.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "Type of image, one of the <code>IMAGETYPE_XXX<\/code> constants.",
                        "types": [
                            "int"
                        ],
                        "variable": "image_type"
                    },
                    {
                        "name": "param",
                        "content": "IPTC data.",
                        "types": [
                            "array"
                        ],
                        "variable": "iptc"
                    },
                    {
                        "name": "param",
                        "content": "EXIF data.",
                        "types": [
                            "array"
                        ],
                        "variable": "exif"
                    }
                ]
            }
        },
        {
            "name": "file_is_displayable_image",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 992,
            "doc": {
                "summary": "Filters whether the current image is displayable in the browser.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the image can be displayed. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Path to the image.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "load_image_to_edit",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 1045,
            "doc": {
                "summary": "Filters the current image being loaded for editing.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Current image.",
                        "types": [
                            "resource",
                            "\\GdImage"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "load_image_to_edit_filesystempath",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 1092,
            "doc": {
                "summary": "Filters the path to an attachment's file when editing the image.",
                "description": "<p>The filter is evaluated for all image sizes except 'full'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the current image.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "load_image_to_edit_attachmenturl",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 1108,
            "doc": {
                "summary": "Filters the path to an attachment's URL when editing the image.",
                "description": "<p>The filter is only evaluated if the file isn't stored locally and <code>allow_url_fopen<\/code> is enabled on the server.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current image URL.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "image_url"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "load_image_to_edit_path",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/image.php",
            "line": 1121,
            "doc": {
                "summary": "Filters the returned path or URL of the current image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "File path or URL to current image, or false.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "filepath"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "wp_list_table_class_name",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/list-table.php",
            "line": 68,
            "doc": {
                "summary": "Filters the list table class to instantiate.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The list table class to use.",
                        "types": [
                            "string"
                        ],
                        "variable": "class_name"
                    },
                    {
                        "name": "param",
                        "content": "An array containing _get_list_table() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "media_upload_tabs",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 31,
            "doc": {
                "summary": "Filters the available tabs in the legacy (pre-3.5.0) media popup.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of media tabs.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "_default_tabs"
                    }
                ]
            }
        },
        {
            "name": "image_send_to_editor",
            "type": "filter",
            "numArgs": 9,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 168,
            "doc": {
                "summary": "Filters the image HTML markup to send to the editor when inserting an image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The <code>$rel<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The image HTML markup to send.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "The attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "The image caption.",
                        "types": [
                            "string"
                        ],
                        "variable": "caption"
                    },
                    {
                        "name": "param",
                        "content": "The image title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "The image alignment.",
                        "types": [
                            "string"
                        ],
                        "variable": "align"
                    },
                    {
                        "name": "param",
                        "content": "The image source URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "The image alternative, or alt, text.",
                        "types": [
                            "string"
                        ],
                        "variable": "alt"
                    },
                    {
                        "name": "param",
                        "content": "The image rel attribute.",
                        "types": [
                            "string"
                        ],
                        "variable": "rel"
                    }
                ]
            }
        },
        {
            "name": "image_add_caption_text",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 204,
            "doc": {
                "summary": "Filters the caption text.",
                "description": "<p>Note: If the caption text is empty, the caption shortcode will not be appended to the image HTML when inserted into the editor.<\/p> <p>Passing an empty value also prevents the {@see 'image_add_caption_shortcode'} Filters from being evaluated at the end of image_add_caption().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The original caption text.",
                        "types": [
                            "string"
                        ],
                        "variable": "caption"
                    },
                    {
                        "name": "param",
                        "content": "The attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "disable_captions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 216,
            "doc": {
                "summary": "Filters whether to disable captions.",
                "description": "<p>Prevents image captions from being appended to image HTML when inserted into the editor.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to disable appending captions. Returning true from the filter will disable captions. Default empty string.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bool"
                    }
                ]
            }
        },
        {
            "name": "image_add_caption_shortcode",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 249,
            "doc": {
                "summary": "Filters the image HTML markup including the caption shortcode.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The image HTML markup with caption shortcode.",
                        "types": [
                            "string"
                        ],
                        "variable": "shcode"
                    },
                    {
                        "name": "param",
                        "content": "The image HTML markup.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    }
                ]
            }
        },
        {
            "name": "admin_print_styles-media-upload-popup",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 558,
            "doc": {
                "summary": "Fires when admin styles enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ]
            }
        },
        {
            "name": "admin_print_scripts-media-upload-popup",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 568,
            "doc": {
                "summary": "Fires when admin scripts enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ]
            }
        },
        {
            "name": "admin_head-media-upload-popup",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 579,
            "doc": {
                "summary": "Fires when scripts enqueued for the admin header for the legacy (pre-3.5.0) media upload popup are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ]
            }
        },
        {
            "name": "admin_head_{$content_func}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 594,
            "doc": {
                "summary": "Fires in the admin header for each specific form tab in the legacy (pre-3.5.0) media upload popup.",
                "description": "<p>The dynamic portion of the hook name, <code>$content_func<\/code>, refers to the form callback for the media upload type.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "media_buttons_context",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 665,
            "doc": {
                "summary": "Filters the legacy (pre-3.5.0) media buttons.",
                "description": "<p>Use {@see 'media_buttons'} action instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.5.0",
                        "description": "Use {@see 'media_buttons'} action instead."
                    },
                    {
                        "name": "param",
                        "content": "Media buttons context. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "string"
                    }
                ]
            }
        },
        {
            "name": "{$type}_upload_iframe_src",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 720,
            "doc": {
                "summary": "Filters the upload iframe source URL for a specific media type.",
                "description": "<p>The dynamic portion of the hook name, <code>$type<\/code>, refers to the type of media uploaded.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>image_upload_iframe_src<\/code><\/li> <li><code>media_upload_iframe_src<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The upload iframe source URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "upload_iframe_src"
                    }
                ]
            }
        },
        {
            "name": "attachment_fields_to_save",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 783,
            "doc": {
                "summary": "Filters the attachment fields to be saved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_get_attachment_metadata()"
                    },
                    {
                        "name": "param",
                        "content": "An array of post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "An array of attachment metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "attachment"
                    }
                ]
            }
        },
        {
            "name": "media_send_to_editor",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 849,
            "doc": {
                "summary": "Filters the HTML markup for a media item sent to the editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_get_attachment_metadata()"
                    },
                    {
                        "name": "param",
                        "content": "HTML markup for a media item sent to the editor.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "The first key from the $_POST['send'] data.",
                        "types": [
                            "int"
                        ],
                        "variable": "send_id"
                    },
                    {
                        "name": "param",
                        "content": "Array of attachment metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "attachment"
                    }
                ]
            }
        },
        {
            "name": "{$type}_send_to_editor_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 925,
            "doc": {
                "summary": "Filters the URL sent to the editor for a specific media type.",
                "description": "<p>The dynamic portion of the hook name, <code>$type<\/code>, refers to the type of media being sent.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>audio_send_to_editor_url<\/code><\/li> <li><code>file_send_to_editor_url<\/code><\/li> <li><code>video_send_to_editor_url<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML markup sent to the editor.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Media source URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "src"
                    },
                    {
                        "name": "param",
                        "content": "Media title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "image_send_to_editor_url",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 950,
            "doc": {
                "summary": "Filters the image URL sent to the editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML markup sent to the editor for an image.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Image source URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "src"
                    },
                    {
                        "name": "param",
                        "content": "Image alternate, or alt, text.",
                        "types": [
                            "string"
                        ],
                        "variable": "alt"
                    },
                    {
                        "name": "param",
                        "content": "The image alignment. Default 'alignnone'. Possible values include 'alignleft', 'aligncenter', 'alignright', 'alignnone'.",
                        "types": [
                            "string"
                        ],
                        "variable": "align"
                    }
                ]
            }
        },
        {
            "name": "image_sideload_extensions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 1029,
            "doc": {
                "summary": "Filters the list of allowed file extensions when sideloading an image from a URL.",
                "description": "<p>The default allowed extensions are:<\/p> <ul> <li><code>jpg<\/code><\/li> <li><code>jpeg<\/code><\/li> <li><code>jpe<\/code><\/li> <li><code>png<\/code><\/li> <li><code>gif<\/code><\/li> <li><code>webp<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "Added 'webp' to the default list of allowed file extensions."
                    },
                    {
                        "name": "param",
                        "content": "Array of allowed file extensions.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_extensions"
                    },
                    {
                        "name": "param",
                        "content": "The URL of the image to download.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "image_size_names_choose",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 1191,
            "endLine": 1199,
            "doc": {
                "summary": "Filters the names and labels of the default image sizes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of image size labels keyed by their name. Default values include 'Thumbnail', 'Medium', 'Large', and 'Full Size'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "size_names"
                    }
                ]
            }
        },
        {
            "name": "attachment_fields_to_edit",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 1500,
            "doc": {
                "summary": "Filters the attachment fields to edit.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of attachment form fields.",
                        "types": [
                            "array"
                        ],
                        "variable": "form_fields"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Post attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_media_item_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 1609,
            "doc": {
                "summary": "Filters the arguments used to retrieve an image for the edit image form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_media_item"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "media_meta",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 1669,
            "doc": {
                "summary": "Filters the media metadata.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML markup containing the media dimensions.",
                        "types": [
                            "string"
                        ],
                        "variable": "media_dims"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Post attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "upload_ui_over_quota",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2133,
            "doc": {
                "summary": "Fires when an upload will exceed the defined upload space quota for a network site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ]
            }
        },
        {
            "name": "pre-upload-ui",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2142,
            "doc": {
                "summary": "Fires just before the legacy (pre-3.5.0) upload interface is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "upload_post_params",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2160,
            "doc": {
                "summary": "Filters the media upload post parameters.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0",
                        "description": "As 'swfupload_post_params'"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of media upload parameters used by Plupload.",
                        "types": [
                            "array"
                        ],
                        "variable": "post_params"
                    }
                ]
            }
        },
        {
            "name": "plupload_init",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2201,
            "doc": {
                "summary": "Filters the default Plupload settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of default settings used by Plupload.",
                        "types": [
                            "array"
                        ],
                        "variable": "plupload_init"
                    }
                ]
            }
        },
        {
            "name": "pre-plupload-upload-ui",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2232,
            "doc": {
                "summary": "Fires before the upload interface loads.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0",
                        "description": "As 'pre-flash-upload-ui'"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0"
                    }
                ]
            }
        },
        {
            "name": "post-plupload-upload-ui",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2249,
            "doc": {
                "summary": "Fires after the upload interface loads.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0",
                        "description": "As 'post-flash-upload-ui'"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0"
                    }
                ]
            }
        },
        {
            "name": "pre-html-upload-ui",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2260,
            "doc": {
                "summary": "Fires before the upload button in the media upload interface.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "post-html-upload-ui",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2281,
            "doc": {
                "summary": "Fires after the upload button in the media upload interface.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "post-upload-ui",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2301,
            "doc": {
                "summary": "Fires on the post upload UI screen.",
                "description": "<p>Legacy (pre-3.5.0) media workflow hook.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "media_upload_form_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2329,
            "doc": {
                "summary": "Filters the media upload form action URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The media upload form action URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "form_action_url"
                    },
                    {
                        "name": "param",
                        "content": "The type of media. Default 'file'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "type_url_form_media",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2516,
            "doc": {
                "summary": "Filters the insert media from URL form HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The insert from URL form HTML.",
                        "types": [
                            "string"
                        ],
                        "variable": "form_html"
                    }
                ]
            }
        },
        {
            "name": "media_upload_mime_type_links",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 2809,
            "doc": {
                "summary": "Filters the media upload mime type list items.",
                "description": "<p>Returned values should begin with an <code>&lt;li&gt;<\/code> tag.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of list items containing mime type link HTML.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "type_links"
                    }
                ]
            }
        },
        {
            "name": "wp_edit_form_attachment_display",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 3213,
            "doc": {
                "summary": "Fires when an attachment type can't be rendered in the edit form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "A post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "media_submitbox_misc_sections",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 3412,
            "doc": {
                "summary": "Filters the audio and video metadata fields to be shown in the publish meta box.",
                "description": "<p>The key for each item in the array should correspond to an attachment metadata key, and the value should be the desired label.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of the attachment metadata keys and labels.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current attachment.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "audio_submitbox_misc_sections",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 3460,
            "doc": {
                "summary": "Filters the audio attachment metadata fields to be shown in the publish meta box.",
                "description": "<p>The key for each item in the array should correspond to an attachment metadata key, and the value should be the desired label.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of the attachment metadata keys and labels.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current attachment.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_read_video_metadata",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 3652,
            "doc": {
                "summary": "Filters the array of metadata retrieved from a video.",
                "description": "<p>In core, usually this selection is what is stored.<br>More complete data can be parsed from the <code>$data<\/code> parameter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Filtered video metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    },
                    {
                        "name": "param",
                        "content": "Path to video file.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "File format of video, as analyzed by getID3.<br>Null if unknown.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "file_format"
                    },
                    {
                        "name": "param",
                        "content": "Raw metadata from getID3.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    }
                ]
            }
        },
        {
            "name": "wp_read_audio_metadata",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 3735,
            "doc": {
                "summary": "Filters the array of metadata retrieved from an audio file.",
                "description": "<p>In core, usually this selection is what is stored.<br>More complete data can be parsed from the <code>$data<\/code> parameter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Filtered audio metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    },
                    {
                        "name": "param",
                        "content": "Path to audio file.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "File format of audio, as analyzed by getID3.<br>Null if unknown.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "file_format"
                    },
                    {
                        "name": "param",
                        "content": "Raw metadata from getID3.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    }
                ]
            }
        },
        {
            "name": "wp_media_attach_action",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/media.php",
            "line": 3841,
            "doc": {
                "summary": "Fires when media is attached or detached from a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Attach\/detach action. Accepts 'attach' or 'detach'.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    },
                    {
                        "name": "param",
                        "content": "The attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Attachment parent ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "parent_id"
                    }
                ]
            }
        },
        {
            "name": "_network_admin_menu",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 19,
            "doc": {
                "summary": "Fires before the administration menu loads in the Network Admin.",
                "description": "<p>The hook fires before menus and sub-menus are removed based on user privileges.<\/p>",
                "tags": [
                    {
                        "name": "private",
                        "content": ""
                    },
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "_user_admin_menu",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 30,
            "doc": {
                "summary": "Fires before the administration menu loads in the User Admin.",
                "description": "<p>The hook fires before menus and sub-menus are removed based on user privileges.<\/p>",
                "tags": [
                    {
                        "name": "private",
                        "content": ""
                    },
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "_admin_menu",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 41,
            "doc": {
                "summary": "Fires before the administration menu loads in the admin.",
                "description": "<p>The hook fires before menus and sub-menus are removed based on user privileges.<\/p>",
                "tags": [
                    {
                        "name": "private",
                        "content": ""
                    },
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ]
            }
        },
        {
            "name": "network_admin_menu",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 135,
            "doc": {
                "summary": "Fires before the administration menu loads in the Network Admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Empty context.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "user_admin_menu",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 145,
            "doc": {
                "summary": "Fires before the administration menu loads in the User Admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Empty context.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "admin_menu",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 155,
            "doc": {
                "summary": "Fires before the administration menu loads in the admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Empty context.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "add_menu_classes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 259,
            "doc": {
                "summary": "Filters administration menu array with classes added for top-level items.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of administration menu items.",
                        "types": [
                            "array"
                        ],
                        "variable": "menu"
                    }
                ]
            }
        },
        {
            "name": "custom_menu_order",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 273,
            "doc": {
                "summary": "Filters whether to enable custom ordering of the administration menu.",
                "description": "<p>See the {@see 'menu_order'} filter for reordering menu items.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether custom ordering is enabled. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "custom"
                    }
                ]
            }
        },
        {
            "name": "menu_order",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 293,
            "doc": {
                "summary": "Filters the order of administration menu items.",
                "description": "<p>A truthy value must first be passed to the {@see 'custom_menu_order'} filter for this filter to work. Use the following to enable custom menu ordering:<\/p> <pre><code>add_filter( 'custom_menu_order', '__return_true' );<\/code><\/pre>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An ordered array of menu items.",
                        "types": [
                            "array"
                        ],
                        "variable": "menu_order"
                    }
                ]
            }
        },
        {
            "name": "admin_page_access_denied",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/menu.php",
            "line": 362,
            "doc": {
                "summary": "Fires when access to an admin page is denied.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "post_submitbox_minor_actions",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 97,
            "doc": {
                "summary": "Fires after the Save Draft (or Save as Pending) and Preview (or Preview Changes) buttons in the Publish meta box.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_submitbox_misc_actions",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 343,
            "doc": {
                "summary": "Fires after the post time\/date setting in the Publish meta box.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_submitbox_start",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 360,
            "doc": {
                "summary": "Fires at the beginning of the publishing actions section of the Publish meta box.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current post on Edit Post screen, null on Edit Link screen.",
                        "types": [
                            "\\WP_Post",
                            "null"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "attachment_submitbox_misc_actions",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 461,
            "doc": {
                "summary": "Fires after the 'Uploaded on' section of the Save meta box in the attachment editing screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current attachment.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_edit_category_parent_dropdown_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 715,
            "doc": {
                "summary": "Filters the arguments for the taxonomy parent dropdown on the Post Edit page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Optional. Array of arguments to generate parent dropdown.<br>    @type string   $taxonomy         Name of the taxonomy to retrieve.<br>    @type bool     $hide_if_empty    True to skip generating markup if no                                      categories are found. Default 0.<br>    @type string   $name             Value for the 'name' attribute                                      of the select element.<br>                                     Default &quot;new{$tax_name}_parent&quot;.<br>    @type string   $orderby          Which column to use for ordering                                      terms. Default 'name'.<br>    @type bool|int $hierarchical     Whether to traverse the taxonomy                                      hierarchy. Default 1.<br>    @type string   $show_option_none Text to display for the &quot;none&quot; option.<br>                                     Default &quot;&mdash; {$parent} &mdash;&quot;,                                      where <code>$parent<\/code> is 'parent_item'                                      taxonomy label.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "parent_dropdown_args"
                    }
                ]
            }
        },
        {
            "name": "post_comment_status_meta_box-options",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 860,
            "doc": {
                "summary": "Fires at the end of the Discussion meta box on the post editing screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "page_attributes_dropdown_pages_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 1016,
            "doc": {
                "summary": "Filters the arguments used to generate a Pages drop-down element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_dropdown_pages()"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments used to generate the pages drop-down.",
                        "types": [
                            "array"
                        ],
                        "variable": "dropdown_args"
                    },
                    {
                        "name": "param",
                        "content": "The current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "page_attributes_meta_box_template",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 1040,
            "doc": {
                "summary": "Fires immediately after the label inside the 'Template' section of the 'Page Attributes' meta box.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The template used for the current post.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "template"
                    },
                    {
                        "name": "param",
                        "content": "The current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "default_page_template_title",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 1054,
            "doc": {
                "summary": "Filters the title of the default page template displayed in the drop-down.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The display value for the default page template title.",
                        "types": [
                            "string"
                        ],
                        "variable": "label"
                    },
                    {
                        "name": "param",
                        "content": "Where the option label is displayed. Possible values include 'meta-box' or 'quick-edit'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "page_attributes_misc_attributes",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 1071,
            "doc": {
                "summary": "Fires before the help hint text in the 'Page Attributes' meta box.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "submitlink_box",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 1153,
            "doc": {
                "summary": "Fires at the end of the Publish box in the Link editing screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "dbx_post_advanced",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 1663,
            "doc": {
                "summary": "Fires in the middle of built-in meta box registration.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.7.0",
                        "description": "Use {@see 'add_meta_boxes'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "add_meta_boxes",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 1701,
            "doc": {
                "summary": "Fires after all built-in meta boxes have been added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "add_meta_boxes_{$post_type}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 1718,
            "doc": {
                "summary": "Fires after all built-in meta boxes have been added, contextually for the given post type.",
                "description": "<p>The dynamic portion of the hook name, <code>$post_type<\/code>, refers to the post type of the post.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>add_meta_boxes_post<\/code><\/li> <li><code>add_meta_boxes_page<\/code><\/li> <li><code>add_meta_boxes_attachment<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "do_meta_boxes",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/meta-boxes.php",
            "line": 1733,
            "doc": {
                "summary": "Fires after meta boxes have been added.",
                "description": "<p>Fires once for each of the default meta box contexts: normal, advanced, and side.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post type of the post on Edit Post screen, 'link' on Edit Link screen, 'dashboard' on Dashboard screen.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Meta box context. Possible values include 'normal', 'advanced', 'side'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Post object on Edit Post screen, link object on Edit Link screen, an empty string on Dashboard screen.",
                        "types": [
                            "\\WP_Post",
                            "object",
                            "string"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "got_rewrite",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 31,
            "doc": {
                "summary": "Filters whether Apache and mod_rewrite are present.",
                "description": "<p>This filter was previously used to force URL rewriting for other servers, like nginx. Use the {@see 'got_url_rewrite'} filter in got_url_rewrite() instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\got_url_rewrite()"
                    },
                    {
                        "name": "param",
                        "content": "Whether Apache and mod_rewrite are present.",
                        "types": [
                            "bool"
                        ],
                        "variable": "got_rewrite"
                    }
                ]
            }
        },
        {
            "name": "got_url_rewrite",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 55,
            "doc": {
                "summary": "Filters whether URL rewriting is available.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether URL rewriting is available.",
                        "types": [
                            "bool"
                        ],
                        "variable": "got_url_rewrite"
                    }
                ]
            }
        },
        {
            "name": "insert_with_markers_inline_instructions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 163,
            "doc": {
                "summary": "Filters the inline instructions inserted before the dynamically generated content.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of lines with inline instructions.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "instructions"
                    },
                    {
                        "name": "param",
                        "content": "The marker being inserted.",
                        "types": [
                            "string"
                        ],
                        "variable": "marker"
                    }
                ]
            }
        },
        {
            "name": "documentation_ignore_functions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 672,
            "doc": {
                "summary": "Filters the list of functions and classes to be ignored from the documentation lookup.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of names of functions and classes to be ignored.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "ignore_functions"
                    }
                ]
            }
        },
        {
            "name": "set-screen-option",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 773,
            "doc": {
                "summary": "Filters a screen option value before it is set.",
                "description": "<p>The filter can also be used to modify non-standard [items]_per_page settings. See the parent function for a full list of standard options.<\/p> <p>Returning false from the filter will skip saving the current option.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "5.4.2",
                        "description": "Only applied to options ending with '_page', or the 'layout_columns' option."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\set_screen_options()"
                    },
                    {
                        "name": "param",
                        "content": "The value to save instead of the option value.<br>Default false (to skip saving the current option).",
                        "types": [
                            "mixed"
                        ],
                        "variable": "screen_option"
                    },
                    {
                        "name": "param",
                        "content": "The option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "The option value.",
                        "types": [
                            "int"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "set_screen_option_{$option}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 792,
            "doc": {
                "summary": "Filters a screen option value before it is set.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p> <p>Returning false from the filter will skip saving the current option.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.2"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\set_screen_options()"
                    },
                    {
                        "name": "param",
                        "content": "The value to save instead of the option value.<br>Default false (to skip saving the current option).",
                        "types": [
                            "mixed"
                        ],
                        "variable": "screen_option"
                    },
                    {
                        "name": "param",
                        "content": "The option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "The option value.",
                        "types": [
                            "int"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "admin_viewport_meta",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 1104,
            "doc": {
                "summary": "Filters the viewport meta in the admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The viewport meta.",
                        "types": [
                            "string"
                        ],
                        "variable": "viewport_meta"
                    }
                ]
            }
        },
        {
            "name": "admin_referrer_policy",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 1429,
            "doc": {
                "summary": "Filters the admin referrer policy header value.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.5",
                        "description": "The default value was changed to 'strict-origin-when-cross-origin'."
                    },
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Headers\/Referrer-Policy"
                    },
                    {
                        "name": "param",
                        "content": "The admin referrer policy header value. Default 'strict-origin-when-cross-origin'.",
                        "types": [
                            "string"
                        ],
                        "variable": "policy"
                    }
                ]
            }
        },
        {
            "name": "new_admin_email_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 1519,
            "doc": {
                "summary": "Filters the text of the email sent when a change of site admin email address is attempted.",
                "description": "<p>The following strings have a special meaning and will get replaced dynamically:<\/p> <h3>USERNAME###  The current user's username.<\/h3> <h3>ADMIN_URL### The link to click on to confirm the email change.<\/h3> <h3>EMAIL###     The proposed new site admin email address.<\/h3> <h3>SITENAME###  The name of the site.<\/h3> <h3>SITEURL###   The URL to the site.<\/h3>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "This filter is no longer Multisite specific."
                    },
                    {
                        "name": "param",
                        "content": "Text in the email.",
                        "types": [
                            "string"
                        ],
                        "variable": "email_text"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the new site admin email address.<br>    @type string $hash     The secure hash used in the confirmation link URL.<br>    @type string $newemail The proposed new site admin email address.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "new_admin_email"
                    }
                ]
            }
        },
        {
            "name": "wp_is_php_version_acceptable",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/misc.php",
            "line": 1629,
            "doc": {
                "summary": "Filters whether the active PHP version is considered acceptable by WordPress.",
                "description": "<p>Returning false will trigger a PHP version warning to show up in the admin dashboard to administrators.<\/p> <p>This filter is only run if the wordpress.org Serve Happy API considers the PHP version acceptable, ensuring that this filter can only make this check stricter, but not loosen it.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.1"
                    },
                    {
                        "name": "param",
                        "content": "Whether the PHP version is considered acceptable. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_acceptable"
                    },
                    {
                        "name": "param",
                        "content": "PHP version checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "version"
                    }
                ]
            }
        },
        {
            "name": "wpmu_delete_user",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/ms.php",
            "line": 173,
            "doc": {
                "summary": "Fires before a user is deleted from the network.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$user<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the user about to be deleted from the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object of the user about to be deleted from the network.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "lang_codes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/ms.php",
            "line": 547,
            "doc": {
                "summary": "Filters the language codes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Array of key\/value pairs of language codes where key is the short version.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "lang_codes"
                    },
                    {
                        "name": "param",
                        "content": "A two-letter designation of the language.",
                        "types": [
                            "string"
                        ],
                        "variable": "code"
                    }
                ]
            }
        },
        {
            "name": "mu_dropdown_languages",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/ms.php",
            "line": 667,
            "doc": {
                "summary": "Filters the languages available in the dropdown.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Array of HTML output for the dropdown.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Array of available language files.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "lang_files"
                    },
                    {
                        "name": "param",
                        "content": "The current language code.",
                        "types": [
                            "string"
                        ],
                        "variable": "current"
                    }
                ]
            }
        },
        {
            "name": "can_edit_network",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/ms.php",
            "line": 826,
            "doc": {
                "summary": "Filters whether this network can be edited from this page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the network can be edited from this page.",
                        "types": [
                            "bool"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "The network ID to check.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "network_edit_site_nav_links",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/ms.php",
            "line": 1049,
            "endLine": 1073,
            "doc": {
                "summary": "Filters the links that appear on site-editing network pages.",
                "description": "<p>Default links: 'site-info', 'site-users', 'site-themes', and 'site-settings'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of link data representing individual network admin pages.<br>    @type array $link_slug {         An array of information about the individual link to a page.<br>        $type string $label Label to use for the link.<br>        $type string $url   URL, relative to <code>network_admin_url()<\/code> to use for the link.<br>        $type string $cap   Capability required to see the link.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "links"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_meta_box_object",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/nav-menu.php",
            "line": 229,
            "doc": {
                "summary": "Filters whether a menu items meta box will be added for the current object type.",
                "description": "<p>If a falsey value is returned instead of an object, the menu items meta box for the current meta box object will not be added.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The current object to add a menu items meta box for.",
                        "types": [
                            "\\WP_Post_Type",
                            "false"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_items_{$post_type_name}_recent",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/nav-menu.php",
            "line": 561,
            "doc": {
                "summary": "Filters the posts displayed in the 'Most Recent' tab of the current post type's menu items meta box.",
                "description": "<p>The dynamic portion of the hook name, <code>$post_type_name<\/code>, refers to the post type name.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>nav_menu_items_post_recent<\/code><\/li> <li><code>nav_menu_items_page_recent<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$recent_args<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of post objects being listed.",
                        "types": [
                            "\\WP_Post[]"
                        ],
                        "variable": "most_recent"
                    },
                    {
                        "name": "param",
                        "content": "An array of <code>WP_Query<\/code> arguments for the meta box.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to <code>wp_nav_menu_item_post_type_meta_box()<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "box"
                    },
                    {
                        "name": "param",
                        "content": "An array of <code>WP_Query<\/code> arguments for 'Most Recent' tab.",
                        "types": [
                            "array"
                        ],
                        "variable": "recent_args"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_items_{$post_type_name}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/nav-menu.php",
            "line": 661,
            "doc": {
                "summary": "Filters the posts displayed in the 'View All' tab of the current post type's menu items meta box.",
                "description": "<p>The dynamic portion of the hook name, <code>$post_type_name<\/code>, refers to the slug of the current post type.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>nav_menu_items_post<\/code><\/li> <li><code>nav_menu_items_page<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Converted the <code>$post_type<\/code> parameter to accept a WP_Post_Type object."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Query::query()"
                    },
                    {
                        "name": "param",
                        "content": "The posts for the current post type. Mostly <code>WP_Post<\/code> objects, but can also contain &quot;fake&quot; post objects to represent other menu items.",
                        "types": [
                            "object[]"
                        ],
                        "variable": "posts"
                    },
                    {
                        "name": "param",
                        "content": "An array of <code>WP_Query<\/code> arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The current post type object for this menu item meta box.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "wp_edit_nav_menu_walker",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/nav-menu.php",
            "line": 1071,
            "doc": {
                "summary": "Filters the Walker class used when adding nav menu items.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The walker class to use. Default 'Walker_Nav_Menu_Edit'.",
                        "types": [
                            "string"
                        ],
                        "variable": "class"
                    },
                    {
                        "name": "param",
                        "content": "ID of the menu being rendered.",
                        "types": [
                            "int"
                        ],
                        "variable": "menu_id"
                    }
                ]
            }
        },
        {
            "name": "allow_subdirectory_install",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/network.php",
            "line": 64,
            "doc": {
                "summary": "Filters whether to enable the subdirectory installation feature in Multisite.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable the subdirectory installation feature in Multisite.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow"
                    }
                ]
            }
        },
        {
            "name": "plugins_api_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/plugin-install.php",
            "line": 134,
            "doc": {
                "summary": "Filters the WordPress.org Plugin Installation API arguments.",
                "description": "<p>Important: An object MUST be returned to this filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Plugin API arguments.",
                        "types": [
                            "object"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The type of information being requested from the Plugin Installation API.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    }
                ]
            }
        },
        {
            "name": "plugins_api",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/plugin-install.php",
            "line": 150,
            "doc": {
                "summary": "Filters the response for the current WordPress.org Plugin Installation API request.",
                "description": "<p>Returning a non-false value will effectively short-circuit the WordPress.org API request.<\/p> <p>If <code>$action<\/code> is 'query_plugins' or 'plugin_information', an object MUST be passed.<br>If <code>$action<\/code> is 'hot_tags' or 'hot_categories', an array should be passed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The result object or array. Default false.",
                        "types": [
                            "false",
                            "object",
                            "array"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "The type of information being requested from the Plugin Installation API.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    },
                    {
                        "name": "param",
                        "content": "Plugin API arguments.",
                        "types": [
                            "object"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "plugins_api_result",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/plugin-install.php",
            "line": 234,
            "doc": {
                "summary": "Filters the Plugin Installation API response results.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Response object or WP_Error.",
                        "types": [
                            "object",
                            "\\WP_Error"
                        ],
                        "variable": "res"
                    },
                    {
                        "name": "param",
                        "content": "The type of information being requested from the Plugin Installation API.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    },
                    {
                        "name": "param",
                        "content": "Plugin API arguments.",
                        "types": [
                            "object"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "plugin_files_exclusions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 242,
            "doc": {
                "summary": "Filters the array of excluded directories and files while scanning the folder.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of excluded directories and files.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "exclusions"
                    }
                ]
            }
        },
        {
            "name": "activate_plugin",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 676,
            "doc": {
                "summary": "Fires before a plugin is activated.",
                "description": "<p>If a plugin is silently activated (such as during an update), this hook does not fire.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable the plugin for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "network_wide"
                    }
                ]
            }
        },
        {
            "name": "activate_{$plugin}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 691,
            "doc": {
                "summary": "Fires as a specific plugin is being activated.",
                "description": "<p>This hook is the &quot;activation&quot; hook used internally by register_activation_hook().<br>The dynamic portion of the hook name, <code>$plugin<\/code>, refers to the plugin basename.<\/p> <p>If a plugin is silently activated (such as during an update), this hook does not fire.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable the plugin for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "network_wide"
                    }
                ]
            }
        },
        {
            "name": "activated_plugin",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 718,
            "doc": {
                "summary": "Fires after a plugin has been activated.",
                "description": "<p>If a plugin is silently activated (such as during an update), this hook does not fire.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable the plugin for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "network_wide"
                    }
                ]
            }
        },
        {
            "name": "deactivate_plugin",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 775,
            "doc": {
                "summary": "Fires before a plugin is deactivated.",
                "description": "<p>If a plugin is silently deactivated (such as during an update), this hook does not fire.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin"
                    },
                    {
                        "name": "param",
                        "content": "Whether the plugin is deactivated for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "network_deactivating"
                    }
                ]
            }
        },
        {
            "name": "deactivate_{$plugin}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 814,
            "doc": {
                "summary": "Fires as a specific plugin is being deactivated.",
                "description": "<p>This hook is the &quot;deactivation&quot; hook used internally by register_deactivation_hook().<br>The dynamic portion of the hook name, <code>$plugin<\/code>, refers to the plugin basename.<\/p> <p>If a plugin is silently deactivated (such as during an update), this hook does not fire.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the plugin is deactivated for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "network_deactivating"
                    }
                ]
            }
        },
        {
            "name": "deactivated_plugin",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 828,
            "doc": {
                "summary": "Fires after a plugin is deactivated.",
                "description": "<p>If a plugin is silently deactivated (such as during an update), this hook does not fire.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin"
                    },
                    {
                        "name": "param",
                        "content": "Whether the plugin is deactivated for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "network_deactivating"
                    }
                ]
            }
        },
        {
            "name": "delete_plugin",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 968,
            "doc": {
                "summary": "Fires immediately before a plugin deletion attempt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    }
                ]
            }
        },
        {
            "name": "deleted_plugin",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 988,
            "doc": {
                "summary": "Fires immediately after a plugin deletion attempt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "Whether the plugin deletion was successful.",
                        "types": [
                            "bool"
                        ],
                        "variable": "deleted"
                    }
                ]
            }
        },
        {
            "name": "pre_uninstall_plugin",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 1229,
            "doc": {
                "summary": "Fires in uninstall_plugin() immediately before the plugin is uninstalled.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin"
                    },
                    {
                        "name": "param",
                        "content": "Uninstallable plugins.",
                        "types": [
                            "array"
                        ],
                        "variable": "uninstallable_plugins"
                    }
                ]
            }
        },
        {
            "name": "uninstall_{$file}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/plugin.php",
            "line": 1265,
            "doc": {
                "summary": "Fires in uninstall_plugin() once the plugin has been uninstalled.",
                "description": "<p>The action concatenates the 'uninstall_' prefix with the basename of the plugin passed to uninstall_plugin() to create a dynamically-named action.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    }
                ]
            }
        },
        {
            "name": "default_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 762,
            "doc": {
                "summary": "Filters the default post content initially used in the \"Write Post\" form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Default post content.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_content"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "default_title",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 772,
            "doc": {
                "summary": "Filters the default post title initially used in the \"Write Post\" form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Default post title.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_title"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "default_excerpt",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 782,
            "doc": {
                "summary": "Filters the default post excerpt initially used in the \"Write Post\" form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Default post excerpt.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_excerpt"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "edit_{$post_type}_per_page",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1232,
            "doc": {
                "summary": "Filters the number of items per page to show for a specific 'per_page' type.",
                "description": "<p>The dynamic portion of the hook name, <code>$post_type<\/code>, refers to the post type.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>edit_post_per_page<\/code><\/li> <li><code>edit_page_per_page<\/code><\/li> <li><code>edit_attachment_per_page<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of posts to display per page for the given post type. Default 20.",
                        "types": [
                            "int"
                        ],
                        "variable": "posts_per_page"
                    }
                ]
            }
        },
        {
            "name": "edit_posts_per_page",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1242,
            "doc": {
                "summary": "Filters the number of posts displayed per page when specifically listing \"posts\".",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of posts to be displayed. Default 20.",
                        "types": [
                            "int"
                        ],
                        "variable": "posts_per_page"
                    },
                    {
                        "name": "param",
                        "content": "The post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "upload_per_page",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1301,
            "doc": {
                "summary": "Filters the number of items to list per page when listing media items.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of media to list. Default 20.",
                        "types": [
                            "int"
                        ],
                        "variable": "media_per_page"
                    }
                ]
            }
        },
        {
            "name": "postbox_classes_{$screen_id}_{$box_id}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1383,
            "doc": {
                "summary": "Filters the postbox classes for a specific screen and box ID combo.",
                "description": "<p>The dynamic portions of the hook name, <code>$screen_id<\/code> and <code>$box_id<\/code>, refer to the screen ID and meta box ID, respectively.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of postbox classes.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "classes"
                    }
                ]
            }
        },
        {
            "name": "get_sample_permalink",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1479,
            "doc": {
                "summary": "Filters the sample permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array containing the sample permalink with placeholder for the post name, and the post name.<br>    @type string $0 The permalink with placeholder for the post name.<br>    @type string $1 The post name.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "permalink"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Post name (slug).",
                        "types": [
                            "string"
                        ],
                        "variable": "name"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_sample_permalink_html",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1564,
            "doc": {
                "summary": "Filters the sample permalink HTML markup.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Sample permalink HTML markup.",
                        "types": [
                            "string"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "New sample permalink title.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_title"
                    },
                    {
                        "name": "param",
                        "content": "New sample permalink slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_slug"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "admin_post_thumbnail_size",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1611,
            "doc": {
                "summary": "Filters the size used to display the post thumbnail image in the 'Featured image' meta box.",
                "description": "<p>Note: When a theme adds 'post-thumbnail' support, a special 'post-thumbnail' image size is registered, which differs from the 'thumbnail' image size managed via the Settings &gt; Media screen.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "Post thumbnail attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "thumbnail_id"
                    },
                    {
                        "name": "param",
                        "content": "The post object associated with the thumbnail.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "admin_post_thumbnail_html",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1640,
            "doc": {
                "summary": "Filters the admin post thumbnail HTML markup to return.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "3.5.0",
                        "description": "Added the <code>$post_id<\/code> parameter."
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Added the <code>$thumbnail_id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Admin post thumbnail HTML markup.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Thumbnail attachment ID, or null if there isn't one.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "thumbnail_id"
                    }
                ]
            }
        },
        {
            "name": "show_post_locked_dialog",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1749,
            "doc": {
                "summary": "Filters whether to show the post locked dialog.",
                "description": "<p>Returning false from the filter will prevent the dialog from being displayed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the dialog. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "display"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The user with the lock for the post.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "override_post_lock",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1805,
            "doc": {
                "summary": "Filters whether to allow the post lock to be overridden.",
                "description": "<p>Returning false from the filter will disable the ability to override the post lock.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow the post lock to be overridden. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "override"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The user with the lock for the post.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "post_locked_dialog",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1832,
            "doc": {
                "summary": "Fires inside the post locked dialog before the buttons are displayed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "The $user parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The user with the lock for the post.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "post_lock_lost_dialog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1869,
            "doc": {
                "summary": "Fires inside the dialog displayed when a user has lost the post lock.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_creating_autosave",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 1937,
            "doc": {
                "summary": "Fires before an autosave is stored.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post array - the autosave that is about to be saved.",
                        "types": [
                            "array"
                        ],
                        "variable": "new_autosave"
                    }
                ]
            }
        },
        {
            "name": "redirect_post_location",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 2107,
            "doc": {
                "summary": "Filters the post redirect destination URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The destination URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "filter_block_editor_meta_boxes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 2248,
            "doc": {
                "summary": "Fires right before the meta boxes are rendered.",
                "description": "<p>This allows for the filtering of meta box data, that should already be present by this point. Do not use as a means of adding meta box data.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Global meta box state.",
                        "types": [
                            "array"
                        ],
                        "variable": "wp_meta_boxes"
                    }
                ]
            }
        },
        {
            "name": "block_editor_meta_box_hidden_fields",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/post.php",
            "line": 2475,
            "doc": {
                "summary": "Adds hidden input fields to the meta box save form.",
                "description": "<p>Hook into this action to print <code>&lt;input type=\"hidden\" ... \/&gt;<\/code> fields, which will be POSTed back to the server when meta boxes are saved.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The post that is being edited.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_export_file_created",
            "type": "action",
            "numArgs": 5,
            "path": "\/wp-admin\/includes\/privacy-tools.php",
            "line": 563,
            "doc": {
                "summary": "Fires right after all personal data has been written to the export file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "Added the <code>$json_report_pathname<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The full path to the export file on the filesystem.",
                        "types": [
                            "string"
                        ],
                        "variable": "archive_pathname"
                    },
                    {
                        "name": "param",
                        "content": "The URL of the archive file.",
                        "types": [
                            "string"
                        ],
                        "variable": "archive_url"
                    },
                    {
                        "name": "param",
                        "content": "The full path to the HTML personal data report on the filesystem.",
                        "types": [
                            "string"
                        ],
                        "variable": "html_report_pathname"
                    },
                    {
                        "name": "param",
                        "content": "The export request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    },
                    {
                        "name": "param",
                        "content": "The full path to the JSON personal data report on the filesystem.",
                        "types": [
                            "string"
                        ],
                        "variable": "json_report_pathname"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_email_to",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/privacy-tools.php",
            "line": 623,
            "doc": {
                "summary": "Filters the recipient of the personal data export email notification.",
                "description": "<p>Should be used with great caution to avoid sending the data export link to wrong emails.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The email address of the notification recipient.",
                        "types": [
                            "string"
                        ],
                        "variable": "request_email"
                    },
                    {
                        "name": "param",
                        "content": "The request that is initiating the notification.",
                        "types": [
                            "\\WP_User_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_email_subject",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/privacy-tools.php",
            "line": 659,
            "doc": {
                "summary": "Filters the subject of the email sent when an export request is completed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The name of the site.",
                        "types": [
                            "string"
                        ],
                        "variable": "sitename"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request           User request object.<br>    @type int             $expiration        The time in seconds until the export file expires.<br>    @type string          $expiration_date   The localized date and time when the export file expires.<br>    @type string          $message_recipient The address that the email will be sent to. Defaults                                              to the value of <code>$request-&gt;email<\/code>, but can be changed                                              by the <code>wp_privacy_personal_data_email_to<\/code> filter.<br>    @type string          $export_file_url   The export file URL.<br>    @type string          $sitename          The site name sending the mail.<br>    @type string          $siteurl           The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_email_content",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/privacy-tools.php",
            "line": 704,
            "doc": {
                "summary": "Filters the text of the email sent with a personal data export file.",
                "description": "<p>The following strings have a special meaning and will get replaced dynamically:<\/p> <h3>EXPIRATION###         The date when the URL will be automatically deleted.<\/h3> <h3>LINK###               URL of the personal data export file for the user.<\/h3> <h3>SITENAME###           The name of the site.<\/h3> <h3>SITEURL###            The URL to the site.<\/h3>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "since",
                        "content": "5.3.0",
                        "description": "Introduced the <code>$email_data<\/code> array."
                    },
                    {
                        "name": "param",
                        "content": "Text in the email.",
                        "types": [
                            "string"
                        ],
                        "variable": "email_text"
                    },
                    {
                        "name": "param",
                        "content": "The request ID for this personal data export.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    },
                    {
                        "name": "param",
                        "content": "{ Data relating to the account action email.<br>@type WP_User_Request $request           User request object.<br>@type int             $expiration        The time in seconds until the export file expires.<br>@type string          $expiration_date   The localized date and time when the export file expires.<br>@type string          $message_recipient The address that the email will be sent to. Defaults                                          to the value of <code>$request-&gt;email<\/code>, but can be changed                                          by the <code>wp_privacy_personal_data_email_to<\/code> filter.<br>@type string          $export_file_url   The export file URL.<br>@type string          $sitename          The site name sending the mail.<br>@type string          $siteurl           The site URL sending the mail.",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_email_headers",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-admin\/includes\/privacy-tools.php",
            "line": 737,
            "doc": {
                "summary": "Filters the headers of the email sent with a personal data export file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The email headers.",
                        "types": [
                            "string",
                            "array"
                        ],
                        "variable": "headers"
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "The request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request           User request object.<br>    @type int             $expiration        The time in seconds until the export file expires.<br>    @type string          $expiration_date   The localized date and time when the export file expires.<br>    @type string          $message_recipient The address that the email will be sent to. Defaults                                              to the value of <code>$request-&gt;email<\/code>, but can be changed                                              by the <code>wp_privacy_personal_data_email_to<\/code> filter.<br>    @type string          $export_file_url   The export file URL.<br>    @type string          $sitename          The site name sending the mail.<br>    @type string          $siteurl           The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_export_file",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/privacy-tools.php",
            "line": 864,
            "doc": {
                "summary": "Generate the export file from the collected, grouped personal data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The export request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_personal_data_erased",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/privacy-tools.php",
            "line": 965,
            "doc": {
                "summary": "Fires immediately after a personal data erasure request has been marked completed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The privacy request post ID associated with this request.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    }
                ]
            }
        },
        {
            "name": "_wp_post_revision_field_{$field}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/revision.php",
            "line": 88,
            "doc": {
                "summary": "Contextually filter a post revision field.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, corresponds to a name of a field of the revision object.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>_wp_post_revision_field_post_title<\/code><\/li> <li><code>_wp_post_revision_field_post_content<\/code><\/li> <li><code>_wp_post_revision_field_post_excerpt<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The current revision field to compare to or from.",
                        "types": [
                            "string"
                        ],
                        "variable": "revision_field"
                    },
                    {
                        "name": "param",
                        "content": "The current revision field.",
                        "types": [
                            "string"
                        ],
                        "variable": "field"
                    },
                    {
                        "name": "param",
                        "content": "The revision post object to compare to or from.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "compare_from"
                    },
                    {
                        "name": "param",
                        "content": "The context of whether the current revision is the old or the new one. Values are 'to' or 'from'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "revision_text_diff_options",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/includes\/revision.php",
            "line": 116,
            "doc": {
                "summary": "Filters revisions text diff options.",
                "description": "<p>Filters the options passed to wp_text_diff() when viewing a post revision.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Associative array of options to pass to wp_text_diff().<br>    @type bool $show_split_view True for split view (two columns), false for                                 un-split view (single column). Default true.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The current revision field.",
                        "types": [
                            "string"
                        ],
                        "variable": "field"
                    },
                    {
                        "name": "param",
                        "content": "The revision post to compare from.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "compare_from"
                    },
                    {
                        "name": "param",
                        "content": "The revision post to compare to.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "compare_to"
                    }
                ]
            }
        },
        {
            "name": "wp_get_revision_ui_diff",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/revision.php",
            "line": 159,
            "doc": {
                "summary": "Filters the fields displayed in the post revision diff UI.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of revision UI fields. Each item is an array of id, name, and diff.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "The revision post to compare from.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "compare_from"
                    },
                    {
                        "name": "param",
                        "content": "The revision post to compare to.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "compare_to"
                    }
                ]
            }
        },
        {
            "name": "wp_prepare_revision_for_js",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/revision.php",
            "line": 279,
            "doc": {
                "summary": "Filters the array of revisions used on the revisions screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "{     The bootstrapped data for the revisions screen.<br>    @type int        $id         Revision ID.<br>    @type string     $title      Title for the revision's parent WP_Post object.<br>    @type int        $author     Revision post author ID.<br>    @type string     $date       Date the revision was modified.<br>    @type string     $dateShort  Short-form version of the date the revision was modified.<br>    @type string     $timeAgo    GMT-aware amount of time ago the revision was modified.<br>    @type bool       $autosave   Whether the revision is an autosave.<br>    @type bool       $current    Whether the revision is both not an autosave and the post                                  modified date matches the revision modified date (GMT-aware).<br>    @type bool|false $restoreUrl URL if the revision can be restored, false otherwise.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "revisions_data"
                    },
                    {
                        "name": "param",
                        "content": "The revision's WP_Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "revision"
                    },
                    {
                        "name": "param",
                        "content": "The revision's parent WP_Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "populate_options",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/schema.php",
            "line": 370,
            "doc": {
                "summary": "Fires before creating WordPress options and populating their default values.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "populate_network_meta",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/schema.php",
            "line": 1303,
            "doc": {
                "summary": "Filters meta for a network on creation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of network meta keys and values to be inserted.",
                        "types": [
                            "array"
                        ],
                        "variable": "sitemeta"
                    },
                    {
                        "name": "param",
                        "content": "ID of network to populate.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "populate_site_meta",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/schema.php",
            "line": 1349,
            "doc": {
                "summary": "Filters meta for a site on creation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of site meta keys and values to be inserted.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    },
                    {
                        "name": "param",
                        "content": "ID of site to populate.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "manage_{$screen->id}_columns",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/screen.php",
            "line": 37,
            "doc": {
                "summary": "Filters the column headers for a list table on a specific screen.",
                "description": "<p>The dynamic portion of the hook name, <code>$screen-&gt;id<\/code>, refers to the ID of a specific screen. For example, the screen ID for the Posts list table is edit-post, so the filter for that screen would be manage_edit-post_columns.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The column header labels keyed by column ID.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "columns"
                    }
                ]
            }
        },
        {
            "name": "default_hidden_columns",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/screen.php",
            "line": 71,
            "doc": {
                "summary": "Filters the default list of hidden columns.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of IDs of columns hidden by default.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "hidden"
                    },
                    {
                        "name": "param",
                        "content": "WP_Screen object of the current screen.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    }
                ]
            }
        },
        {
            "name": "hidden_columns",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/screen.php",
            "line": 84,
            "doc": {
                "summary": "Filters the list of hidden columns.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.1",
                        "description": "Added the <code>use_defaults<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Array of IDs of hidden columns.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "hidden"
                    },
                    {
                        "name": "param",
                        "content": "WP_Screen object of the current screen.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the default columns.",
                        "types": [
                            "bool"
                        ],
                        "variable": "use_defaults"
                    }
                ]
            }
        },
        {
            "name": "default_hidden_meta_boxes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/screen.php",
            "line": 181,
            "doc": {
                "summary": "Filters the default list of hidden meta boxes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of IDs of meta boxes hidden by default.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "hidden"
                    },
                    {
                        "name": "param",
                        "content": "WP_Screen object of the current screen.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    }
                ]
            }
        },
        {
            "name": "hidden_meta_boxes",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/screen.php",
            "line": 194,
            "doc": {
                "summary": "Filters the list of hidden meta boxes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of IDs of hidden meta boxes.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "hidden"
                    },
                    {
                        "name": "param",
                        "content": "WP_Screen object of the current screen.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the default meta boxes.<br>Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "use_defaults"
                    }
                ]
            }
        },
        {
            "name": "terms_to_edit",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/taxonomy.php",
            "line": 295,
            "doc": {
                "summary": "Filters the comma-separated list of terms available to edit.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_terms_to_edit()"
                    },
                    {
                        "name": "param",
                        "content": "A comma-separated list of term names.",
                        "types": [
                            "string"
                        ],
                        "variable": "terms_to_edit"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy name for which to retrieve terms.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "wp_terms_checklist_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/template.php",
            "line": 102,
            "doc": {
                "summary": "Filters the taxonomy terms checklist arguments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_terms_checklist()"
                    },
                    {
                        "name": "param",
                        "content": "An array or string of arguments.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "add_inline_data",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/template.php",
            "line": 393,
            "doc": {
                "summary": "Fires after outputting the fields for the inline editor for posts and pages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.8"
                    },
                    {
                        "name": "param",
                        "content": "The current post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The current post's post type object.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type_object"
                    }
                ]
            }
        },
        {
            "name": "wp_comment_reply",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/template.php",
            "line": 428,
            "endLine": 436,
            "doc": {
                "summary": "Filters the in-line comment reply-to form output in the Comments list table.",
                "description": "<p>Returning a non-empty value here will short-circuit display of the in-line comment-reply form in the Comments list table, echoing the returned value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_comment_reply()"
                    },
                    {
                        "name": "param",
                        "content": "The reply-to form content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "An array of default args.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "postmeta_form_keys",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/template.php",
            "line": 698,
            "doc": {
                "summary": "Filters values for the meta key dropdown in the Custom Fields meta box.",
                "description": "<p>Returning a non-null value will effectively short-circuit and avoid a potentially expensive query against postmeta.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Pre-defined meta keys to be used in place of a postmeta query. Default null.",
                        "types": [
                            "array",
                            "null"
                        ],
                        "variable": "keys"
                    },
                    {
                        "name": "param",
                        "content": "The current post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "postmeta_form_limit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/template.php",
            "line": 709,
            "doc": {
                "summary": "Filters the number of custom fields to retrieve for the drop-down in the Custom Fields meta box.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of custom fields to retrieve. Default 30.",
                        "types": [
                            "int"
                        ],
                        "variable": "limit"
                    }
                ]
            }
        },
        {
            "name": "import_upload_size_limit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/template.php",
            "line": 1009,
            "doc": {
                "summary": "Filters the maximum allowed upload size for import files.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_max_upload_size()"
                    },
                    {
                        "name": "param",
                        "content": "Allowed upload size. Default 1 MB.",
                        "types": [
                            "int"
                        ],
                        "variable": "max_upload_size"
                    }
                ]
            }
        },
        {
            "name": "display_post_states",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/template.php",
            "line": 2340,
            "doc": {
                "summary": "Filters the default post display states used in the posts list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "3.6.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Also applied in the Customizer context. If any admin functions are used within the filter, their existence should be checked with <code>function_exists()<\/code> before being used."
                    },
                    {
                        "name": "param",
                        "content": "An array of post display states.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_states"
                    },
                    {
                        "name": "param",
                        "content": "The current post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "display_media_states",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/template.php",
            "line": 2459,
            "doc": {
                "summary": "Filters the default media display states for items in the Media list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.8.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of media states. Default 'Header Image', 'Background Image', 'Site Icon', 'Logo'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "media_states"
                    },
                    {
                        "name": "param",
                        "content": "The current attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "admin_xml_ns",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/includes\/template.php",
            "line": 2647,
            "doc": {
                "summary": "Fires inside the HTML tag in the admin header.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ]
            }
        },
        {
            "name": "delete_theme",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/theme.php",
            "line": 82,
            "doc": {
                "summary": "Fires immediately before a theme deletion attempt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Stylesheet of the theme to delete.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    }
                ]
            }
        },
        {
            "name": "deleted_theme",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/theme.php",
            "line": 96,
            "doc": {
                "summary": "Fires immediately after a theme deletion attempt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Stylesheet of the theme to delete.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Whether the theme deletion was successful.",
                        "types": [
                            "bool"
                        ],
                        "variable": "deleted"
                    }
                ]
            }
        },
        {
            "name": "themes_api_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/theme.php",
            "line": 522,
            "doc": {
                "summary": "Filters arguments used to query for installer pages from the WordPress.org Themes API.",
                "description": "<p>Important: An object MUST be returned to this filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Arguments used to query for installer pages from the WordPress.org Themes API.",
                        "types": [
                            "object"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Requested action. Likely values are 'theme_information', 'feature_list', or 'query_themes'.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    }
                ]
            }
        },
        {
            "name": "themes_api",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/theme.php",
            "line": 539,
            "doc": {
                "summary": "Filters whether to override the WordPress.org Themes API.",
                "description": "<p>Returning a non-false value will effectively short-circuit the WordPress.org API request.<\/p> <p>If <code>$action<\/code> is 'query_themes', 'theme_information', or 'feature_list', an object MUST be passed. If <code>$action<\/code> is 'hot_tags', an array should be passed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to override the WordPress.org Themes API. Default false.",
                        "types": [
                            "false",
                            "object",
                            "array"
                        ],
                        "variable": "override"
                    },
                    {
                        "name": "param",
                        "content": "Requested action. Likely values are 'theme_information', 'feature_list', or 'query_themes'.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    },
                    {
                        "name": "param",
                        "content": "Arguments used to query for installer pages from the Themes API.",
                        "types": [
                            "object"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "themes_api_result",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/theme.php",
            "line": 634,
            "doc": {
                "summary": "Filters the returned WordPress.org Themes API response.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "WordPress.org Themes API response.",
                        "types": [
                            "array",
                            "\\stdClass",
                            "\\WP_Error"
                        ],
                        "variable": "res"
                    },
                    {
                        "name": "param",
                        "content": "Requested action. Likely values are 'theme_information', 'feature_list', or 'query_themes'.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    },
                    {
                        "name": "param",
                        "content": "Arguments used to query for installer pages from the WordPress.org Themes API.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "pre_prepare_themes_for_js",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/theme.php",
            "line": 662,
            "doc": {
                "summary": "Filters theme data before it is prepared for JavaScript.",
                "description": "<p>Passing a non-empty array will result in wp_prepare_themes_for_js() returning early with that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of theme data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "prepared_themes"
                    },
                    {
                        "name": "param",
                        "content": "An array of theme objects to prepare, if any.",
                        "types": [
                            "\\WP_Theme[]",
                            "null"
                        ],
                        "variable": "themes"
                    },
                    {
                        "name": "param",
                        "content": "The active theme slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "current_theme"
                    }
                ]
            }
        },
        {
            "name": "wp_prepare_themes_for_js",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/theme.php",
            "line": 807,
            "doc": {
                "summary": "Filters the themes prepared for JavaScript, for themes.php.",
                "description": "<p>Could be useful for changing the order, which is by name by default.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of theme data.",
                        "types": [
                            "array"
                        ],
                        "variable": "prepared_themes"
                    }
                ]
            }
        },
        {
            "name": "translations_api",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/translation-install.php",
            "line": 36,
            "doc": {
                "summary": "Allows a plugin to override the WordPress.org Translation Installation API entirely.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The result array. Default false.",
                        "types": [
                            "false",
                            "array"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "The type of translations being requested.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "Translation API arguments.",
                        "types": [
                            "object"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "translations_api_result",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/translation-install.php",
            "line": 109,
            "doc": {
                "summary": "Filters the Translation Installation API response results.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Response as an associative array or WP_Error.",
                        "types": [
                            "array",
                            "\\WP_Error"
                        ],
                        "variable": "res"
                    },
                    {
                        "name": "param",
                        "content": "The type of translations being requested.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "Translation API arguments.",
                        "types": [
                            "object"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "update_feedback",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/update-core.php",
            "line": 1085,
            "doc": {
                "summary": "Filters feedback messages displayed during the core update process.",
                "description": "<p>The filter is first evaluated after the zip file for the latest version has been downloaded and unzipped. It is evaluated five more times during the process:<\/p> <ol> <li>Before WordPress begins the core upgrade process.<\/li> <li>Before Maintenance Mode is enabled.<\/li> <li>Before WordPress begins copying over the necessary files.<\/li> <li>Before Maintenance Mode is disabled.<\/li> <li>Before the database is upgraded.<\/li> <\/ol>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The core update feedback messages.",
                        "types": [
                            "string"
                        ],
                        "variable": "feedback"
                    }
                ]
            }
        },
        {
            "name": "_core_updated_successfully",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/update-core.php",
            "line": 1572,
            "doc": {
                "summary": "Fires after WordPress core has been successfully updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WordPress version.",
                        "types": [
                            "string"
                        ],
                        "variable": "wp_version"
                    }
                ]
            }
        },
        {
            "name": "update_right_now_text",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/update.php",
            "line": 369,
            "doc": {
                "summary": "Filters the text displayed in the 'At a Glance' dashboard widget.",
                "description": "<p>Prior to 3.8.0, the widget was named 'Right Now'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Default text.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "in_plugin_update_message-{$file}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/update.php",
            "line": 589,
            "doc": {
                "summary": "Fires at the end of the update message container in each row of the plugins list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$file<\/code>, refers to the path of the plugin's primary file relative to the plugins directory.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin metadata. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "{     An object of metadata about the available plugin update.<br>    @type string   $id           Plugin ID, e.g. <code>w.org\/plugins\/[plugin-name]<\/code>.<br>    @type string   $slug         Plugin slug.<br>    @type string   $plugin       Plugin basename.<br>    @type string   $new_version  New plugin version.<br>    @type string   $url          Plugin URL.<br>    @type string   $package      Plugin update package URL.<br>    @type string[] $icons        An array of plugin icon URLs.<br>    @type string[] $banners      An array of plugin banner URLs.<br>    @type string[] $banners_rtl  An array of plugin RTL banner URLs.<br>    @type string   $requires     The version of WordPress which the plugin requires.<br>    @type string   $tested       The version of WordPress the plugin is tested against.<br>    @type string   $requires_php The version of PHP which the plugin requires.<br>}",
                        "types": [
                            "object"
                        ],
                        "variable": "response"
                    }
                ]
            }
        },
        {
            "name": "in_theme_update_message-{$theme_key}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/update.php",
            "line": 810,
            "doc": {
                "summary": "Fires at the end of the update message container in each row of the themes list table.",
                "description": "<p>The dynamic portion of the hook name, <code>$theme_key<\/code>, refers to the theme slug as found in the WordPress.org themes repository.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of metadata about the available theme update.<br>    @type string $new_version New theme version.<br>    @type string $url         Theme URL.<br>    @type string $package     Theme update package URL.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    }
                ]
            }
        },
        {
            "name": "plugins_auto_update_enabled",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/update.php",
            "line": 1065,
            "doc": {
                "summary": "Filters whether plugins auto-update is enabled.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "True if plugins auto-update is enabled, false otherwise.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enabled"
                    }
                ]
            }
        },
        {
            "name": "themes_auto_update_enabled",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/update.php",
            "line": 1074,
            "doc": {
                "summary": "Filters whether themes auto-update is enabled.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "True if themes auto-update is enabled, false otherwise.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enabled"
                    }
                ]
            }
        },
        {
            "name": "wp_install",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/upgrade.php",
            "line": 128,
            "doc": {
                "summary": "Fires after a site is fully installed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The site owner.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_installed_email",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-admin\/includes\/upgrade.php",
            "line": 605,
            "doc": {
                "summary": "Filters the contents of the email sent to the site administrator when WordPress is installed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The email address of the recipient.<br>    @type string $subject The subject of the email.<br>    @type string $message The content of the email.<br>    @type string $headers Headers.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "installed_email"
                    },
                    {
                        "name": "param",
                        "content": "The site administrator user object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "blog_title"
                    },
                    {
                        "name": "param",
                        "content": "The site URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "blog_url"
                    },
                    {
                        "name": "param",
                        "content": "The site administrator's password. Note that a placeholder message is usually passed instead of the user's actual password.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    }
                ]
            }
        },
        {
            "name": "wp_upgrade",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/upgrade.php",
            "line": 665,
            "doc": {
                "summary": "Fires after a site is fully upgraded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The new $wp_db_version.",
                        "types": [
                            "int"
                        ],
                        "variable": "wp_db_version"
                    },
                    {
                        "name": "param",
                        "content": "The old (current) $wp_db_version.",
                        "types": [
                            "int"
                        ],
                        "variable": "wp_current_db_version"
                    }
                ]
            }
        },
        {
            "name": "dbdelta_queries",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/upgrade.php",
            "line": 2736,
            "doc": {
                "summary": "Filters the dbDelta SQL queries.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of dbDelta SQL queries.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "queries"
                    }
                ]
            }
        },
        {
            "name": "dbdelta_create_queries",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/upgrade.php",
            "line": 2767,
            "doc": {
                "summary": "Filters the dbDelta SQL queries for creating tables and\/or databases.",
                "description": "<p>Queries filterable via this hook contain &quot;CREATE TABLE&quot; or &quot;CREATE DATABASE&quot;.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of dbDelta create SQL queries.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "cqueries"
                    }
                ]
            }
        },
        {
            "name": "dbdelta_insert_queries",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/upgrade.php",
            "line": 2778,
            "doc": {
                "summary": "Filters the dbDelta SQL queries for inserting or updating.",
                "description": "<p>Queries filterable via this hook contain &quot;INSERT INTO&quot; or &quot;UPDATE&quot;.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of dbDelta insert or update SQL queries.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "iqueries"
                    }
                ]
            }
        },
        {
            "name": "wp_should_upgrade_global_tables",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/upgrade.php",
            "line": 3573,
            "doc": {
                "summary": "Filters if upgrade routines should be run on global tables.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to run the upgrade routines on global tables.",
                        "types": [
                            "bool"
                        ],
                        "variable": "should_upgrade"
                    }
                ]
            }
        },
        {
            "name": "check_passwords",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/user.php",
            "line": 169,
            "doc": {
                "summary": "Fires before the password and confirm password fields are checked for congruity.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The username.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "The password (passed by reference).",
                        "types": [
                            "string"
                        ],
                        "variable": "pass1"
                    },
                    {
                        "name": "param",
                        "content": "The confirmed password (passed by reference).",
                        "types": [
                            "string"
                        ],
                        "variable": "pass2"
                    }
                ]
            }
        },
        {
            "name": "user_profile_update_errors",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/user.php",
            "line": 226,
            "doc": {
                "summary": "Fires before user profile update errors are returned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Error object (passed by reference).",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is a user update.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "User object (passed by reference).",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "edit_user_created_user",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/user.php",
            "line": 247,
            "doc": {
                "summary": "Fires after a new user has been created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly created user or WP_Error on failure.",
                        "types": [
                            "int",
                            "\\WP_Error"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Type of notification that should happen. See wp_send_new_user_notifications() for more information.",
                        "types": [
                            "string"
                        ],
                        "variable": "notify"
                    }
                ]
            }
        },
        {
            "name": "editable_roles",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/user.php",
            "line": 278,
            "doc": {
                "summary": "Filters the list of editable roles.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of arrays containing role information.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "all_roles"
                    }
                ]
            }
        },
        {
            "name": "get_users_drafts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/includes\/user.php",
            "line": 322,
            "doc": {
                "summary": "Filters the user's drafts query string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The user's drafts query string.",
                        "types": [
                            "string"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "delete_user",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/user.php",
            "line": 374,
            "doc": {
                "summary": "Fires immediately before a user is deleted from the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$user<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the user to delete.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user to reassign posts and links to.<br>Default null, for no reassignment.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "reassign"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object of the user to delete.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "post_types_to_delete_with_user",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/includes\/user.php",
            "line": 394,
            "doc": {
                "summary": "Filters the list of post types to delete with a user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of post types to delete.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_types_to_delete"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "deleted_user",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/user.php",
            "line": 453,
            "doc": {
                "summary": "Fires immediately after a user is deleted from the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$user<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted user.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user to reassign posts and links to.<br>Default null, for no reassignment.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "reassign"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object of the deleted user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_authorize_application_password_request_errors",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/includes\/user.php",
            "line": 670,
            "doc": {
                "summary": "Fires before application password errors are returned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "error"
                    },
                    {
                        "name": "param",
                        "content": "The array of request data.",
                        "types": [
                            "array"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "The user authorizing the application.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "welcome_panel",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/index.php",
            "line": 197,
            "doc": {
                "summary": "Add content to the welcome panel on the admin dashboard.",
                "description": "<p>To remove the default welcome panel, use remove_action():<\/p> <p>remove_action( 'welcome_panel', 'wp_welcome_panel' );<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ]
            }
        },
        {
            "name": "tables_to_repair",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/maint\/repair.php",
            "line": 107,
            "doc": {
                "summary": "Filters additional database tables to repair.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of prefixed table names to be repaired.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "tables"
                    }
                ]
            }
        },
        {
            "name": "media_upload_default_type",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/media-upload.php",
            "line": 64,
            "doc": {
                "summary": "Filters the default media upload type in the legacy (pre-3.5.0) media popup.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The default media upload type. Possible values include 'image', 'audio', 'video', 'file', etc. Default 'file'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "media_upload_default_tab",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/media-upload.php",
            "line": 78,
            "doc": {
                "summary": "Filters the default tab in the legacy (pre-3.5.0) media popup.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The default media popup tab. Default 'type' (From Computer).",
                        "types": [
                            "string"
                        ],
                        "variable": "tab"
                    }
                ]
            }
        },
        {
            "name": "media_upload_{$type}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/media-upload.php",
            "line": 105,
            "doc": {
                "summary": "Fires inside specific upload-type views in the legacy (pre-3.5.0) media popup based on the current tab.",
                "description": "<p>The dynamic portion of the hook name, <code>$type<\/code>, refers to the specific media upload type.<\/p> <p>The hook only fires if the current <code>$tab<\/code> is 'type' (From Computer), 'type_url' (From URL), or, if the tab does not exist (i.e., has not been registered via the {@see 'media_upload_tabs'} filter.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>media_upload_audio<\/code><\/li> <li><code>media_upload_file<\/code><\/li> <li><code>media_upload_image<\/code><\/li> <li><code>media_upload_video<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "media_upload_{$tab}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/media-upload.php",
            "line": 117,
            "doc": {
                "summary": "Fires inside limited and specific upload-tab views in the legacy (pre-3.5.0) media popup.",
                "description": "<p>The dynamic portion of the hook name, <code>$tab<\/code>, refers to the specific media upload tab. Possible values include 'library' (Media Library), or any custom tab registered via the {@see 'media_upload_tabs'} filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "parent_file",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/menu-header.php",
            "line": 38,
            "doc": {
                "summary": "Filters the parent file of an admin menu sub-menu item.",
                "description": "<p>Allows plugins to move sub-menu items around.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The parent file.",
                        "types": [
                            "string"
                        ],
                        "variable": "parent_file"
                    }
                ]
            }
        },
        {
            "name": "submenu_file",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/menu-header.php",
            "line": 48,
            "doc": {
                "summary": "Filters the file of an admin menu sub-menu item.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The submenu file.",
                        "types": [
                            "string"
                        ],
                        "variable": "submenu_file"
                    },
                    {
                        "name": "param",
                        "content": "The submenu item's parent file.",
                        "types": [
                            "string"
                        ],
                        "variable": "parent_file"
                    }
                ]
            }
        },
        {
            "name": "adminmenu",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/menu-header.php",
            "line": 302,
            "doc": {
                "summary": "Fires after the admin menu has been output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ]
            }
        },
        {
            "name": "delete_site_email_content",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/ms-delete-site.php",
            "line": 82,
            "doc": {
                "summary": "Filters the text for the email sent to the site admin when a request to delete a site in a Multisite network is submitted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The email text.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "myblogs_allblogs_options",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/my-sites.php",
            "line": 93,
            "doc": {
                "summary": "Fires before the sites list on the My Sites screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "myblogs_options",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/my-sites.php",
            "line": 110,
            "doc": {
                "summary": "Enable the Global Settings section on the My Sites screen.",
                "description": "<p>By default, the Global Settings section is hidden. Passing a non-empty string to this filter will enable the section, and allow new settings to be added, either globally or for specific sites.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The settings HTML markup. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "settings_html"
                    },
                    {
                        "name": "param",
                        "content": "Context of the setting (global or site-specific). Default 'global'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "myblogs_blog_actions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/my-sites.php",
            "line": 139,
            "doc": {
                "summary": "Filters the row links displayed for each site on the My Sites screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The HTML site link markup.",
                        "types": [
                            "string"
                        ],
                        "variable": "actions"
                    },
                    {
                        "name": "param",
                        "content": "An object containing the site data.",
                        "types": [
                            "object"
                        ],
                        "variable": "user_blog"
                    }
                ]
            }
        },
        {
            "name": "after_menu_locations_table",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/nav-menus.php",
            "line": 855,
            "doc": {
                "summary": "Fires after the menu locations table is displayed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    }
                ]
            }
        },
        {
            "name": "wp_nav_locations_listed_per_menu",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/nav-menus.php",
            "line": 922,
            "doc": {
                "summary": "Filters the number of locations listed per menu in the drop-down select.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of menu locations to list. Default 3.",
                        "types": [
                            "int"
                        ],
                        "variable": "locations"
                    }
                ]
            }
        },
        {
            "name": "redirect_network_admin_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/admin.php",
            "line": 29,
            "doc": {
                "summary": "Filters whether to redirect the request to the Network Admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the request should be redirected.",
                        "types": [
                            "bool"
                        ],
                        "variable": "redirect_network_admin_request"
                    }
                ]
            }
        },
        {
            "name": "wpmuadminedit",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/network\/edit.php",
            "line": 28,
            "doc": {
                "summary": "Fires just before the action handler in several Network Admin screens.",
                "description": "<p>This hook fires on multiple screens in the Multisite Network Admin, including Users, Network Settings, and Site Settings.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "network_admin_edit_{$action}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/network\/edit.php",
            "line": 38,
            "doc": {
                "summary": "Fires the requested handler action.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the name of the requested action derived from the <code>GET<\/code> request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "update_wpmu_options",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/network\/settings.php",
            "line": 132,
            "doc": {
                "summary": "Fires after the network options are updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    }
                ]
            }
        },
        {
            "name": "mu_menu_items",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/settings.php",
            "line": 497,
            "doc": {
                "summary": "Filters available network-wide administration menu options.",
                "description": "<p>Options returned to this filter are output as individual checkboxes that, when selected, enable site administrator access to the specified administration menu in certain contexts.<\/p> <p>Adding options for specific menus here hinges on the appropriate checks and capabilities being in place in the site dashboard on the other side. For instance, when the single default option, 'plugins' is enabled, site administrators are granted access to the Plugins screen in their individual sites' dashboards.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of the menu items available.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "admin_menus"
                    }
                ]
            }
        },
        {
            "name": "wpmu_options",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/network\/settings.php",
            "line": 531,
            "doc": {
                "summary": "Fires at the end of the Network Settings form, before the submit button.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    }
                ]
            }
        },
        {
            "name": "network_site_info_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/site-info.php",
            "line": 220,
            "doc": {
                "summary": "Fires at the end of the site info form in network admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "pre_network_site_new_created_user",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/site-new.php",
            "line": 117,
            "doc": {
                "summary": "Fires immediately before a new user is created via the network site-new.php page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Email of the non-existent user.",
                        "types": [
                            "string"
                        ],
                        "variable": "email"
                    }
                ]
            }
        },
        {
            "name": "network_site_new_created_user",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/site-new.php",
            "line": 136,
            "doc": {
                "summary": "Fires after a new user has been created via the network site-new.php page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly created user.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "network_site_new_form",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/network\/site-new.php",
            "line": 287,
            "doc": {
                "summary": "Fires at the end of the new site form in network admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    }
                ]
            }
        },
        {
            "name": "wpmu_update_blog_options",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/site-settings.php",
            "line": 60,
            "doc": {
                "summary": "Fires after the site options are updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added <code>$id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The ID of the site being updated.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "wpmueditblogaction",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/site-settings.php",
            "line": 174,
            "doc": {
                "summary": "Fires at the end of the Edit Site form, before the submit button.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "handle_network_bulk_actions-{$screen}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/network\/site-themes.php",
            "line": 139,
            "doc": {
                "summary": "Fires when a custom bulk action should be handled.",
                "description": "<p>The redirect link should be modified with success or failure feedback from the action to be used to display feedback to the user.<\/p> <p>The dynamic portion of the hook name, <code>$screen<\/code>, refers to the current screen ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The redirect URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "redirect_url"
                    },
                    {
                        "name": "param",
                        "content": "The action being taken.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    },
                    {
                        "name": "param",
                        "content": "The items to take the action on.",
                        "types": [
                            "array"
                        ],
                        "variable": "items"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "network_site_users_created_user",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/site-users.php",
            "line": 88,
            "doc": {
                "summary": "Fires after a user has been created via the network site-users.php page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly created user.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "show_network_site_users_add_existing_form",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/site-users.php",
            "line": 212,
            "doc": {
                "summary": "Filters whether to show the Add Existing User form on the Multisite Users screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the Add Existing User form. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bool"
                    }
                ]
            }
        },
        {
            "name": "network_site_users_after_list_table",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/network\/site-users.php",
            "line": 294,
            "doc": {
                "summary": "Fires after the list table on the Users screen in the Multisite Network Admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "show_network_site_users_add_new_form",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/site-users.php",
            "line": 331,
            "doc": {
                "summary": "Filters whether to show the Add New User form on the Multisite Users screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the Add New User form. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bool"
                    }
                ]
            }
        },
        {
            "name": "activate_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/sites.php",
            "line": 266,
            "doc": {
                "summary": "Fires after a network site is activated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the activated site.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "deactivate_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/sites.php",
            "line": 277,
            "doc": {
                "summary": "Fires before a network site is deactivated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the site being deactivated.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "network_sites_updated_message_{$action}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/sites.php",
            "line": 352,
            "doc": {
                "summary": "Filters a specific, non-default, site-updated message in the Network admin.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the non-default site update action.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The update message. Default 'Settings saved'.",
                        "types": [
                            "string"
                        ],
                        "variable": "msg"
                    }
                ]
            }
        },
        {
            "name": "after_mu_upgrade",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/upgrade.php",
            "line": 113,
            "doc": {
                "summary": "Fires after the Multisite DB upgrade for each site is complete.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The upgrade response array.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    }
                ]
            }
        },
        {
            "name": "wpmu_upgrade_site",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/upgrade.php",
            "line": 122,
            "doc": {
                "summary": "Fires after each site has been upgraded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "wpmu_upgrade_page",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/network\/upgrade.php",
            "line": 152,
            "doc": {
                "summary": "Fires before the footer on the network upgrade screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    }
                ]
            }
        },
        {
            "name": "network_user_new_created_user",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/network\/user-new.php",
            "line": 64,
            "doc": {
                "summary": "Fires after a new user has been created via the network user-new.php page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly created user.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "network_user_new_form",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/network\/user-new.php",
            "line": 143,
            "doc": {
                "summary": "Fires at the end of the new user form in network admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    }
                ]
            }
        },
        {
            "name": "thread_comments_depth_max",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options-discussion.php",
            "line": 118,
            "doc": {
                "summary": "Filters the maximum depth of threaded\/nested comments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The maximum depth of threaded comments. Default 10.",
                        "types": [
                            "int"
                        ],
                        "variable": "max_depth"
                    }
                ]
            }
        },
        {
            "name": "avatar_defaults",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options-discussion.php",
            "line": 336,
            "doc": {
                "summary": "Filters the default avatars.",
                "description": "<p>Avatars are stored in key\/value pairs, where the key is option value, and the name is the displayed avatar name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of default avatars.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "avatar_defaults"
                    }
                ]
            }
        },
        {
            "name": "default_avatar_select",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options-discussion.php",
            "line": 360,
            "doc": {
                "summary": "Filters the HTML output of the default avatar list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML markup of the avatar list.",
                        "types": [
                            "string"
                        ],
                        "variable": "avatar_list"
                    }
                ]
            }
        },
        {
            "name": "date_formats",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options-general.php",
            "line": 348,
            "doc": {
                "summary": "Filters the default date formats.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.0.0",
                        "description": "Added ISO date standard YYYY-MM-DD format."
                    },
                    {
                        "name": "param",
                        "content": "Array of default date formats.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "default_date_formats"
                    }
                ]
            }
        },
        {
            "name": "time_formats",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options-general.php",
            "line": 396,
            "doc": {
                "summary": "Filters the default time formats.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of default time formats.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "default_time_formats"
                    }
                ]
            }
        },
        {
            "name": "available_permalink_structure_tags",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options-permalink.php",
            "line": 308,
            "doc": {
                "summary": "Filters the list of available permalink structure tags on the Permalinks settings page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of key =&gt; value pairs of available permalink structure tags.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "available_tags"
                    }
                ]
            }
        },
        {
            "name": "blog_privacy_selector",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/options-reading.php",
            "line": 224,
            "doc": {
                "summary": "Enables the legacy 'Site visibility' privacy options.",
                "description": "<p>By default the privacy options form displays a single checkbox to 'discourage' search engines from indexing the site. Hooking to this action serves a dual purpose:<\/p> <ol> <li>Disable the single checkbox in favor of a multiple-choice list of radio buttons.<\/li> <li>Open the door to adding additional radio button choices to the list.<\/li> <\/ol> <p>Hooking to this action also converts the 'Search engine visibility' heading to the more open-ended 'Site visibility' heading.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "enable_update_services_configuration",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options-writing.php",
            "line": 205,
            "doc": {
                "summary": "Filters whether to enable the Update Services section in the Writing settings screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable the Update Services settings area. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enable"
                    }
                ]
            }
        },
        {
            "name": "option_page_capability_{$option_page}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options.php",
            "line": 45,
            "doc": {
                "summary": "Filters the capability required when using the Settings API.",
                "description": "<p>By default, the options groups for all registered settings require the manage_options capability.<br>This filter is required to change the capability required for a certain options page.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The capability used for the page, which is manage_options by default.",
                        "types": [
                            "string"
                        ],
                        "variable": "capability"
                    }
                ]
            }
        },
        {
            "name": "enable_post_by_email_configuration",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options.php",
            "line": 205,
            "doc": {
                "summary": "Filters whether the post-by-email functionality is enabled.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether post-by-email configuration is enabled. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enabled"
                    }
                ]
            }
        },
        {
            "name": "whitelist_options",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/options.php",
            "line": 218,
            "endLine": 224,
            "doc": {
                "summary": "Filters the allowed options list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.5.0",
                        "description": "Use {@see 'allowed_options'} instead."
                    },
                    {
                        "name": "param",
                        "content": "The allowed options list.",
                        "types": [
                            "array"
                        ],
                        "variable": "allowed_options"
                    }
                ]
            }
        },
        {
            "name": "allowed_options",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/options.php",
            "line": 233,
            "doc": {
                "summary": "Filters the allowed options list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The allowed options list.",
                        "types": [
                            "array"
                        ],
                        "variable": "allowed_options"
                    }
                ]
            }
        },
        {
            "name": "install_plugins_pre_{$tab}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/plugin-install.php",
            "line": 82,
            "doc": {
                "summary": "Fires before each tab on the Install Plugins screen is loaded.",
                "description": "<p>The dynamic portion of the hook name, <code>$tab<\/code>, allows for targeting individual tabs.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>install_plugins_pre_beta<\/code><\/li> <li><code>install_plugins_pre_favorites<\/code><\/li> <li><code>install_plugins_pre_featured<\/code><\/li> <li><code>install_plugins_pre_plugin-information<\/code><\/li> <li><code>install_plugins_pre_popular<\/code><\/li> <li><code>install_plugins_pre_recommended<\/code><\/li> <li><code>install_plugins_pre_search<\/code><\/li> <li><code>install_plugins_pre_upload<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    }
                ]
            }
        },
        {
            "name": "install_plugins_{$tab}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/plugin-install.php",
            "line": 196,
            "doc": {
                "summary": "Fires after the plugins list table in each tab of the Install Plugins screen.",
                "description": "<p>The dynamic portion of the hook name, <code>$tab<\/code>, allows for targeting individual tabs.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>install_plugins_beta<\/code><\/li> <li><code>install_plugins_favorites<\/code><\/li> <li><code>install_plugins_featured<\/code><\/li> <li><code>install_plugins_plugin-information<\/code><\/li> <li><code>install_plugins_popular<\/code><\/li> <li><code>install_plugins_recommended<\/code><\/li> <li><code>install_plugins_search<\/code><\/li> <li><code>install_plugins_upload<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The current page number of the plugins list table.",
                        "types": [
                            "int"
                        ],
                        "variable": "paged"
                    }
                ]
            }
        },
        {
            "name": "pre_current_active_plugins",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/plugins.php",
            "line": 759,
            "doc": {
                "summary": "Fires before the plugins list table is rendered.",
                "description": "<p>This hook also fires before the plugins list table is rendered in the Network Admin.<\/p> <p>Please note: The 'active' portion of the hook name does not refer to whether the current view is for active plugins, but rather all plugins actively-installed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of arrays containing information on all installed plugins.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "plugins_all"
                    }
                ]
            }
        },
        {
            "name": "replace_editor",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/post.php",
            "line": 182,
            "doc": {
                "summary": "Allows replacement of the editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to replace the editor. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "replace"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_action_{$action}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/post.php",
            "line": 363,
            "doc": {
                "summary": "Fires for a given custom post action request.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the custom post action.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID sent with the request.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "site_health_navigation_tabs",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/site-health.php",
            "line": 31,
            "doc": {
                "summary": "An associative array of extra tabs for the Site Health navigation bar.",
                "description": "<p>Add a custom page to the Site Health screen, based on a tab slug and label.<br>The label you provide will also be used as part of the site title.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of tab labels keyed by their slug.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "tabs"
                    }
                ]
            }
        },
        {
            "name": "site_health_tab_content",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/site-health.php",
            "line": 210,
            "doc": {
                "summary": "Output content of a custom Site Health tab.",
                "description": "<p>This action fires right after the Site Health header, and users are still subject to the capability checks for the Site Health page to view any custom tabs and their contents.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The slug of the tab that was requested.",
                        "types": [
                            "string"
                        ],
                        "variable": "tab"
                    }
                ]
            }
        },
        {
            "name": "install_themes_pre_{$tab}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/theme-install.php",
            "line": 104,
            "doc": {
                "summary": "Fires before each of the tabs are rendered on the Install Themes page.",
                "description": "<p>The dynamic portion of the hook name, <code>$tab<\/code>, refers to the current theme installation tab.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>install_themes_pre_block-themes<\/code><\/li> <li><code>install_themes_pre_dashboard<\/code><\/li> <li><code>install_themes_pre_featured<\/code><\/li> <li><code>install_themes_pre_new<\/code><\/li> <li><code>install_themes_pre_search<\/code><\/li> <li><code>install_themes_pre_updated<\/code><\/li> <li><code>install_themes_pre_upload<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "Added the <code>install_themes_pre_block-themes<\/code> hook name."
                    }
                ]
            }
        },
        {
            "name": "install_themes_tabs",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/theme-install.php",
            "line": 178,
            "doc": {
                "summary": "Filters the tabs shown on the Add Themes screen.",
                "description": "<p>This filter is for backward compatibility only, for the suppression of the upload tab.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of the tabs shown on the Add Themes screen. Default is 'upload'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "tabs"
                    }
                ]
            }
        },
        {
            "name": "install_themes_{$tab}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/theme-install.php",
            "line": 306,
            "doc": {
                "summary": "Fires at the top of each of the tabs on the Install Themes page.",
                "description": "<p>The dynamic portion of the hook name, <code>$tab<\/code>, refers to the current theme installation tab.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>install_themes_block-themes<\/code><\/li> <li><code>install_themes_dashboard<\/code><\/li> <li><code>install_themes_featured<\/code><\/li> <li><code>install_themes_new<\/code><\/li> <li><code>install_themes_search<\/code><\/li> <li><code>install_themes_updated<\/code><\/li> <li><code>install_themes_upload<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "Added the <code>install_themes_block-themes<\/code> hook name."
                    },
                    {
                        "name": "param",
                        "content": "Number of the current page of results being viewed.",
                        "types": [
                            "int"
                        ],
                        "variable": "paged"
                    }
                ]
            }
        },
        {
            "name": "theme_auto_update_setting_template",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/themes.php",
            "line": 732,
            "doc": {
                "summary": "Filters the JavaScript template used to display the auto-update setting for a theme (in the overlay).",
                "description": "<p>See {@see \\wp_prepare_themes_for_js()} for the properties of the <code>data<\/code> object.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The template for displaying the auto-update setting link.",
                        "types": [
                            "string"
                        ],
                        "variable": "template"
                    }
                ]
            }
        },
        {
            "name": "tool_box",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/tools.php",
            "line": 93,
            "doc": {
                "summary": "Fires at the end of the Tools Administration screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "after_core_auto_updates_settings",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/update-core.php",
            "line": 443,
            "doc": {
                "summary": "Fires after the major core auto-update settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of core auto-update settings.<br>    @type bool $dev   Whether to enable automatic updates for development versions.<br>    @type bool $minor Whether to enable minor automatic core updates.<br>    @type bool $major Whether to enable major automatic core updates.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "auto_update_settings"
                    }
                ]
            }
        },
        {
            "name": "core_upgrade_preamble",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/update-core.php",
            "line": 1080,
            "doc": {
                "summary": "Fires after the core, plugin, and theme update tables.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ]
            }
        },
        {
            "name": "update-core-custom_{$action}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/update-core.php",
            "line": 1272,
            "doc": {
                "summary": "Fires for each custom update action on the WordPress Updates screen.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the passed update action. The hook fires in lieu of all available default update actions.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    }
                ]
            }
        },
        {
            "name": "update-custom_{$action}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/update.php",
            "line": 362,
            "doc": {
                "summary": "Fires when a custom plugin or theme update request is received.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the action provided in the request for wp-admin\/update.php. Can be used to provide custom update functionality for themes and plugins.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "redirect_user_admin_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/user\/admin.php",
            "line": 28,
            "doc": {
                "summary": "Filters whether to redirect the request to the User Admin in Multisite.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the request should be redirected.",
                        "types": [
                            "bool"
                        ],
                        "variable": "redirect_user_admin_request"
                    }
                ]
            }
        },
        {
            "name": "enable_edit_any_user_configuration",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 101,
            "doc": {
                "summary": "Filters whether to allow administrators on Multisite to edit every user.",
                "description": "<p>Enabling the user editing form via this filter also hinges on the user holding the 'manage_network_users' cap, and the logged-in user not matching the user profile open for editing.<\/p> <p>The filter was introduced to replace the EDIT_ANY_USER constant.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow editing of any user. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow"
                    }
                ]
            }
        },
        {
            "name": "personal_options_update",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 148,
            "doc": {
                "summary": "Fires before the page loads on the 'Profile' editing screen.",
                "description": "<p>The action only fires if the current user is editing their own profile.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "edit_user_profile_update",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 157,
            "doc": {
                "summary": "Fires before the page loads on the 'Edit User' screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "user_edit_form_tag",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/user-edit.php",
            "line": 256,
            "doc": {
                "summary": "Fires inside the your-profile form tag on the user editing screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "admin_color_scheme_picker",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 322,
            "doc": {
                "summary": "Fires in the 'Admin Color Scheme' section of the user editing screen.",
                "description": "<p>The section is only enabled if a callback is hooked to the action, and if there is more than one defined color scheme for the admin.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.8.1",
                        "description": "Added <code>$user_id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "personal_options",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 394,
            "doc": {
                "summary": "Fires at the end of the 'Personal Options' settings table on the user editing screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "profile_user"
                    }
                ]
            }
        },
        {
            "name": "profile_personal_options",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 409,
            "doc": {
                "summary": "Fires after the 'Personal Options' settings table on the 'Profile' editing screen.",
                "description": "<p>The action only fires if the current user is editing their own profile.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "profile_user"
                    }
                ]
            }
        },
        {
            "name": "user_{$name}_label",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 569,
            "doc": {
                "summary": "Filters a user contactmethod label.",
                "description": "<p>The dynamic portion of the hook name, <code>$name<\/code>, refers to each of the keys in the contact methods array.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The translatable label for the contact method.",
                        "types": [
                            "string"
                        ],
                        "variable": "desc"
                    }
                ]
            }
        },
        {
            "name": "user_profile_picture_description",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/user-edit.php",
            "line": 615,
            "doc": {
                "summary": "Filters the user profile picture description displayed under the Gravatar.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$profile_user<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The description that will be printed.",
                        "types": [
                            "string"
                        ],
                        "variable": "description"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "profile_user"
                    }
                ]
            }
        },
        {
            "name": "show_password_fields",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/user-edit.php",
            "line": 632,
            "doc": {
                "summary": "Filters the display of the password fields.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "since",
                        "content": "2.8.0",
                        "description": "Added the <code>$profile_user<\/code> parameter."
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Now evaluated only in user-edit.php."
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the password fields. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    },
                    {
                        "name": "param",
                        "content": "User object for the current user to edit.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "profile_user"
                    }
                ]
            }
        },
        {
            "name": "wp_create_application_password_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 800,
            "doc": {
                "summary": "Fires in the create Application Passwords form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "profile_user"
                    }
                ]
            }
        },
        {
            "name": "show_user_profile",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 844,
            "doc": {
                "summary": "Fires after the 'About Yourself' settings table on the 'Profile' editing screen.",
                "description": "<p>The action only fires if the current user is editing their own profile.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "profile_user"
                    }
                ]
            }
        },
        {
            "name": "edit_user_profile",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/user-edit.php",
            "line": 853,
            "doc": {
                "summary": "Fires after the 'About the User' settings table on the 'Edit User' screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "profile_user"
                    }
                ]
            }
        },
        {
            "name": "additional_capabilities_display",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/user-edit.php",
            "line": 870,
            "doc": {
                "summary": "Filters whether to display additional capabilities for the user.",
                "description": "<p>The 'Additional Capabilities' section will only be enabled if the number of the user's capabilities exceeds their number of roles.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the capabilities. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enable"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "profile_user"
                    }
                ]
            }
        },
        {
            "name": "invite_user",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/user-new.php",
            "line": 111,
            "doc": {
                "summary": "Fires immediately after an existing user is invited to join the site, but before the notification is sent.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The invited user's ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Array containing role information for the invited user.",
                        "types": [
                            "array"
                        ],
                        "variable": "role"
                    },
                    {
                        "name": "param",
                        "content": "The key of the invitation.",
                        "types": [
                            "string"
                        ],
                        "variable": "newuser_key"
                    }
                ]
            }
        },
        {
            "name": "invited_user_email",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-admin\/user-new.php",
            "line": 165,
            "doc": {
                "summary": "Filters the contents of the email sent when an existing user is invited to join the site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The email address of the invited user.<br>    @type string $subject The subject of the email.<br>    @type string $message The content of the email.<br>    @type string $headers Headers.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "new_user_email"
                    },
                    {
                        "name": "param",
                        "content": "The invited user's ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Array containing role information for the invited user.",
                        "types": [
                            "array"
                        ],
                        "variable": "role"
                    },
                    {
                        "name": "param",
                        "content": "The key of the invitation.",
                        "types": [
                            "string"
                        ],
                        "variable": "newuser_key"
                    }
                ]
            }
        },
        {
            "name": "autocomplete_users_for_site_admins",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-admin\/user-new.php",
            "line": 316,
            "doc": {
                "summary": "Filters whether to enable user auto-complete for non-super admins in Multisite.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable auto-complete for non-super admins. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enable"
                    }
                ]
            }
        },
        {
            "name": "user_new_form_tag",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/user-new.php",
            "line": 437,
            "doc": {
                "summary": "Fires inside the adduser form tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "user_new_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-admin\/user-new.php",
            "line": 477,
            "doc": {
                "summary": "Fires at the end of the new user form.",
                "description": "<p>Passes a contextual string to make both types of new user forms uniquely targetable. Contexts are 'add-existing-user' (Multisite), and 'add-new-user' (single site and network admin).<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "A contextual string specifying which type of new user form the hook follows.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "users_have_additional_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-admin\/users.php",
            "line": 305,
            "doc": {
                "summary": "Filters whether the users being deleted have additional content associated with them outside of the `post_author` and `link_owner` relationships.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the users have additional content. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "users_have_additional_content"
                    },
                    {
                        "name": "param",
                        "content": "Array of IDs for users being deleted.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "userids"
                    }
                ]
            }
        },
        {
            "name": "delete_user_form",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-admin\/users.php",
            "line": 394,
            "doc": {
                "summary": "Fires at the end of the delete users form prior to the confirm button.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The <code>$userids<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "WP_User object for the current user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "current_user"
                    },
                    {
                        "name": "param",
                        "content": "Array of IDs for users being deleted.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "userids"
                    }
                ]
            }
        },
        {
            "name": "sidebar_admin_setup",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/widgets-form.php",
            "line": 38,
            "doc": {
                "summary": "Fires early before the Widgets administration screen loads, after scripts are enqueued.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ]
            }
        },
        {
            "name": "delete_widget",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-admin\/widgets-form.php",
            "line": 169,
            "doc": {
                "summary": "Fires immediately after a widget has been marked for deletion.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the widget marked for deletion.",
                        "types": [
                            "string"
                        ],
                        "variable": "widget_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the sidebar the widget was deleted from.",
                        "types": [
                            "string"
                        ],
                        "variable": "sidebar_id"
                    },
                    {
                        "name": "param",
                        "content": "ID base for the widget.",
                        "types": [
                            "string"
                        ],
                        "variable": "id_base"
                    }
                ]
            }
        },
        {
            "name": "widgets_admin_page",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/widgets-form.php",
            "line": 418,
            "doc": {
                "summary": "Fires before the Widgets administration page content loads.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "sidebar_admin_page",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-admin\/widgets-form.php",
            "line": 570,
            "doc": {
                "summary": "Fires after the available widgets and sidebars have loaded, before the admin footer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ]
            }
        },
        {
            "name": "set_comment_cookies",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-comments-post.php",
            "line": 55,
            "doc": {
                "summary": "Perform other actions when comment cookies are set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.6",
                        "description": "The <code>$cookies_consent<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's user object. The user may not exist.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's consent to store cookies.",
                        "types": [
                            "bool"
                        ],
                        "variable": "cookies_consent"
                    }
                ]
            }
        },
        {
            "name": "comment_post_redirect",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-comments-post.php",
            "line": 78,
            "doc": {
                "summary": "Filters the location URI to send the commenter after posting.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.5"
                    },
                    {
                        "name": "param",
                        "content": "The 'redirect_to' URI sent via $_POST.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "cron_reschedule_event_error",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-cron.php",
            "line": 149,
            "doc": {
                "summary": "Fires when an error happens rescheduling a cron event.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Action hook to execute when the event is run.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook"
                    },
                    {
                        "name": "param",
                        "content": "Event data.",
                        "types": [
                            "array"
                        ],
                        "variable": "v"
                    }
                ]
            }
        },
        {
            "name": "cron_unschedule_event_error",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-cron.php",
            "line": 176,
            "doc": {
                "summary": "Fires when an error happens unscheduling a cron event.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Action hook to execute when the event is run.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook"
                    },
                    {
                        "name": "param",
                        "content": "Event data.",
                        "types": [
                            "array"
                        ],
                        "variable": "v"
                    }
                ]
            }
        },
        {
            "name": "{$hook}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-cron.php",
            "line": 188,
            "doc": {
                "summary": "Fires scheduled events.",
                "tags": [
                    {
                        "name": "ignore",
                        "content": ""
                    },
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the hook that was scheduled to be fired.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook"
                    },
                    {
                        "name": "param",
                        "content": "The arguments to be passed to the hook.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_admin_bar_class",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/admin-bar.php",
            "line": 42,
            "doc": {
                "summary": "Filters the admin bar class to instantiate.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Admin bar class to use. Default 'WP_Admin_Bar'.",
                        "types": [
                            "string"
                        ],
                        "variable": "wp_admin_bar_class"
                    }
                ]
            }
        },
        {
            "name": "admin_bar_menu",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/admin-bar.php",
            "line": 95,
            "doc": {
                "summary": "Loads all necessary admin bar items.",
                "description": "<p>This is the hook used to add, remove, or manipulate admin bar items.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Admin_Bar instance, passed by reference.",
                        "types": [
                            "\\WP_Admin_Bar"
                        ],
                        "variable": "wp_admin_bar"
                    }
                ]
            }
        },
        {
            "name": "wp_before_admin_bar_render",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/admin-bar.php",
            "line": 102,
            "doc": {
                "summary": "Fires before the admin bar is rendered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "wp_after_admin_bar_render",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/admin-bar.php",
            "line": 111,
            "doc": {
                "summary": "Fires after the admin bar is rendered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "wp_admin_bar_show_site_icons",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/admin-bar.php",
            "line": 630,
            "doc": {
                "summary": "Filters whether to show the site icons in toolbar.",
                "description": "<p>Returning false to this hook is the recommended way to hide site icons in the toolbar.<br>A truthy return may have negative performance impact on large multisites.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether site icons should be shown in the toolbar. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show_site_icons"
                    }
                ]
            }
        },
        {
            "name": "show_admin_bar",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/admin-bar.php",
            "line": 1297,
            "doc": {
                "summary": "Filters whether to show the admin bar.",
                "description": "<p>Returning false to this hook is the recommended way to hide the admin bar.<br>The user's display preference is used for logged in users.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the admin bar should be shown. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show_admin_bar"
                    }
                ]
            }
        },
        {
            "name": "the_author",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/author-template.php",
            "line": 37,
            "doc": {
                "summary": "Filters the display name of the current post's author.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The author's display name.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "display_name"
                    }
                ]
            }
        },
        {
            "name": "the_modified_author",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/author-template.php",
            "line": 104,
            "doc": {
                "summary": "Filters the display name of the author who last edited the current post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The author's display name, empty string if unknown.",
                        "types": [
                            "string"
                        ],
                        "variable": "display_name"
                    }
                ]
            }
        },
        {
            "name": "get_the_author_{$field}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/author-template.php",
            "line": 189,
            "doc": {
                "summary": "Filters the value of the requested user metadata.",
                "description": "<p>The filter name is dynamic and depends on the $field parameter of the function.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.3.0",
                        "description": "The <code>$original_user_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The value of the metadata.",
                        "types": [
                            "string"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The user ID for the value.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The original user ID, as passed to the function.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "original_user_id"
                    }
                ]
            }
        },
        {
            "name": "the_author_{$field}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/author-template.php",
            "line": 216,
            "doc": {
                "summary": "Filters the value of the requested user metadata.",
                "description": "<p>The filter name is dynamic and depends on the $field parameter of the function.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The value of the metadata.",
                        "types": [
                            "string"
                        ],
                        "variable": "author_meta"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "the_author_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/author-template.php",
            "line": 256,
            "doc": {
                "summary": "Filters the author URL link HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The default rendered author HTML link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Author's URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "author_url"
                    },
                    {
                        "name": "param",
                        "content": "Author user data.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "authordata"
                    }
                ]
            }
        },
        {
            "name": "the_author_posts_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/author-template.php",
            "line": 333,
            "doc": {
                "summary": "Filters the link to the author page of the author of the current post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "author_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/author-template.php",
            "line": 391,
            "doc": {
                "summary": "Filters the URL to the author's page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The URL to the author's page.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "The author's ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "author_id"
                    },
                    {
                        "name": "param",
                        "content": "The author's nice name.",
                        "types": [
                            "string"
                        ],
                        "variable": "author_nicename"
                    }
                ]
            }
        },
        {
            "name": "wp_list_authors_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/author-template.php",
            "line": 468,
            "doc": {
                "summary": "Filters the query arguments for the list of all authors of the site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The query arguments for get_users().",
                        "types": [
                            "array"
                        ],
                        "variable": "query_args"
                    },
                    {
                        "name": "param",
                        "content": "The arguments passed to wp_list_authors() combined with the defaults.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_list_authors_post_counts_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/author-template.php",
            "line": 481,
            "doc": {
                "summary": "Filters whether to short-circuit performing the query for author post counts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of post counts, keyed by author ID.",
                        "types": [
                            "int[]",
                            "false"
                        ],
                        "variable": "post_counts"
                    },
                    {
                        "name": "param",
                        "content": "The arguments passed to wp_list_authors() combined with the defaults.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "is_multi_author",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/author-template.php",
            "line": 617,
            "doc": {
                "summary": "Filters whether the site has more than one author with published posts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether $is_multi_author should evaluate as true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_multi_author"
                    }
                ]
            }
        },
        {
            "name": "block_categories_all",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/block-editor.php",
            "line": 85,
            "doc": {
                "summary": "Filters the default array of categories for block types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of categories for block types.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "block_categories"
                    },
                    {
                        "name": "param",
                        "content": "The current block editor context.",
                        "types": [
                            "\\WP_Block_Editor_Context"
                        ],
                        "variable": "block_editor_context"
                    }
                ]
            }
        },
        {
            "name": "block_categories",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-editor.php",
            "line": 99,
            "doc": {
                "summary": "Filters the default array of categories for block types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.8.0",
                        "description": "Use the {@see 'block_categories_all'} filter instead."
                    },
                    {
                        "name": "param",
                        "content": "Array of categories for block types.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "block_categories"
                    },
                    {
                        "name": "param",
                        "content": "Post being loaded.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "allowed_block_types_all",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/block-editor.php",
            "line": 126,
            "doc": {
                "summary": "Filters the allowed block types for all editor types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of block type slugs, or boolean to enable\/disable all.<br>Default true (all registered block types supported).",
                        "types": [
                            "bool",
                            "string[]"
                        ],
                        "variable": "allowed_block_types"
                    },
                    {
                        "name": "param",
                        "content": "The current block editor context.",
                        "types": [
                            "\\WP_Block_Editor_Context"
                        ],
                        "variable": "block_editor_context"
                    }
                ]
            }
        },
        {
            "name": "allowed_block_types",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-editor.php",
            "line": 141,
            "doc": {
                "summary": "Filters the allowed block types for the editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.8.0",
                        "description": "Use the {@see 'allowed_block_types_all'} filter instead."
                    },
                    {
                        "name": "param",
                        "content": "Array of block type slugs, or boolean to enable\/disable all.<br>Default true (all registered block types supported)",
                        "types": [
                            "bool",
                            "string[]"
                        ],
                        "variable": "allowed_block_types"
                    },
                    {
                        "name": "param",
                        "content": "The post resource data.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "widget_types_to_hide_from_legacy_widget_block",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/block-editor.php",
            "line": 258,
            "endLine": 278,
            "doc": {
                "summary": "Filters the list of widget-type IDs that should **not** be offered by the Legacy Widget block.",
                "description": "<p>Returning an empty array will make all widgets available.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of excluded widget-type IDs.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "widgets"
                    }
                ]
            }
        },
        {
            "name": "block_editor_settings_all",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/block-editor.php",
            "line": 540,
            "doc": {
                "summary": "Filters the settings to pass to the block editor for all editor type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Default editor settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "editor_settings"
                    },
                    {
                        "name": "param",
                        "content": "The current block editor context.",
                        "types": [
                            "\\WP_Block_Editor_Context"
                        ],
                        "variable": "block_editor_context"
                    }
                ]
            }
        },
        {
            "name": "block_editor_settings",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-editor.php",
            "line": 554,
            "doc": {
                "summary": "Filters the settings to pass to the block editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.8.0",
                        "description": "Use the {@see 'block_editor_settings_all'} filter instead."
                    },
                    {
                        "name": "param",
                        "content": "Default editor settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "editor_settings"
                    },
                    {
                        "name": "param",
                        "content": "Post being edited.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "block_editor_rest_api_preload_paths",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/block-editor.php",
            "line": 584,
            "doc": {
                "summary": "Filters the array of REST API paths that will be used to preloaded common data for the block editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of paths to preload.",
                        "types": [
                            "(string|string[])[]"
                        ],
                        "variable": "preload_paths"
                    },
                    {
                        "name": "param",
                        "content": "The current block editor context.",
                        "types": [
                            "\\WP_Block_Editor_Context"
                        ],
                        "variable": "block_editor_context"
                    }
                ]
            }
        },
        {
            "name": "block_editor_preload_paths",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-editor.php",
            "line": 600,
            "doc": {
                "summary": "Filters the array of paths that will be preloaded.",
                "description": "<p>Preload common data by specifying an array of REST API paths that will be preloaded.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.8.0",
                        "description": "Use the {@see 'block_editor_rest_api_preload_paths'} filter instead."
                    },
                    {
                        "name": "param",
                        "content": "Array of paths to preload.",
                        "types": [
                            "(string|string[])[]"
                        ],
                        "variable": "preload_paths"
                    },
                    {
                        "name": "param",
                        "content": "Post being edited.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "selected_post"
                    }
                ]
            }
        },
        {
            "name": "should_load_remote_block_patterns",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/block-patterns.php",
            "line": 214,
            "doc": {
                "summary": "Filter to disable remote block patterns.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "",
                        "types": [
                            "bool"
                        ],
                        "variable": "should_load_remote"
                    }
                ]
            }
        },
        {
            "name": "block_default_classname",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/block-supports\/generated-classname.php",
            "line": 36,
            "doc": {
                "summary": "Filters the default block className for server rendered blocks.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The current applied classname.",
                        "types": [
                            "string"
                        ],
                        "variable": "class_name"
                    },
                    {
                        "name": "param",
                        "content": "The block name.",
                        "types": [
                            "string"
                        ],
                        "variable": "block_name"
                    }
                ]
            }
        },
        {
            "name": "default_wp_template_part_areas",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/block-template-utils.php",
            "line": 102,
            "doc": {
                "summary": "Filters the list of allowed template part area values.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of supported area objects.",
                        "types": [
                            "array"
                        ],
                        "variable": "default_area_definitions"
                    }
                ]
            }
        },
        {
            "name": "default_template_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/block-template-utils.php",
            "line": 189,
            "doc": {
                "summary": "Filters the list of template types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of template types, formatted as [ slug =&gt; [ title, description ] ].",
                        "types": [
                            "array"
                        ],
                        "variable": "default_template_types"
                    }
                ]
            }
        },
        {
            "name": "pre_get_block_templates",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-template-utils.php",
            "line": 895,
            "doc": {
                "summary": "Filters the block templates array before the query takes place.",
                "description": "<p>Return a non-null value to bypass the WordPress queries.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Return an array of block templates to short-circuit the default query, or null to allow WP to run it's normal queries.",
                        "types": [
                            "\\WP_Block_Template[]",
                            "null"
                        ],
                        "variable": "block_templates"
                    },
                    {
                        "name": "param",
                        "content": "{     Optional. Arguments to retrieve templates.<br>    @type array  $slug__in List of slugs to include.<br>    @type int    $wp_id Post ID of customized template.<br>    @type string $post_type Post type to get the templates for.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "query"
                    },
                    {
                        "name": "param",
                        "content": "wp_template or wp_template_part.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_type"
                    }
                ]
            }
        },
        {
            "name": "get_block_templates",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-template-utils.php",
            "line": 1005,
            "doc": {
                "summary": "Filters the array of queried block templates array after they've been fetched.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of found block templates.",
                        "types": [
                            "\\WP_Block_Template[]"
                        ],
                        "variable": "query_result"
                    },
                    {
                        "name": "param",
                        "content": "{     Optional. Arguments to retrieve templates.<br>    @type array  $slug__in List of slugs to include.<br>    @type int    $wp_id Post ID of customized template.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "query"
                    },
                    {
                        "name": "param",
                        "content": "wp_template or wp_template_part.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_type"
                    }
                ]
            }
        },
        {
            "name": "pre_get_block_template",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-template-utils.php",
            "line": 1031,
            "doc": {
                "summary": "Filters the block template object before the query takes place.",
                "description": "<p>Return a non-null value to bypass the WordPress queries.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Return block template object to short-circuit the default query, or null to allow WP to run its normal queries.",
                        "types": [
                            "\\WP_Block_Template",
                            "null"
                        ],
                        "variable": "block_template"
                    },
                    {
                        "name": "param",
                        "content": "Template unique identifier (example: theme_slug\/\/template_slug).",
                        "types": [
                            "string"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "Template type: <code>'wp_template'<\/code> or '<code>wp_template_part'<\/code>.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_type"
                    }
                ]
            }
        },
        {
            "name": "get_block_template",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-template-utils.php",
            "line": 1077,
            "doc": {
                "summary": "Filters the queried block template object after it's been fetched.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The found block template, or null if there isn't one.",
                        "types": [
                            "\\WP_Block_Template",
                            "null"
                        ],
                        "variable": "block_template"
                    },
                    {
                        "name": "param",
                        "content": "Template unique identifier (example: theme_slug\/\/template_slug).",
                        "types": [
                            "string"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "Template type: <code>'wp_template'<\/code> or '<code>wp_template_part'<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "template_type"
                    }
                ]
            }
        },
        {
            "name": "pre_get_block_file_template",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-template-utils.php",
            "line": 1105,
            "doc": {
                "summary": "Filters the block template object before the theme file discovery takes place.",
                "description": "<p>Return a non-null value to bypass the WordPress theme file discovery.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Return block template object to short-circuit the default query, or null to allow WP to run its normal queries.",
                        "types": [
                            "\\WP_Block_Template",
                            "null"
                        ],
                        "variable": "block_template"
                    },
                    {
                        "name": "param",
                        "content": "Template unique identifier (example: theme_slug\/\/template_slug).",
                        "types": [
                            "string"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "Template type: <code>'wp_template'<\/code> or '<code>wp_template_part'<\/code>.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_type"
                    }
                ]
            }
        },
        {
            "name": "get_block_file_template",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/block-template-utils.php",
            "line": 1139,
            "doc": {
                "summary": "Filters the block template object after it has been (potentially) fetched from the theme file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The found block template, or null if there is none.",
                        "types": [
                            "\\WP_Block_Template",
                            "null"
                        ],
                        "variable": "block_template"
                    },
                    {
                        "name": "param",
                        "content": "Template unique identifier (example: theme_slug\/\/template_slug).",
                        "types": [
                            "string"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "Template type: <code>'wp_template'<\/code> or '<code>wp_template_part'<\/code>.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_type"
                    }
                ]
            }
        },
        {
            "name": "block_core_navigation_render_fallback",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/blocks\/navigation.php",
            "line": 486,
            "doc": {
                "summary": "Filters the fallback experience for the Navigation block.",
                "description": "<p>Returning a falsey value will opt out of the fallback and cause the block not to render.<br>To customise the blocks provided return an array of blocks - these should be valid children of the <code>core\/navigation<\/code> block.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "default fallback blocks provided by the default block mechanic.",
                        "types": [
                            "array[]"
                        ],
                        "variable": ""
                    }
                ]
            }
        },
        {
            "name": "block_core_navigation_render_inner_blocks",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/blocks\/navigation.php",
            "line": 660,
            "doc": {
                "summary": "Filter navigation block $inner_blocks.",
                "description": "<p>Allows modification of a navigation block menu items.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "",
                        "types": [
                            "\\WP_Block_List"
                        ],
                        "variable": "inner_blocks"
                    }
                ]
            }
        },
        {
            "name": "render_block_core_template_part_post",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/blocks\/template-part.php",
            "line": 63,
            "doc": {
                "summary": "Fires when a block template part is loaded from a template post stored in the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The requested template part namespaced to the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_part_id"
                    },
                    {
                        "name": "param",
                        "content": "The block attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attributes"
                    },
                    {
                        "name": "param",
                        "content": "The template part post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "template_part_post"
                    },
                    {
                        "name": "param",
                        "content": "The template part content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "render_block_core_template_part_file",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/blocks\/template-part.php",
            "line": 90,
            "doc": {
                "summary": "Fires when a block template part is loaded from a template part in the theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The requested template part namespaced to the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_part_id"
                    },
                    {
                        "name": "param",
                        "content": "The block attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attributes"
                    },
                    {
                        "name": "param",
                        "content": "Absolute path to the template path.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_part_file_path"
                    },
                    {
                        "name": "param",
                        "content": "The template part content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "render_block_core_template_part_none",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/blocks\/template-part.php",
            "line": 101,
            "doc": {
                "summary": "Fires when a requested block template part does not exist in the database nor in the theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The requested template part namespaced to the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_part_id"
                    },
                    {
                        "name": "param",
                        "content": "The block attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attributes"
                    },
                    {
                        "name": "param",
                        "content": "Absolute path to the not found template path.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_part_file_path"
                    }
                ]
            }
        },
        {
            "name": "block_type_metadata",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/blocks.php",
            "line": 358,
            "doc": {
                "summary": "Filters the metadata provided for registering a block type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Metadata for registering a block type.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    }
                ]
            }
        },
        {
            "name": "block_type_metadata_settings",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/blocks.php",
            "line": 502,
            "endLine": 509,
            "doc": {
                "summary": "Filters the settings determined from the block type metadata.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of determined settings for registering a block type.",
                        "types": [
                            "array"
                        ],
                        "variable": "settings"
                    },
                    {
                        "name": "param",
                        "content": "Metadata provided for registering a block type.",
                        "types": [
                            "array"
                        ],
                        "variable": "metadata"
                    }
                ]
            }
        },
        {
            "name": "excerpt_allowed_wrapper_blocks",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/blocks.php",
            "line": 928,
            "doc": {
                "summary": "Filters the list of blocks that can be used as wrapper blocks, allowing excerpts to be generated from the `innerBlocks` of these wrappers.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The list of names of allowed wrapper blocks.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_wrapper_blocks"
                    }
                ]
            }
        },
        {
            "name": "excerpt_allowed_blocks",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/blocks.php",
            "line": 942,
            "doc": {
                "summary": "Filters the list of blocks that can contribute to the excerpt.",
                "description": "<p>If a dynamic block is added to this list, it must not generate another excerpt, as this will cause an infinite loop to occur.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The list of names of allowed blocks.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_blocks"
                    }
                ]
            }
        },
        {
            "name": "pre_render_block",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/blocks.php",
            "line": 1025,
            "doc": {
                "summary": "Allows render_block() to be short-circuited, by returning a non-null value.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.9.0",
                        "description": "The <code>$parent_block<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The pre-rendered content. Default null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "pre_render"
                    },
                    {
                        "name": "param",
                        "content": "The block being rendered.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_block"
                    },
                    {
                        "name": "param",
                        "content": "If this is a nested block, a reference to the parent block.",
                        "types": [
                            "\\WP_Block",
                            "null"
                        ],
                        "variable": "parent_block"
                    }
                ]
            }
        },
        {
            "name": "render_block_data",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/blocks.php",
            "line": 1042,
            "doc": {
                "summary": "Filters the block being rendered in render_block(), before it's processed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.9.0",
                        "description": "The <code>$parent_block<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The block being rendered.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_block"
                    },
                    {
                        "name": "param",
                        "content": "An un-modified copy of $parsed_block, as it appeared in the source content.",
                        "types": [
                            "array"
                        ],
                        "variable": "source_block"
                    },
                    {
                        "name": "param",
                        "content": "If this is a nested block, a reference to the parent block.",
                        "types": [
                            "\\WP_Block",
                            "null"
                        ],
                        "variable": "parent_block"
                    }
                ]
            }
        },
        {
            "name": "render_block_context",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/blocks.php",
            "line": 1068,
            "doc": {
                "summary": "Filters the default context provided to a rendered block.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.9.0",
                        "description": "The <code>$parent_block<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Default context.",
                        "types": [
                            "array"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Block being rendered, filtered by <code>render_block_data<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_block"
                    },
                    {
                        "name": "param",
                        "content": "If this is a nested block, a reference to the parent block.",
                        "types": [
                            "\\WP_Block",
                            "null"
                        ],
                        "variable": "parent_block"
                    }
                ]
            }
        },
        {
            "name": "block_parser_class",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/blocks.php",
            "line": 1091,
            "doc": {
                "summary": "Filter to allow plugins to replace the server-side block parser.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of block parser class.",
                        "types": [
                            "string"
                        ],
                        "variable": "parser_class"
                    }
                ]
            }
        },
        {
            "name": "query_loop_block_query_vars",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/blocks.php",
            "line": 1398,
            "doc": {
                "summary": "Filters the arguments which will be passed to `WP_Query` for the Query Loop Block.",
                "description": "<p>Anything to this filter should be compatible with the <code>WP_Query<\/code> API to form the query context which will be passed down to the Query Loop Block's children.<br>This can help, for example, to include additional settings or meta queries not directly supported by the core Query Loop Block, and extend its capabilities.<\/p> <p>Please note that this will only influence the query that will be rendered on the front-end. The editor preview is not affected by this filter. Also, worth noting that the editor preview uses the REST API, so, ideally, one should aim to provide attributes which are also compatible with the REST API, in order to be able to implement identical queries on both sides.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array containing parameters for <code>WP_Query<\/code> as parsed by the block context.",
                        "types": [
                            "array"
                        ],
                        "variable": "query"
                    },
                    {
                        "name": "param",
                        "content": "Block instance.",
                        "types": [
                            "\\WP_Block"
                        ],
                        "variable": "block"
                    },
                    {
                        "name": "param",
                        "content": "Current query's page.",
                        "types": [
                            "int"
                        ],
                        "variable": "page"
                    }
                ]
            }
        },
        {
            "name": "link_category",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/bookmark-template.php",
            "line": 288,
            "doc": {
                "summary": "Filters the category name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The category name.",
                        "types": [
                            "string"
                        ],
                        "variable": "cat_name"
                    }
                ]
            }
        },
        {
            "name": "wp_list_bookmarks",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/bookmark-template.php",
            "line": 329,
            "doc": {
                "summary": "Filters the bookmarks list before it is echoed or returned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML list of bookmarks.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    }
                ]
            }
        },
        {
            "name": "get_bookmarks",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/bookmark.php",
            "line": 174,
            "doc": {
                "summary": "Filters the returned list of bookmarks.",
                "description": "<p>The first time the hook is evaluated in this file, it returns the cached bookmarks list. The second evaluation returns a cached bookmarks list if the link category is passed but does not exist. The third evaluation returns the full cached results.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_bookmarks()"
                    },
                    {
                        "name": "param",
                        "content": "List of the cached bookmarks.",
                        "types": [
                            "array"
                        ],
                        "variable": "bookmarks"
                    },
                    {
                        "name": "param",
                        "content": "An array of bookmark query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "redirect_canonical",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/canonical.php",
            "line": 791,
            "doc": {
                "summary": "Filters the canonical redirect URL.",
                "description": "<p>Returning false to this filter will cancel the redirect.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The redirect URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "redirect_url"
                    },
                    {
                        "name": "param",
                        "content": "The requested URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "requested_url"
                    }
                ]
            }
        },
        {
            "name": "do_redirect_guess_404_permalink",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/canonical.php",
            "line": 902,
            "doc": {
                "summary": "Filters whether to attempt to guess a redirect URL for a 404 request.",
                "description": "<p>Returning a false value from the filter will disable the URL guessing and return early without performing a redirect.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to attempt to guess a redirect URL for a 404 request. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "do_redirect_guess"
                    }
                ]
            }
        },
        {
            "name": "pre_redirect_guess_404_permalink",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/canonical.php",
            "line": 917,
            "doc": {
                "summary": "Short-circuits the redirect URL guessing for 404 requests.",
                "description": "<p>Returning a non-null value from the filter will effectively short-circuit the URL guessing, returning the passed value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to short-circuit guessing the redirect for a 404.<br>Default null to continue with the URL guessing.",
                        "types": [
                            "null",
                            "string",
                            "false"
                        ],
                        "variable": "pre"
                    }
                ]
            }
        },
        {
            "name": "strict_redirect_guess_404_permalink",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/canonical.php",
            "line": 932,
            "doc": {
                "summary": "Filters whether to perform a strict guess for a 404 redirect.",
                "description": "<p>Returning a truthy value from the filter will redirect only exact post_name matches.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to perform a strict guess. Default false (loose guess).",
                        "types": [
                            "bool"
                        ],
                        "variable": "strict_guess"
                    }
                ]
            }
        },
        {
            "name": "auth_{$object_type}_meta_{$meta_key}_for_{$object_subtype}",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/capabilities.php",
            "line": 486,
            "doc": {
                "summary": "Filters whether the user is allowed to edit a specific meta key of a specific object type and subtype.",
                "description": "<p>The dynamic portions of the hook name, <code>$object_type<\/code>, <code>$meta_key<\/code>, and <code>$object_subtype<\/code>, refer to the metadata object type (comment, post, term or user), the meta key value, and the object subtype respectively.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.8"
                    },
                    {
                        "name": "param",
                        "content": "Whether the user can add the object meta. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allowed"
                    },
                    {
                        "name": "param",
                        "content": "The meta key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Capability name.",
                        "types": [
                            "string"
                        ],
                        "variable": "cap"
                    },
                    {
                        "name": "param",
                        "content": "Array of the user's capabilities.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "caps"
                    }
                ]
            }
        },
        {
            "name": "auth_{$object_type}_meta_{$meta_key}",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/capabilities.php",
            "line": 507,
            "doc": {
                "summary": "Filters whether the user is allowed to edit a specific meta key of a specific object type.",
                "description": "<p>Return true to have the mapped meta caps from <code>edit_{$object_type}<\/code> apply.<\/p> <p>The dynamic portion of the hook name, <code>$object_type<\/code> refers to the object type being filtered.<br>The dynamic portion of the hook name, <code>$meta_key<\/code>, refers to the meta key passed to map_meta_cap().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0",
                        "description": "As <code>auth_post_meta_{$meta_key}<\/code>."
                    },
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the user can add the object meta. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allowed"
                    },
                    {
                        "name": "param",
                        "content": "The meta key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Capability name.",
                        "types": [
                            "string"
                        ],
                        "variable": "cap"
                    },
                    {
                        "name": "param",
                        "content": "Array of the user's capabilities.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "caps"
                    }
                ]
            }
        },
        {
            "name": "auth_{$object_type}_{$object_subtype}_meta_{$meta_key}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/capabilities.php",
            "line": 533,
            "endLine": 538,
            "doc": {
                "summary": "Filters whether the user is allowed to edit meta for specific object types\/subtypes.",
                "description": "<p>Return true to have the mapped meta caps from <code>edit_{$object_type}<\/code> apply.<\/p> <p>The dynamic portion of the hook name, <code>$object_type<\/code> refers to the object type being filtered.<br>The dynamic portion of the hook name, <code>$object_subtype<\/code> refers to the object subtype being filtered.<br>The dynamic portion of the hook name, <code>$meta_key<\/code>, refers to the meta key passed to map_meta_cap().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "As <code>auth_post_{$post_type}_meta_{$meta_key}<\/code>."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Renamed from <code>auth_post_{$post_type}_meta_{$meta_key}<\/code> to <code>auth_{$object_type}_{$object_subtype}_meta_{$meta_key}<\/code>."
                    },
                    {
                        "name": "deprecated",
                        "content": "4.9.8",
                        "description": "Use {@see 'auth_{$object_type}<em>meta<\/em>{$meta_key}<em>for<\/em>{$object_subtype}'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Whether the user can add the object meta. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allowed"
                    },
                    {
                        "name": "param",
                        "content": "The meta key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Capability name.",
                        "types": [
                            "string"
                        ],
                        "variable": "cap"
                    },
                    {
                        "name": "param",
                        "content": "Array of the user's capabilities.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "caps"
                    }
                ]
            }
        },
        {
            "name": "map_meta_cap",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/capabilities.php",
            "line": 838,
            "doc": {
                "summary": "Filters the primitive capabilities required of the given user to satisfy the capability being checked.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Primitive capabilities required of the user.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "caps"
                    },
                    {
                        "name": "param",
                        "content": "Capability being checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "cap"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Adds context to the capability check, typically starting with an object ID.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "grant_super_admin",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/capabilities.php",
            "line": 1120,
            "doc": {
                "summary": "Fires before the user is granted Super Admin privileges.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user that is about to be granted Super Admin privileges.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "granted_super_admin",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/capabilities.php",
            "line": 1137,
            "doc": {
                "summary": "Fires after the user is granted Super Admin privileges.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user that was granted Super Admin privileges.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "revoke_super_admin",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/capabilities.php",
            "line": 1167,
            "doc": {
                "summary": "Fires before the user's Super Admin privileges are revoked.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user Super Admin privileges are being revoked from.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "revoked_super_admin",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/capabilities.php",
            "line": 1186,
            "doc": {
                "summary": "Fires after the user's Super Admin privileges are revoked.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user Super Admin privileges were revoked from.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "get_the_categories",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/category-template.php",
            "line": 98,
            "doc": {
                "summary": "Filters the array of categories to return for a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$post_id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of categories to return for the post.",
                        "types": [
                            "\\WP_Term[]"
                        ],
                        "variable": "categories"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "the_category_list",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/category-template.php",
            "line": 158,
            "doc": {
                "summary": "Filters the categories before building the category list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of the post's categories.",
                        "types": [
                            "\\WP_Term[]"
                        ],
                        "variable": "categories"
                    },
                    {
                        "name": "param",
                        "content": "ID of the post to retrieve categories for.<br>When <code>false<\/code>, defaults to the current post in the loop.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "the_category",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/category-template.php",
            "line": 230,
            "doc": {
                "summary": "Filters the category or list of categories.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "List of categories for the current post.",
                        "types": [
                            "string"
                        ],
                        "variable": "thelist"
                    },
                    {
                        "name": "param",
                        "content": "Separator used between the categories.",
                        "types": [
                            "string"
                        ],
                        "variable": "separator"
                    },
                    {
                        "name": "param",
                        "content": "How to display the category parents. Accepts 'multiple', 'single', or empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "parents"
                    }
                ]
            }
        },
        {
            "name": "list_cats",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/category-template.php",
            "line": 437,
            "doc": {
                "summary": "Filters a taxonomy drop-down display element.",
                "description": "<p>A variety of taxonomy drop-down display elements can be modified just prior to display via this filter. Filterable arguments include 'show_option_none', 'show_option_all', and various forms of the term name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_dropdown_categories()"
                    },
                    {
                        "name": "param",
                        "content": "Category name.",
                        "types": [
                            "string"
                        ],
                        "variable": "element"
                    },
                    {
                        "name": "param",
                        "content": "The category object, or null if there's no corresponding category.",
                        "types": [
                            "\\WP_Term",
                            "null"
                        ],
                        "variable": "category"
                    }
                ]
            }
        },
        {
            "name": "wp_dropdown_cats",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/category-template.php",
            "line": 479,
            "doc": {
                "summary": "Filters the taxonomy drop-down output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Arguments used to build the drop-down.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "wp_list_categories",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/category-template.php",
            "line": 681,
            "doc": {
                "summary": "Filters the HTML output of a taxonomy list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "An array or query string of taxonomy-listing arguments. See wp_list_categories() for information on accepted arguments.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_tag_cloud",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/category-template.php",
            "line": 778,
            "doc": {
                "summary": "Filters the tag cloud output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Tag cloud as a string or an array, depending on 'format' argument.",
                        "types": [
                            "string",
                            "string[]"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "An array of tag cloud arguments. See wp_tag_cloud() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "tag_cloud_sort",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/category-template.php",
            "line": 900,
            "doc": {
                "summary": "Filters how the items in a tag cloud are sorted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Ordered array of terms.",
                        "types": [
                            "\\WP_Term[]"
                        ],
                        "variable": "tags"
                    },
                    {
                        "name": "param",
                        "content": "An array of tag cloud arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_generate_tag_cloud_data",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/category-template.php",
            "line": 999,
            "doc": {
                "summary": "Filters the data used to generate the tag cloud.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of term data arrays for terms used to generate the tag cloud.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "tags_data"
                    }
                ]
            }
        },
        {
            "name": "wp_generate_tag_cloud",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/category-template.php",
            "line": 1054,
            "doc": {
                "summary": "Filters the generated output of a tag cloud.",
                "description": "<p>The filter is only evaluated if a true value is passed to the $filter argument in wp_generate_tag_cloud().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_generate_tag_cloud()"
                    },
                    {
                        "name": "param",
                        "content": "String containing the generated HTML tag cloud output or an array of tag links if the 'format' argument equals 'array'.",
                        "types": [
                            "string[]",
                            "string"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "An array of terms used in the tag cloud.",
                        "types": [
                            "\\WP_Term[]"
                        ],
                        "variable": "tags"
                    },
                    {
                        "name": "param",
                        "content": "An array of wp_generate_tag_cloud() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_the_tags",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/category-template.php",
            "line": 1190,
            "doc": {
                "summary": "Filters the array of tags for the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_the_terms()"
                    },
                    {
                        "name": "param",
                        "content": "Array of WP_Term objects on success, false if there are no terms or the post does not exist, WP_Error on failure.",
                        "types": [
                            "\\WP_Term[]",
                            "false",
                            "\\WP_Error"
                        ],
                        "variable": "terms"
                    }
                ]
            }
        },
        {
            "name": "the_tags",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/category-template.php",
            "line": 1219,
            "doc": {
                "summary": "Filters the tags list for a given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "List of tags.",
                        "types": [
                            "string"
                        ],
                        "variable": "tag_list"
                    },
                    {
                        "name": "param",
                        "content": "String to use before the tags.",
                        "types": [
                            "string"
                        ],
                        "variable": "before"
                    },
                    {
                        "name": "param",
                        "content": "String to use between the tags.",
                        "types": [
                            "string"
                        ],
                        "variable": "sep"
                    },
                    {
                        "name": "param",
                        "content": "String to use after the tags.",
                        "types": [
                            "string"
                        ],
                        "variable": "after"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "get_the_terms",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/category-template.php",
            "line": 1314,
            "doc": {
                "summary": "Filters the list of terms attached to the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of attached terms, or WP_Error on failure.",
                        "types": [
                            "\\WP_Term[]",
                            "\\WP_Error"
                        ],
                        "variable": "terms"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Name of the taxonomy.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "term_links-{$taxonomy}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/category-template.php",
            "line": 1375,
            "doc": {
                "summary": "Filters the term links for a given taxonomy.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>term_links-category<\/code><\/li> <li><code>term_links-post_tag<\/code><\/li> <li><code>term_links-post_format<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of term links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "links"
                    }
                ]
            }
        },
        {
            "name": "the_terms",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/category-template.php",
            "line": 1475,
            "doc": {
                "summary": "Filters the list of terms to display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "List of terms to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "term_list"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "String to use before the terms.",
                        "types": [
                            "string"
                        ],
                        "variable": "before"
                    },
                    {
                        "name": "param",
                        "content": "String to use between the terms.",
                        "types": [
                            "string"
                        ],
                        "variable": "sep"
                    },
                    {
                        "name": "param",
                        "content": "String to use after the terms.",
                        "types": [
                            "string"
                        ],
                        "variable": "after"
                    }
                ]
            }
        },
        {
            "name": "get_categories_taxonomy",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/category.php",
            "line": 38,
            "doc": {
                "summary": "Filters the taxonomy used to retrieve terms when calling get_categories().",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy to retrieve terms from.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments. See get_terms().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_tags",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/category.php",
            "line": 311,
            "doc": {
                "summary": "Filters the array of term objects returned for the 'post_tag' taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of 'post_tag' term objects, a count thereof, or WP_Error if any of the taxonomies do not exist.",
                        "types": [
                            "\\WP_Term[]",
                            "int",
                            "\\WP_Error"
                        ],
                        "variable": "tags"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments. @see get_terms()",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "category_description",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-walker-category.php",
            "line": 125,
            "doc": {
                "summary": "Filters the category description for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Category description.",
                        "types": [
                            "string"
                        ],
                        "variable": "description"
                    },
                    {
                        "name": "param",
                        "content": "Category object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "category"
                    }
                ]
            }
        },
        {
            "name": "category_list_link_attributes",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/class-walker-category.php",
            "line": 144,
            "doc": {
                "summary": "Filters the HTML attributes applied to a category list item's anchor element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "{     The HTML attributes applied to the list item's <code>&lt;a&gt;<\/code> element, empty strings are ignored.<br>    @type string $href  The href attribute.<br>    @type string $title The title attribute.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    },
                    {
                        "name": "param",
                        "content": "Term data object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "category"
                    },
                    {
                        "name": "param",
                        "content": "Depth of category, used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "ID of the current category.",
                        "types": [
                            "int"
                        ],
                        "variable": "current_object_id"
                    }
                ]
            }
        },
        {
            "name": "category_css_class",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-walker-category.php",
            "line": 241,
            "doc": {
                "summary": "Filters the list of CSS classes to include with each category in the list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_list_categories()"
                    },
                    {
                        "name": "param",
                        "content": "An array of CSS classes to be applied to each list item.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "css_classes"
                    },
                    {
                        "name": "param",
                        "content": "Category data object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "category"
                    },
                    {
                        "name": "param",
                        "content": "Depth of page, used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    },
                    {
                        "name": "param",
                        "content": "An array of wp_list_categories() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_submenu_css_class",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-walker-nav-menu.php",
            "line": 75,
            "doc": {
                "summary": "Filters the CSS class(es) applied to a menu list element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of the CSS classes that are applied to the menu <code>&lt;ul&gt;<\/code> element.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "classes"
                    },
                    {
                        "name": "param",
                        "content": "An object of <code>wp_nav_menu()<\/code> arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Depth of menu item. Used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_item_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-walker-nav-menu.php",
            "line": 145,
            "doc": {
                "summary": "Filters the arguments for a single nav menu item.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An object of wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Menu item data object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "menu_item"
                    },
                    {
                        "name": "param",
                        "content": "Depth of menu item. Used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_css_class",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-walker-nav-menu.php",
            "line": 158,
            "doc": {
                "summary": "Filters the CSS classes applied to a menu item's list item element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$depth<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Array of the CSS classes that are applied to the menu item's <code>&lt;li&gt;<\/code> element.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "classes"
                    },
                    {
                        "name": "param",
                        "content": "The current menu item object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "menu_item"
                    },
                    {
                        "name": "param",
                        "content": "An object of wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Depth of menu item. Used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_item_id",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-walker-nav-menu.php",
            "line": 172,
            "doc": {
                "summary": "Filters the ID attribute applied to a menu item's list item element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.1"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$depth<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The ID attribute applied to the menu item's <code>&lt;li&gt;<\/code> element.",
                        "types": [
                            "string"
                        ],
                        "variable": "menu_item_id"
                    },
                    {
                        "name": "param",
                        "content": "The current menu item.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "menu_item"
                    },
                    {
                        "name": "param",
                        "content": "An object of wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Depth of menu item. Used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_link_attributes",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-walker-nav-menu.php",
            "line": 217,
            "doc": {
                "summary": "Filters the HTML attributes applied to a menu item's anchor element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$depth<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "{     The HTML attributes applied to the menu item's <code>&lt;a&gt;<\/code> element, empty strings are ignored.<br>    @type string $title        Title attribute.<br>    @type string $target       Target attribute.<br>    @type string $rel          The rel attribute.<br>    @type string $href         The href attribute.<br>    @type string $aria-current The aria-current attribute.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    },
                    {
                        "name": "param",
                        "content": "The current menu item object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "menu_item"
                    },
                    {
                        "name": "param",
                        "content": "An object of wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Depth of menu item. Used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_item_title",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-walker-nav-menu.php",
            "line": 240,
            "doc": {
                "summary": "Filters a menu item's title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The menu item's title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "The current menu item object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "menu_item"
                    },
                    {
                        "name": "param",
                        "content": "An object of wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Depth of menu item. Used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    }
                ]
            }
        },
        {
            "name": "walker_nav_menu_start_el",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-walker-nav-menu.php",
            "line": 262,
            "doc": {
                "summary": "Filters a menu item's starting output.",
                "description": "<p>The menu item's starting output only includes <code>$args-&gt;before<\/code>, the opening <code>&lt;a&gt;<\/code>, the menu item's title, the closing <code>&lt;\/a&gt;<\/code>, and <code>$args-&gt;after<\/code>. Currently, there is no filter for modifying the opening and closing <code>&lt;li&gt;<\/code> for a menu item.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The menu item's starting HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "item_output"
                    },
                    {
                        "name": "param",
                        "content": "Menu item data object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "menu_item"
                    },
                    {
                        "name": "param",
                        "content": "Depth of menu item. Used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    },
                    {
                        "name": "param",
                        "content": "An object of wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "list_pages",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-walker-page-dropdown.php",
            "line": 91,
            "doc": {
                "summary": "Filters the page title when creating an HTML drop-down list of pages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Page title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Page data object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "page"
                    }
                ]
            }
        },
        {
            "name": "page_css_class",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/class-walker-page.php",
            "line": 158,
            "doc": {
                "summary": "Filters the list of CSS classes to include with each page item in the list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_list_pages()"
                    },
                    {
                        "name": "param",
                        "content": "An array of CSS classes to be applied to each list item.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "css_class"
                    },
                    {
                        "name": "param",
                        "content": "Page data object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "page"
                    },
                    {
                        "name": "param",
                        "content": "Depth of page, used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "ID of the current page.",
                        "types": [
                            "int"
                        ],
                        "variable": "current_page_id"
                    }
                ]
            }
        },
        {
            "name": "page_menu_link_attributes",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/class-walker-page.php",
            "line": 189,
            "doc": {
                "summary": "Filters the HTML attributes applied to a page menu item's anchor element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "{     The HTML attributes applied to the menu item's <code>&lt;a&gt;<\/code> element, empty strings are ignored.<br>    @type string $href         The href attribute.<br>    @type string $aria-current The aria-current attribute.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    },
                    {
                        "name": "param",
                        "content": "Page data object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "page"
                    },
                    {
                        "name": "param",
                        "content": "Depth of page, used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "depth"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "ID of the current page.",
                        "types": [
                            "int"
                        ],
                        "variable": "current_page_id"
                    }
                ]
            }
        },
        {
            "name": "admin_bar_init",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/class-wp-admin-bar.php",
            "line": 87,
            "doc": {
                "summary": "Fires after WP_Admin_Bar is initialized.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "add_admin_bar_menus",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/class-wp-admin-bar.php",
            "line": 664,
            "doc": {
                "summary": "Fires after menus are added to the menu bar.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "wp_create_application_password",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-application-passwords.php",
            "line": 138,
            "doc": {
                "summary": "Fires when an application password is created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "{     The details about the created password.<br>    @type string $uuid      The unique identifier for the application password.<br>    @type string $app_id    A UUID provided by the application to uniquely identify it.<br>    @type string $name      The name of the application password.<br>    @type string $password  A one-way hash of the password.<br>    @type int    $created   Unix timestamp of when the password was created.<br>    @type null   $last_used Null.<br>    @type null   $last_ip   Null.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "new_item"
                    },
                    {
                        "name": "param",
                        "content": "The unhashed generated application password.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_password"
                    },
                    {
                        "name": "param",
                        "content": "{     Arguments used to create the application password.<br>    @type string $name   The name of the application password.<br>    @type string $app_id A UUID provided by the application to uniquely identify it.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_update_application_password",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-application-passwords.php",
            "line": 274,
            "doc": {
                "summary": "Fires when an application password is updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The updated app password details.",
                        "types": [
                            "array"
                        ],
                        "variable": "item"
                    },
                    {
                        "name": "param",
                        "content": "The information to update.",
                        "types": [
                            "array"
                        ],
                        "variable": "update"
                    }
                ]
            }
        },
        {
            "name": "wp_delete_application_password",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-application-passwords.php",
            "line": 349,
            "doc": {
                "summary": "Fires when an application password is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The data about the application password.",
                        "types": [
                            "array"
                        ],
                        "variable": "item"
                    }
                ]
            }
        },
        {
            "name": "register_block_type_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-block-type.php",
            "line": 498,
            "doc": {
                "summary": "Filters the arguments for registering a block type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for registering a block type.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Block type name including namespace.",
                        "types": [
                            "string"
                        ],
                        "variable": "block_type"
                    }
                ]
            }
        },
        {
            "name": "render_block",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-block.php",
            "line": 293,
            "doc": {
                "summary": "Filters the content of a single block.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.9.0",
                        "description": "The <code>$instance<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The block content.",
                        "types": [
                            "string"
                        ],
                        "variable": "block_content"
                    },
                    {
                        "name": "param",
                        "content": "The full block, including name and attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "block"
                    },
                    {
                        "name": "param",
                        "content": "The block instance.",
                        "types": [
                            "\\WP_Block"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "render_block_{$this->name}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-block.php",
            "line": 308,
            "doc": {
                "summary": "Filters the content of a single block.",
                "description": "<p>The dynamic portion of the hook name, <code>$name<\/code>, refers to the block name, e.g. &quot;core\/paragraph&quot;.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.9.0",
                        "description": "The <code>$instance<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The block content.",
                        "types": [
                            "string"
                        ],
                        "variable": "block_content"
                    },
                    {
                        "name": "param",
                        "content": "The full block, including name and attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "block"
                    },
                    {
                        "name": "param",
                        "content": "The block instance.",
                        "types": [
                            "\\WP_Block"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "parse_comment_query",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-comment-query.php",
            "line": 348,
            "doc": {
                "summary": "Fires after the comment query vars have been parsed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Comment_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Comment_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "pre_get_comments",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-comment-query.php",
            "line": 394,
            "doc": {
                "summary": "Fires before comments are retrieved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Comment_Query (passed by reference).",
                        "types": [
                            "\\WP_Comment_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "comments_pre_query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-comment-query.php",
            "line": 434,
            "doc": {
                "summary": "Filters the comments data before the query takes place.",
                "description": "<p>Return a non-null value to bypass WordPress' default comment queries.<\/p> <p>The expected return type from this filter depends on the value passed in the request query vars:<\/p> <ul> <li>When <code>$this-&gt;query_vars['count']<\/code> is set, the filter should return the comment count as an integer.<\/li> <li>When <code>'ids' === $this-&gt;query_vars['fields']<\/code>, the filter should return an array of comment IDs.<\/li> <li>Otherwise the filter should return an array of WP_Comment objects.<\/li> <\/ul> <p>Note that if the filter returns an array of comment data, it will be assigned to the <code>comments<\/code> property of the current WP_Comment_Query instance.<\/p> <p>Filtering functions that require pagination information are encouraged to set the <code>found_comments<\/code> and <code>max_num_pages<\/code> properties of the WP_Comment_Query object, passed to the filter by reference. If WP_Comment_Query does not perform a database query, it will not have enough information to generate these values itself.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The returned array of comment data is assigned to the <code>comments<\/code> property of the current WP_Comment_Query instance."
                    },
                    {
                        "name": "param",
                        "content": "Return an array of comment data to short-circuit WP's comment query, the comment count as an integer if <code>$this-&gt;query_vars['count']<\/code> is set, or null to allow WP to run its normal queries.",
                        "types": [
                            "array",
                            "int",
                            "null"
                        ],
                        "variable": "comment_data"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Comment_Query instance, passed by reference.",
                        "types": [
                            "\\WP_Comment_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "the_comments",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-comment-query.php",
            "line": 518,
            "doc": {
                "summary": "Filters the comment query results.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of comments.",
                        "types": [
                            "\\WP_Comment[]"
                        ],
                        "variable": "_comments"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Comment_Query (passed by reference).",
                        "types": [
                            "\\WP_Comment_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "comments_clauses",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-comment-query.php",
            "line": 931,
            "doc": {
                "summary": "Filters the comment query clauses.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of comment query clauses.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "clauses"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Comment_Query (passed by reference).",
                        "types": [
                            "\\WP_Comment_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "found_comments_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-comment-query.php",
            "line": 1002,
            "doc": {
                "summary": "Filters the query used to retrieve found comment count.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "SQL query. Default 'SELECT FOUND_ROWS()'.",
                        "types": [
                            "string"
                        ],
                        "variable": "found_comments_query"
                    },
                    {
                        "name": "param",
                        "content": "The <code>WP_Comment_Query<\/code> instance.",
                        "types": [
                            "\\WP_Comment_Query"
                        ],
                        "variable": "comment_query"
                    }
                ]
            }
        },
        {
            "name": "customize_control_active",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-control.php",
            "line": 270,
            "doc": {
                "summary": "Filters response of WP_Customize_Control::active().",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the Customizer control is active.",
                        "types": [
                            "bool"
                        ],
                        "variable": "active"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Control instance.",
                        "types": [
                            "\\WP_Customize_Control"
                        ],
                        "variable": "control"
                    }
                ]
            }
        },
        {
            "name": "customize_render_control",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-control.php",
            "line": 403,
            "doc": {
                "summary": "Fires just before the current Customizer control is rendered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Control instance.",
                        "types": [
                            "\\WP_Customize_Control"
                        ],
                        "variable": "control"
                    }
                ]
            }
        },
        {
            "name": "customize_render_control_{$this->id}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-control.php",
            "line": 415,
            "doc": {
                "summary": "Fires just before a specific Customizer control is rendered.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;id<\/code>, refers to the control ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Control instance.",
                        "types": [
                            "\\WP_Customize_Control"
                        ],
                        "variable": "control"
                    }
                ]
            }
        },
        {
            "name": "customize_loaded_components",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 352,
            "doc": {
                "summary": "Filters the core Customizer components to load.",
                "description": "<p>This allows Core components to be excluded from being instantiated by filtering them out of the array. Note that this filter generally runs during the {@see 'plugins_loaded'} action, so it cannot be added in a theme.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Customize_Manager::__construct()"
                    },
                    {
                        "name": "param",
                        "content": "Array of core components to load.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "components"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "start_previewing_theme",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 697,
            "doc": {
                "summary": "Fires once the Customizer theme preview has started.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "stop_previewing_theme",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 735,
            "doc": {
                "summary": "Fires once the Customizer theme preview has stopped.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_changeset_branching",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 800,
            "doc": {
                "summary": "Filters whether or not changeset branching is\u00a0allowed.",
                "description": "<p>By default in core, when changeset branching is not allowed, changesets will operate linearly in that only one saved changeset will exist at a time (with a 'draft' or 'future' status). This makes the Customizer operate in a way that is similar to going to &quot;edit&quot; to one existing post: all users will be making changes to the same post, and autosave revisions will be made for that post.<\/p> <p>By contrast, when changeset branching is allowed, then the model is like users going to &quot;add new&quot; for a page and each user makes changes independently of each other since they are all operating on their own separate pages, each getting their own separate initial auto-drafts and then once initially saved, autosave revisions on top of that user's specific post.<\/p> <p>Since linear changesets are deemed to be more suitable for the majority of WordPress users, they are the default. For WordPress sites that have heavy site management in the Customizer by multiple users then branching changesets should be enabled by means of this filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether branching is allowed. If <code>false<\/code>, the default, then only one saved changeset exists at a time.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow_branching"
                    },
                    {
                        "name": "param",
                        "content": "Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "wp_customize"
                    }
                ]
            }
        },
        {
            "name": "customize_register",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 934,
            "doc": {
                "summary": "Fires once WordPress has loaded, allowing scripts and styles to be initialized.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_post_value_set_{$setting_id}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 1869,
            "doc": {
                "summary": "Announces when a specific setting's unsanitized post value has been set.",
                "description": "<p>Fires when the WP_Customize_Manager::set_post_value() method is called.<\/p> <p>The dynamic portion of the hook name, <code>$setting_id<\/code>, refers to the setting ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Unsanitized setting post value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_post_value_set",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 1885,
            "doc": {
                "summary": "Announces when any setting's unsanitized post value has been set.",
                "description": "<p>Fires when the WP_Customize_Manager::set_post_value() method is called.<\/p> <p>This is useful for <code>WP_Customize_Setting<\/code> instances to watch in order to update a cached previewed value.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Setting ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "setting_id"
                    },
                    {
                        "name": "param",
                        "content": "Unsanitized setting post value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_preview_init",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 1946,
            "doc": {
                "summary": "Fires once the Customizer preview has initialized and JavaScript settings have been printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_save_response",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 2602,
            "doc": {
                "summary": "Filters response data for a successful customize_save Ajax request.",
                "description": "<p>This filter does not apply if there was a nonce or authentication failure.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Additional information passed back to the 'saved' event on <code>wp.customize<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_save_validation_before",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 2770,
            "doc": {
                "summary": "Fires before save validation happens.",
                "description": "<p>Plugins can add just-in-time {@see 'customize<em>validate<\/em>{$this-&gt;ID}'} filters at this point to catch any settings registered after <code>customize_register<\/code>.<br>The dynamic portion of the hook name, <code>$this-&gt;ID<\/code> refers to the setting ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_changeset_save_data",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 2895,
            "doc": {
                "summary": "Filters the settings' data that will be persisted into the changeset.",
                "description": "<p>Plugins may amend additional data (such as additional meta for settings) into the changeset with this filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Updated changeset data, mapping setting IDs to arrays containing a $value item and optionally other metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "{     Filter context.<br>    @type string               $uuid          Changeset UUID.<br>    @type string               $title         Requested title for the changeset post.<br>    @type string               $status        Requested status for the changeset post.<br>    @type string               $date_gmt      Requested date for the changeset post in MySQL format and GMT timezone.<br>    @type int|false            $post_id       Post ID for the changeset, or false if it doesn't exist yet.<br>    @type array                $previous_data Previous data contained in the changeset.<br>    @type WP_Customize_Manager $manager       Manager instance.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "customize_save",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 3538,
            "doc": {
                "summary": "Fires once the theme has switched in the Customizer, but before settings have been saved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_save_after",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 3591,
            "doc": {
                "summary": "Fires after Customize settings have been saved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_dynamic_setting_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 3822,
            "doc": {
                "summary": "Filters a dynamic setting's constructor args.",
                "description": "<p>For a dynamic setting to be registered, this filter must be employed to override the default false value with an array of args to pass to the WP_Customize_Setting constructor.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The arguments to the WP_Customize_Setting constructor.",
                        "types": [
                            "false",
                            "array"
                        ],
                        "variable": "setting_args"
                    },
                    {
                        "name": "param",
                        "content": "ID for dynamic setting, usually coming from <code>$_POST['customized']<\/code>.",
                        "types": [
                            "string"
                        ],
                        "variable": "setting_id"
                    }
                ]
            }
        },
        {
            "name": "customize_dynamic_setting_class",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 3836,
            "doc": {
                "summary": "Allow non-statically created settings to be constructed with custom WP_Customize_Setting subclass.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting or a subclass.",
                        "types": [
                            "string"
                        ],
                        "variable": "setting_class"
                    },
                    {
                        "name": "param",
                        "content": "ID for dynamic setting, usually coming from <code>$_POST['customized']<\/code>.",
                        "types": [
                            "string"
                        ],
                        "variable": "setting_id"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting or a subclass.",
                        "types": [
                            "array"
                        ],
                        "variable": "setting_args"
                    }
                ]
            }
        },
        {
            "name": "customize_allowed_urls",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 4655,
            "doc": {
                "summary": "Filters the list of URLs allowed to be clicked and followed in the Customizer preview.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of allowed URLs.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_urls"
                    }
                ]
            }
        },
        {
            "name": "customize_refresh_nonces",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 4790,
            "doc": {
                "summary": "Filters nonces for Customizer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of refreshed nonces for save and preview actions.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "nonces"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_previewable_devices",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 5040,
            "doc": {
                "summary": "Filters the available devices to allow previewing in the Customizer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Customize_Manager::get_previewable_devices()"
                    },
                    {
                        "name": "param",
                        "content": "List of devices with labels and default setting.",
                        "types": [
                            "array"
                        ],
                        "variable": "devices"
                    }
                ]
            }
        },
        {
            "name": "customize_load_themes",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-customize-manager.php",
            "line": 5968,
            "doc": {
                "summary": "Filters the theme data loaded in the customizer.",
                "description": "<p>This allows theme data to be loading from an external source, or modification of data loaded from <code>wp_prepare_themes_for_js()<\/code> or WordPress.org via <code>themes_api()<\/code>.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_prepare_themes_for_js()"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\themes_api()"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Customize_Manager::__construct()"
                    },
                    {
                        "name": "param",
                        "content": "Nested array or object of theme data.",
                        "types": [
                            "array",
                            "\\stdClass"
                        ],
                        "variable": "themes"
                    },
                    {
                        "name": "param",
                        "content": "List of arguments, such as page, search term, and tags to query for.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Instance of Customize manager.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "manager"
                    }
                ]
            }
        },
        {
            "name": "customize_nav_menu_available_items",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-customize-nav-menus.php",
            "line": 301,
            "doc": {
                "summary": "Filters the available menu items.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The array of menu items.",
                        "types": [
                            "array"
                        ],
                        "variable": "items"
                    },
                    {
                        "name": "param",
                        "content": "The object type.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    },
                    {
                        "name": "param",
                        "content": "The object name.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_name"
                    },
                    {
                        "name": "param",
                        "content": "The current page number.",
                        "types": [
                            "int"
                        ],
                        "variable": "page"
                    }
                ]
            }
        },
        {
            "name": "customize_nav_menu_searched_items",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-nav-menus.php",
            "line": 474,
            "doc": {
                "summary": "Filters the available menu items during a search request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The array of menu items.",
                        "types": [
                            "array"
                        ],
                        "variable": "items"
                    },
                    {
                        "name": "param",
                        "content": "Includes 'pagenum' and 's' (search) arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "customize_nav_menu_available_item_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-nav-menus.php",
            "line": 927,
            "doc": {
                "summary": "Filters the available menu item types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Each array item now includes a <code>$type_label<\/code> in addition to <code>$title<\/code>, <code>$type<\/code>, and <code>$object<\/code>."
                    },
                    {
                        "name": "param",
                        "content": "Navigation menu item types.",
                        "types": [
                            "array"
                        ],
                        "variable": "item_types"
                    }
                ]
            }
        },
        {
            "name": "customize_panel_active",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-panel.php",
            "line": 195,
            "doc": {
                "summary": "Filters response of WP_Customize_Panel::active().",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the Customizer panel is active.",
                        "types": [
                            "bool"
                        ],
                        "variable": "active"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Panel instance.",
                        "types": [
                            "\\WP_Customize_Panel"
                        ],
                        "variable": "panel"
                    }
                ]
            }
        },
        {
            "name": "customize_render_panel",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-panel.php",
            "line": 282,
            "doc": {
                "summary": "Fires before rendering a Customizer panel.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Panel instance.",
                        "types": [
                            "\\WP_Customize_Panel"
                        ],
                        "variable": "panel"
                    }
                ]
            }
        },
        {
            "name": "customize_render_panel_{$this->id}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/class-wp-customize-panel.php",
            "line": 292,
            "doc": {
                "summary": "Fires before rendering a specific Customizer panel.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;id<\/code>, refers to the ID of the specific Customizer panel to be rendered.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    }
                ]
            }
        },
        {
            "name": "customize_section_active",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-section.php",
            "line": 211,
            "doc": {
                "summary": "Filters response of WP_Customize_Section::active().",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the Customizer section is active.",
                        "types": [
                            "bool"
                        ],
                        "variable": "active"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Section instance.",
                        "types": [
                            "\\WP_Customize_Section"
                        ],
                        "variable": "section"
                    }
                ]
            }
        },
        {
            "name": "customize_render_section",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-section.php",
            "line": 304,
            "doc": {
                "summary": "Fires before rendering a Customizer section.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Section instance.",
                        "types": [
                            "\\WP_Customize_Section"
                        ],
                        "variable": "section"
                    }
                ]
            }
        },
        {
            "name": "customize_render_section_{$this->id}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/class-wp-customize-section.php",
            "line": 313,
            "doc": {
                "summary": "Fires before rendering a specific Customizer section.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;id<\/code>, refers to the ID of the specific Customizer section to be rendered.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ]
            }
        },
        {
            "name": "customize_preview_{$this->id}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-setting.php",
            "line": 400,
            "doc": {
                "summary": "Fires when the WP_Customize_Setting::preview() method is called for settings not handled as theme_mods or options.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;id<\/code>, refers to the setting ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "setting"
                    }
                ]
            }
        },
        {
            "name": "customize_preview_{$this->type}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-setting.php",
            "line": 412,
            "doc": {
                "summary": "Fires when the WP_Customize_Setting::preview() method is called for settings not handled as theme_mods or options.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;type<\/code>, refers to the setting type.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "setting"
                    }
                ]
            }
        },
        {
            "name": "customize_save_{$id_base}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-customize-setting.php",
            "line": 539,
            "doc": {
                "summary": "Fires when the WP_Customize_Setting::save() method is called.",
                "description": "<p>The dynamic portion of the hook name, <code>$id_base<\/code> refers to the base slug of the setting name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "setting"
                    }
                ]
            }
        },
        {
            "name": "customize_sanitize_{$this->id}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-setting.php",
            "line": 576,
            "doc": {
                "summary": "Filters a Customize setting value in un-slashed form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the setting.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "setting"
                    }
                ]
            }
        },
        {
            "name": "customize_validate_{$this->id}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-customize-setting.php",
            "line": 612,
            "doc": {
                "summary": "Validates a Customize setting value.",
                "description": "<p>Plugins should amend the <code>$validity<\/code> object via its <code>WP_Error::add()<\/code> method.<\/p> <p>The dynamic portion of the hook name, <code>$this-&gt;ID<\/code>, refers to the setting ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Filtered from <code>true<\/code> to <code>WP_Error<\/code> when invalid.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "validity"
                    },
                    {
                        "name": "param",
                        "content": "Value of the setting.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "setting"
                    }
                ]
            }
        },
        {
            "name": "customize_update_{$this->type}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-setting.php",
            "line": 704,
            "doc": {
                "summary": "Fires when the WP_Customize_Setting::update() method is called for settings not handled as theme_mods or options.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;type<\/code>, refers to the type of setting.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the setting.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "setting"
                    }
                ]
            }
        },
        {
            "name": "customize_value_{$id_base}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-setting.php",
            "line": 768,
            "doc": {
                "summary": "Filters a Customize setting value not handled as a theme_mod or option.",
                "description": "<p>The dynamic portion of the hook name, <code>$id_base<\/code>, refers to the base slug of the setting name, initialized from <code>$this-&gt;id_data['base']<\/code>.<\/p> <p>For settings handled as theme_mods or options, see those corresponding functions for available hooks.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Added the <code>$this<\/code> setting instance as the second parameter."
                    },
                    {
                        "name": "param",
                        "content": "The setting default value. Default empty.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "default_value"
                    },
                    {
                        "name": "param",
                        "content": "The setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "setting"
                    }
                ]
            }
        },
        {
            "name": "customize_sanitize_js_{$this->id}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-setting.php",
            "line": 802,
            "doc": {
                "summary": "Filters a Customize setting value for use in JavaScript.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;id<\/code>, refers to the setting ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The setting value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "setting"
                    }
                ]
            }
        },
        {
            "name": "customizer_widgets_section_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-customize-widgets.php",
            "line": 475,
            "doc": {
                "summary": "Filters Customizer widget section arguments for a given sidebar.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of Customizer widget section arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "section_args"
                    },
                    {
                        "name": "param",
                        "content": "Customizer section ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "section_id"
                    },
                    {
                        "name": "param",
                        "content": "Sidebar ID.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "sidebar_id"
                    }
                ]
            }
        },
        {
            "name": "is_wide_widget_in_customizer",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-widgets.php",
            "line": 615,
            "doc": {
                "summary": "Filters whether the given widget is considered \"wide\".",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the widget is wide, Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_wide"
                    },
                    {
                        "name": "param",
                        "content": "Widget ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "widget_id"
                    }
                ]
            }
        },
        {
            "name": "widget_customizer_setting_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-customize-widgets.php",
            "line": 1006,
            "doc": {
                "summary": "Filters the common arguments supplied when constructing a Customizer setting.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Customize_Setting"
                    },
                    {
                        "name": "param",
                        "content": "Array of Customizer setting arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Widget setting ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "date_query_valid_columns",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-date-query.php",
            "line": 510,
            "doc": {
                "summary": "Filters the list of valid date query columns.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "Added 'user_registered' to the default recognized columns."
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Added 'registered' and 'last_updated' to the default recognized columns."
                    },
                    {
                        "name": "param",
                        "content": "An array of valid date query columns. Defaults are 'post_date', 'post_date_gmt', 'post_modified', 'post_modified_gmt', 'comment_date', 'comment_date_gmt', 'user_registered', 'registered', 'last_updated'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "valid_columns"
                    }
                ]
            }
        },
        {
            "name": "get_date_sql",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-date-query.php",
            "line": 567,
            "doc": {
                "summary": "Filters the date query WHERE clause.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "WHERE clause of the date query.",
                        "types": [
                            "string"
                        ],
                        "variable": "where"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Date_Query instance.",
                        "types": [
                            "\\WP_Date_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "wp_editor_settings",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 83,
            "doc": {
                "summary": "Filters the wp_editor() settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\_WP_Editors::parse_settings()"
                    },
                    {
                        "name": "param",
                        "content": "Array of editor arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "settings"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'. Accepts 'classic-block' when called from block editor's Classic block.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "media_buttons",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 236,
            "doc": {
                "summary": "Fires after the default media button(s) are displayed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "the_editor",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 263,
            "endLine": 269,
            "doc": {
                "summary": "Filters the HTML markup output that displays the editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Editor's HTML markup.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    }
                ]
            }
        },
        {
            "name": "the_editor_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 285,
            "doc": {
                "summary": "Filters the default editor content.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Default editor content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "The default editor for the current user.<br>Either 'html' or 'tinymce'.",
                        "types": [
                            "string"
                        ],
                        "variable": "default_editor"
                    }
                ]
            }
        },
        {
            "name": "quicktags_settings",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 357,
            "doc": {
                "summary": "Filters the Quicktags settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Quicktags settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "qtInit"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "teeny_mce_plugins",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 382,
            "endLine": 394,
            "doc": {
                "summary": "Filters the list of teenyMCE plugins.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "An array of teenyMCE plugins.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugins"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "mce_external_plugins",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 417,
            "doc": {
                "summary": "Filters the list of TinyMCE external plugins.",
                "description": "<p>The filter takes an associative array of external plugins for TinyMCE in the form 'plugin_name' =&gt; 'url'.<\/p> <p>The url should be absolute, and should include the js filename to be loaded. For example: 'myplugin' =&gt; '<a href=\"http:\/\/mysite.com\/wp-content\/plugins\/myfolder\/mce_plugin.js\">http:\/\/mysite.com\/wp-content\/plugins\/myfolder\/mce_plugin.js<\/a>'.<\/p> <p>If the external plugin adds a button, it should be added with one of the 'mce_buttons' filters.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "An array of external TinyMCE plugins.",
                        "types": [
                            "array"
                        ],
                        "variable": "external_plugins"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'. Accepts 'classic-block' when called from block editor's Classic block.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "tiny_mce_plugins",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 457,
            "doc": {
                "summary": "Filters the list of default TinyMCE plugins.",
                "description": "<p>The filter specifies which of the default plugins included in WordPress should be added to the TinyMCE instance.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "since",
                        "content": "5.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "An array of default TinyMCE plugins.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugins"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'. Accepts 'classic-block' when called from block editor's Classic block.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "mce_external_languages",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 483,
            "doc": {
                "summary": "Filters the translations loaded for external TinyMCE 3.x plugins.",
                "description": "<p>The filter takes an associative array ('plugin_name' =&gt; 'path') where 'path' is the include path to the file.<\/p> <p>The language file should follow the same format as wp_mce_translation(), and should define a variable ($strings) that holds all translated strings.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Translations for external TinyMCE plugins.",
                        "types": [
                            "array"
                        ],
                        "variable": "translations"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "mce_css",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 590,
            "doc": {
                "summary": "Filters the comma-delimited list of stylesheets to load in TinyMCE.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Comma-delimited list of stylesheets.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheets"
                    }
                ]
            }
        },
        {
            "name": "teeny_mce_buttons",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 628,
            "doc": {
                "summary": "Filters the list of teenyMCE buttons (Text tab).",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "An array of teenyMCE buttons.",
                        "types": [
                            "array"
                        ],
                        "variable": "mce_buttons"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "mce_buttons",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 670,
            "doc": {
                "summary": "Filters the first-row list of TinyMCE buttons (Visual tab).",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "First-row list of buttons.",
                        "types": [
                            "array"
                        ],
                        "variable": "mce_buttons"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'. Accepts 'classic-block' when called from block editor's Classic block.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "mce_buttons_2",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 699,
            "doc": {
                "summary": "Filters the second-row list of TinyMCE buttons (Visual tab).",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Second-row list of buttons.",
                        "types": [
                            "array"
                        ],
                        "variable": "mce_buttons_2"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'. Accepts 'classic-block' when called from block editor's Classic block.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "mce_buttons_3",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 711,
            "doc": {
                "summary": "Filters the third-row list of TinyMCE buttons (Visual tab).",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Third-row list of buttons.",
                        "types": [
                            "array"
                        ],
                        "variable": "mce_buttons_3"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'. Accepts 'classic-block' when called from block editor's Classic block.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "mce_buttons_4",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 723,
            "doc": {
                "summary": "Filters the fourth-row list of TinyMCE buttons (Visual tab).",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Fourth-row list of buttons.",
                        "types": [
                            "array"
                        ],
                        "variable": "mce_buttons_4"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'. Accepts 'classic-block' when called from block editor's Classic block.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "teeny_mce_before_init",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 794,
            "doc": {
                "summary": "Filters the teenyMCE config before init.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "An array with teenyMCE config.",
                        "types": [
                            "array"
                        ],
                        "variable": "mceInit"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "tiny_mce_before_init",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 807,
            "doc": {
                "summary": "Filters the TinyMCE config before init.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0",
                        "description": "The <code>$editor_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "An array with TinyMCE config.",
                        "types": [
                            "array"
                        ],
                        "variable": "mceInit"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'. Accepts 'classic-block' when called from block editor's Classic block.",
                        "types": [
                            "string"
                        ],
                        "variable": "editor_id"
                    }
                ]
            }
        },
        {
            "name": "wp_enqueue_editor",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 883,
            "endLine": 889,
            "doc": {
                "summary": "Fires when scripts and styles are enqueued for the editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array containing boolean values whether TinyMCE and Quicktags are being loaded.",
                        "types": [
                            "array"
                        ],
                        "variable": "to_load"
                    }
                ]
            }
        },
        {
            "name": "print_default_editor_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 1013,
            "doc": {
                "summary": "Fires when the editor scripts are loaded for later initialization, after all scripts and settings are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    }
                ]
            }
        },
        {
            "name": "wp_mce_translation",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 1478,
            "doc": {
                "summary": "Filters translated strings prepared for TinyMCE.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Key\/value pairs of strings.",
                        "types": [
                            "array"
                        ],
                        "variable": "mce_translation"
                    },
                    {
                        "name": "param",
                        "content": "Locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "mce_locale"
                    }
                ]
            }
        },
        {
            "name": "before_wp_tiny_mce",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 1611,
            "doc": {
                "summary": "Fires immediately before the TinyMCE settings are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "TinyMCE settings array.",
                        "types": [
                            "array"
                        ],
                        "variable": "mce_settings"
                    }
                ]
            }
        },
        {
            "name": "wp_tiny_mce_init",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 1650,
            "doc": {
                "summary": "Fires after tinymce.js is loaded, but before any TinyMCE editor instances are created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "TinyMCE settings array.",
                        "types": [
                            "array"
                        ],
                        "variable": "mce_settings"
                    }
                ]
            }
        },
        {
            "name": "after_wp_tiny_mce",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 1736,
            "doc": {
                "summary": "Fires after any core TinyMCE editor instances are created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "TinyMCE settings array.",
                        "types": [
                            "array"
                        ],
                        "variable": "mce_settings"
                    }
                ]
            }
        },
        {
            "name": "wp_link_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 1804,
            "doc": {
                "summary": "Filters the link query arguments.",
                "description": "<p>Allows modification of the link query arguments before querying.<\/p>",
                "tags": [
                    {
                        "name": "see",
                        "content": "for a full list of arguments",
                        "reference": "\\WP_Query"
                    },
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of WP_Query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "wp_link_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-editor.php",
            "line": 1849,
            "doc": {
                "summary": "Filters the link query results.",
                "description": "<p>Allows modification of the returned link query results.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "see",
                        "content": "'wp_link_query_args' filter"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of associative arrays of query results.<br>    @type array ...$0 {         @type int    $ID        Post ID.<br>        @type string $title     The trimmed, escaped post title.<br>        @type string $permalink Post permalink.<br>        @type string $info      A 'Y\/m\/d'-formatted date for 'post' post type,                                 the 'singular_name' post type label otherwise.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "results"
                    },
                    {
                        "name": "param",
                        "content": "An array of WP_Query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "embed_handler_html",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-embed.php",
            "line": 170,
            "doc": {
                "summary": "Filters the returned embed HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Embed::shortcode()"
                    },
                    {
                        "name": "param",
                        "content": "The HTML result of the shortcode, or false on failure.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "The embed URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "An array of shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    }
                ]
            }
        },
        {
            "name": "oembed_ttl",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-embed.php",
            "line": 247,
            "doc": {
                "summary": "Filters the oEmbed TTL value (time to live).",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Time to live (in seconds).",
                        "types": [
                            "int"
                        ],
                        "variable": "time"
                    },
                    {
                        "name": "param",
                        "content": "The attempted embed URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "An array of shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "embed_oembed_html",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-embed.php",
            "line": 289,
            "doc": {
                "summary": "Filters the cached oEmbed HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Embed::shortcode()"
                    },
                    {
                        "name": "param",
                        "content": "The cached HTML result, stored in post meta.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "cache"
                    },
                    {
                        "name": "param",
                        "content": "The attempted embed URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "An array of shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "embed_oembed_discover",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-embed.php",
            "line": 303,
            "doc": {
                "summary": "Filters whether to inspect the given URL for discoverable link tags.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The default value changed to true."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_oEmbed::discover()"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable <code>&lt;link&gt;<\/code> tag discovery. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enable"
                    }
                ]
            }
        },
        {
            "name": "embed_cache_oembed_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-embed.php",
            "line": 414,
            "doc": {
                "summary": "Filters the array of post types to cache oEmbed results for.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of post type names to cache oEmbed results for. Defaults to post types with <code>show_ui<\/code> set to true.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_types"
                    }
                ]
            }
        },
        {
            "name": "embed_maybe_make_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-embed.php",
            "line": 491,
            "doc": {
                "summary": "Filters the returned, maybe-linked embed URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The linked or original URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "The original URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "wp_error_added",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-error.php",
            "line": 209,
            "doc": {
                "summary": "Fires when an error is added to a WP_Error object.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Error code.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "code"
                    },
                    {
                        "name": "param",
                        "content": "Error message.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    },
                    {
                        "name": "param",
                        "content": "Error data. Might be empty.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "wp_error"
                    }
                ]
            }
        },
        {
            "name": "wp_should_handle_php_error",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-fatal-error-handler.php",
            "line": 123,
            "doc": {
                "summary": "Filters whether a given thrown error should be handled by the fatal error handler.",
                "description": "<p>This filter is only fired if the error is not already configured to be handled by WordPress core. As such, it exclusively allows adding further rules for which errors should be handled, but not removing existing ones.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the error should be handled by the fatal error handler.",
                        "types": [
                            "bool"
                        ],
                        "variable": "should_handle_error"
                    },
                    {
                        "name": "param",
                        "content": "Error information retrieved from <code>error_get_last()<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "error"
                    }
                ]
            }
        },
        {
            "name": "wp_php_error_message",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-fatal-error-handler.php",
            "line": 218,
            "doc": {
                "summary": "Filters the message that the default PHP error template displays.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML error message to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    },
                    {
                        "name": "param",
                        "content": "Error information retrieved from <code>error_get_last()<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "error"
                    }
                ]
            }
        },
        {
            "name": "wp_php_error_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-fatal-error-handler.php",
            "line": 229,
            "doc": {
                "summary": "Filters the arguments passed to {@see wp_die()} for the default PHP error template.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of arguments passed to <code>wp_die()<\/code>. By default these contain a 'response' key, and optionally 'link_url' and 'link_text' keys.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Error information retrieved from <code>error_get_last()<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "error"
                    }
                ]
            }
        },
        {
            "name": "wp_feed_cache_transient_lifetime",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-feed-cache-transient.php",
            "line": 67,
            "doc": {
                "summary": "Filters the transient lifetime of the feed cache.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Cache duration in seconds. Default is 43200 seconds (12 hours).",
                        "types": [
                            "int"
                        ],
                        "variable": "lifetime"
                    },
                    {
                        "name": "param",
                        "content": "Unique identifier for the cache object.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename"
                    }
                ]
            }
        },
        {
            "name": "wp_http_cookie_value",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http-cookie.php",
            "line": 243,
            "doc": {
                "summary": "Filters the header-encoded cookie value.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The cookie value.",
                        "types": [
                            "string"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The cookie name.",
                        "types": [
                            "string"
                        ],
                        "variable": "name"
                    }
                ]
            }
        },
        {
            "name": "http_api_curl",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-http-curl.php",
            "line": 231,
            "doc": {
                "summary": "Fires before the cURL request is executed.",
                "description": "<p>Cookies are not currently handled by the HTTP API. This action allows plugins to handle cookies themselves.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The cURL handle returned by curl_init() (passed by reference).",
                        "types": [
                            "resource"
                        ],
                        "variable": "handle"
                    },
                    {
                        "name": "param",
                        "content": "The HTTP request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "use_curl_transport",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http-curl.php",
            "line": 410,
            "doc": {
                "summary": "Filters whether cURL can be used as a transport for retrieving a URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the class can be used. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "use_class"
                    },
                    {
                        "name": "param",
                        "content": "An array of request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_http_accept_encoding",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-http-encoding.php",
            "line": 184,
            "doc": {
                "summary": "Filters the allowed encoding types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of what encoding types to accept and their priority values.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "URL of the HTTP request.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "HTTP request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_http_ixr_client_headers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-http-ixr-client.php",
            "line": 81,
            "doc": {
                "summary": "Filters the headers collection to be sent to the XML-RPC server.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of headers to be sent.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "headers"
                    }
                ]
            }
        },
        {
            "name": "pre_http_send_through_proxy",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-http-proxy.php",
            "line": 194,
            "doc": {
                "summary": "Filters whether to preempt sending the request through the proxy.",
                "description": "<p>Returning false will bypass the proxy; returning true will send the request through the proxy. Returning null bypasses the filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the request through the proxy. Default null.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "override"
                    },
                    {
                        "name": "param",
                        "content": "URL of the request.",
                        "types": [
                            "string"
                        ],
                        "variable": "uri"
                    },
                    {
                        "name": "param",
                        "content": "Associative array result of parsing the request URL with <code>parse_url()<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "check"
                    },
                    {
                        "name": "param",
                        "content": "Associative array result of parsing the site URL with <code>parse_url()<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "home"
                    }
                ]
            }
        },
        {
            "name": "requests-{$hook}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-http-requests-hooks.php",
            "line": 75,
            "doc": {
                "summary": "Transforms a native Request hook to a WordPress action.",
                "description": "<p>This action maps Requests internal hook to a native WordPress action.<\/p>",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "reference": "https:\/\/github.com\/WordPress\/Requests\/blob\/master\/docs\/hooks.md"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Parameters from Requests internal hook.",
                        "types": [
                            "array"
                        ],
                        "variable": "parameters"
                    },
                    {
                        "name": "param",
                        "content": "Request data in WP_Http format.",
                        "types": [
                            "array"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "URL to request.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "https_local_ssl_verify",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http-streams.php",
            "line": 108,
            "doc": {
                "summary": "Filters whether SSL should be verified for local HTTP API requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "The <code>$url<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Boolean to control whether to verify the SSL connection or path to an SSL certificate.",
                        "types": [
                            "bool",
                            "string"
                        ],
                        "variable": "ssl_verify"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "use_streams_transport",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http-streams.php",
            "line": 509,
            "doc": {
                "summary": "Filters whether streams can be used as a transport for retrieving a URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the class can be used. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "use_class"
                    },
                    {
                        "name": "param",
                        "content": "Request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "http_request_timeout",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 162,
            "doc": {
                "summary": "Filters the timeout value for an HTTP request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "The <code>$url<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Time in seconds until a request times out. Default 5.",
                        "types": [
                            "float"
                        ],
                        "variable": "timeout_value"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "http_request_redirection_count",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 172,
            "doc": {
                "summary": "Filters the number of redirects allowed during an HTTP request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "The <code>$url<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Number of redirects allowed. Default 5.",
                        "types": [
                            "int"
                        ],
                        "variable": "redirect_count"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "http_request_version",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 182,
            "doc": {
                "summary": "Filters the version of the HTTP protocol used in a request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "The <code>$url<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Version of HTTP used. Accepts '1.0' and '1.1'. Default '1.0'.",
                        "types": [
                            "string"
                        ],
                        "variable": "version"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "http_headers_useragent",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 192,
            "doc": {
                "summary": "Filters the user agent value sent with an HTTP request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "The <code>$url<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "WordPress user agent string.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_agent"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "http_request_reject_unsafe_urls",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 202,
            "doc": {
                "summary": "Filters whether to pass URLs through wp_http_validate_url() in an HTTP request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "The <code>$url<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Whether to pass URLs through wp_http_validate_url(). Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "pass_url"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "http_request_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 233,
            "doc": {
                "summary": "Filters the arguments used in an HTTP request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of HTTP request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "pre_http_request",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 258,
            "doc": {
                "summary": "Filters the preemptive return value of an HTTP request.",
                "description": "<p>Returning a non-false value from the filter will short-circuit the HTTP request and return early with that value. A filter should return one of:<\/p> <ul> <li>An array containing 'headers', 'body', 'response', 'cookies', and 'filename' elements<\/li> <li>A WP_Error instance<\/li> <li>boolean false to avoid short-circuiting the response<\/li> <\/ul> <p>Returning any other value may result in unexpected behavior.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "A preemptive return value of an HTTP request. Default false.",
                        "types": [
                            "false",
                            "array",
                            "\\WP_Error"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "HTTP request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "https_ssl_verify",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 378,
            "doc": {
                "summary": "Filters whether SSL should be verified for non-local requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "The <code>$url<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Boolean to control whether to verify the SSL connection or path to an SSL certificate.",
                        "types": [
                            "bool",
                            "string"
                        ],
                        "variable": "ssl_verify"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "http_api_debug",
            "type": "action",
            "numArgs": 5,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 421,
            "doc": {
                "summary": "Fires after an HTTP API response is received and before the response is returned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "HTTP response or WP_Error object.",
                        "types": [
                            "array",
                            "\\WP_Error"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Context under which the hook is fired.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "HTTP transport used.",
                        "types": [
                            "string"
                        ],
                        "variable": "class"
                    },
                    {
                        "name": "param",
                        "content": "HTTP request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "http_response",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 448,
            "doc": {
                "summary": "Filters a successful HTTP API response immediately before the response is returned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "HTTP response.",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "HTTP request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "http_api_transports",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 538,
            "doc": {
                "summary": "Filters which HTTP transports are available and in what order.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of HTTP transports to check. Default array contains 'curl' and 'streams', in that order.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "transports"
                    },
                    {
                        "name": "param",
                        "content": "HTTP request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The URL to request.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "block_local_requests",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-http.php",
            "line": 896,
            "doc": {
                "summary": "Filters whether to block local HTTP API requests.",
                "description": "<p>A local request is one to <code>localhost<\/code> or to the same host as the site itself.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to block local requests. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "block"
                    }
                ]
            }
        },
        {
            "name": "image_make_intermediate_size",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-image-editor-gd.php",
            "line": 518,
            "doc": {
                "summary": "Filters the name of the saved image file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the file.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename"
                    }
                ]
            }
        },
        {
            "name": "image_strip_meta",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-image-editor-imagick.php",
            "line": 394,
            "doc": {
                "summary": "Filters whether to strip metadata from images when they're resized.",
                "description": "<p>This filter only applies when resizing using the Imagick editor since GD always strips profiles by default.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to strip image metadata during resizing. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "strip_meta"
                    }
                ]
            }
        },
        {
            "name": "wp_editor_set_quality",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-image-editor.php",
            "line": 260,
            "doc": {
                "summary": "Filters the default image compression quality setting.",
                "description": "<p>Applies only during initial editor instantiation, or when set_quality() is run manually without the <code>$quality<\/code> argument.<\/p> <p>The WP_Image_Editor::set_quality() method has priority over the filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Quality level between 1 (low) and 100 (high).",
                        "types": [
                            "int"
                        ],
                        "variable": "quality"
                    },
                    {
                        "name": "param",
                        "content": "Image mime type.",
                        "types": [
                            "string"
                        ],
                        "variable": "mime_type"
                    }
                ]
            }
        },
        {
            "name": "jpeg_quality",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-image-editor.php",
            "line": 279,
            "doc": {
                "summary": "Filters the JPEG compression quality for backward-compatibility.",
                "description": "<p>Applies only during initial editor instantiation, or when set_quality() is run manually without the <code>$quality<\/code> argument.<\/p> <p>The WP_Image_Editor::set_quality() method has priority over the filter.<\/p> <p>The filter is evaluated under two contexts: 'image_resize', and 'edit_image', (when a JPEG image is saved to file).<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Quality level between 0 (low) and 100 (high) of the JPEG.",
                        "types": [
                            "int"
                        ],
                        "variable": "quality"
                    },
                    {
                        "name": "param",
                        "content": "Context of the filter.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "image_editor_output_format",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-image-editor.php",
            "line": 378,
            "doc": {
                "summary": "Filters the image editor output format mapping.",
                "description": "<p>Enables filtering the mime type used to save images. By default, the mapping array is empty, so the mime type matches the source image.<\/p>",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Image_Editor::get_output_format()"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of mime type mappings. Maps a source mime type to a new     destination mime type. Default empty array.<br>    @type string ...$0 The new mime type.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "output_format"
                    },
                    {
                        "name": "param",
                        "content": "Path to the image.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename"
                    },
                    {
                        "name": "param",
                        "content": "The source image mime type.",
                        "types": [
                            "string"
                        ],
                        "variable": "mime_type"
                    }
                ]
            }
        },
        {
            "name": "image_editor_default_mime_type",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-image-editor.php",
            "line": 399,
            "doc": {
                "summary": "Filters default mime type prior to getting the file extension.",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_get_mime_types()"
                    },
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Mime type string.",
                        "types": [
                            "string"
                        ],
                        "variable": "mime_type"
                    }
                ]
            }
        },
        {
            "name": "wp_image_maybe_exif_rotate",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-image-editor.php",
            "line": 506,
            "doc": {
                "summary": "Filters the `$orientation` value to correct it before rotating or to prevent rotating the image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "EXIF Orientation value as retrieved from the image file.",
                        "types": [
                            "int"
                        ],
                        "variable": "orientation"
                    },
                    {
                        "name": "param",
                        "content": "Path to the image file.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "switch_locale",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-locale-switcher.php",
            "line": 98,
            "doc": {
                "summary": "Fires when the locale is switched.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "since",
                        "content": "6.2.0",
                        "description": "The <code>$user_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The new locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "locale"
                    },
                    {
                        "name": "param",
                        "content": "User ID for context if available.",
                        "types": [
                            "false",
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "restore_previous_locale",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-locale-switcher.php",
            "line": 149,
            "doc": {
                "summary": "Fires when the locale is restored to the previous one.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The new locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "locale"
                    },
                    {
                        "name": "param",
                        "content": "The previous locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "previous_locale"
                    }
                ]
            }
        },
        {
            "name": "change_locale",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-locale-switcher.php",
            "line": 291,
            "doc": {
                "summary": "Fires when the locale is switched to or restored.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The new locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "locale"
                    }
                ]
            }
        },
        {
            "name": "get_meta_sql",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-meta-query.php",
            "line": 395,
            "doc": {
                "summary": "Filters the meta query's generated SQL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array containing the query's JOIN and WHERE clauses.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "sql"
                    },
                    {
                        "name": "param",
                        "content": "Array of meta queries.",
                        "types": [
                            "array"
                        ],
                        "variable": "queries"
                    },
                    {
                        "name": "param",
                        "content": "Type of meta. Possible values include but are not limited to 'post', 'comment', 'blog', 'term', and 'user'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "Primary table.",
                        "types": [
                            "string"
                        ],
                        "variable": "primary_table"
                    },
                    {
                        "name": "param",
                        "content": "Primary column ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "primary_id_column"
                    },
                    {
                        "name": "param",
                        "content": "The main query object that corresponds to the type, for example a <code>WP_Query<\/code>, <code>WP_User_Query<\/code>, or <code>WP_Site_Query<\/code>.",
                        "types": [
                            "object"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "meta_query_find_compatible_table_alias",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-meta-query.php",
            "line": 873,
            "doc": {
                "summary": "Filters the table alias identified as compatible with the current clause.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Table alias, or false if none was found.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "alias"
                    },
                    {
                        "name": "param",
                        "content": "First-order query clause.",
                        "types": [
                            "array"
                        ],
                        "variable": "clause"
                    },
                    {
                        "name": "param",
                        "content": "Parent of $clause.",
                        "types": [
                            "array"
                        ],
                        "variable": "parent_query"
                    },
                    {
                        "name": "param",
                        "content": "WP_Meta_Query object.",
                        "types": [
                            "\\WP_Meta_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "metadata_lazyloader_queued_objects",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-metadata-lazyloader.php",
            "line": 105,
            "doc": {
                "summary": "Fires after objects are added to the metadata lazy-load queue.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of object IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "object_ids"
                    },
                    {
                        "name": "param",
                        "content": "Type of object being queued.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    },
                    {
                        "name": "param",
                        "content": "The lazy-loader object.",
                        "types": [
                            "\\WP_Metadata_Lazyloader"
                        ],
                        "variable": "lazyloader"
                    }
                ]
            }
        },
        {
            "name": "parse_network_query",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-network-query.php",
            "line": 164,
            "doc": {
                "summary": "Fires after the network query vars have been parsed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Network_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Network_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "pre_get_networks",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-network-query.php",
            "line": 199,
            "doc": {
                "summary": "Fires before networks are retrieved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Network_Query (passed by reference).",
                        "types": [
                            "\\WP_Network_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "networks_pre_query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-network-query.php",
            "line": 233,
            "doc": {
                "summary": "Filters the network data before the query takes place.",
                "description": "<p>Return a non-null value to bypass WordPress' default network queries.<\/p> <p>The expected return type from this filter depends on the value passed in the request query vars:<\/p> <ul> <li>When <code>$this-&gt;query_vars['count']<\/code> is set, the filter should return the network count as an integer.<\/li> <li>When <code>'ids' === $this-&gt;query_vars['fields']<\/code>, the filter should return an array of network IDs.<\/li> <li>Otherwise the filter should return an array of WP_Network objects.<\/li> <\/ul> <p>Note that if the filter returns an array of network data, it will be assigned to the <code>networks<\/code> property of the current WP_Network_Query instance.<\/p> <p>Filtering functions that require pagination information are encouraged to set the <code>found_networks<\/code> and <code>max_num_pages<\/code> properties of the WP_Network_Query object, passed to the filter by reference. If WP_Network_Query does not perform a database query, it will not have enough information to generate these values itself.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The returned array of network data is assigned to the <code>networks<\/code> property of the current WP_Network_Query instance."
                    },
                    {
                        "name": "param",
                        "content": "Return an array of network data to short-circuit WP's network query, the network count as an integer if <code>$this-&gt;query_vars['count']<\/code> is set, or null to allow WP to run its normal queries.",
                        "types": [
                            "array",
                            "int",
                            "null"
                        ],
                        "variable": "network_data"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Network_Query instance, passed by reference.",
                        "types": [
                            "\\WP_Network_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "the_networks",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-network-query.php",
            "line": 309,
            "doc": {
                "summary": "Filters the network query results.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of WP_Network objects.",
                        "types": [
                            "\\WP_Network[]"
                        ],
                        "variable": "_networks"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Network_Query (passed by reference).",
                        "types": [
                            "\\WP_Network_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "networks_clauses",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-network-query.php",
            "line": 452,
            "doc": {
                "summary": "Filters the network query clauses.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of network query clauses.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "clauses"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Network_Query (passed by reference).",
                        "types": [
                            "\\WP_Network_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "found_networks_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-network-query.php",
            "line": 522,
            "doc": {
                "summary": "Filters the query used to retrieve found network count.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "SQL query. Default 'SELECT FOUND_ROWS()'.",
                        "types": [
                            "string"
                        ],
                        "variable": "found_networks_query"
                    },
                    {
                        "name": "param",
                        "content": "The <code>WP_Network_Query<\/code> instance.",
                        "types": [
                            "\\WP_Network_Query"
                        ],
                        "variable": "network_query"
                    }
                ]
            }
        },
        {
            "name": "pre_get_main_site_id",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-network.php",
            "line": 230,
            "doc": {
                "summary": "Filters the main site ID.",
                "description": "<p>Returning a positive integer will effectively short-circuit the function.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "If a positive integer is returned, it is interpreted as the main site ID.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "main_site_id"
                    },
                    {
                        "name": "param",
                        "content": "The network object for which the main site was detected.",
                        "types": [
                            "\\WP_Network"
                        ],
                        "variable": "network"
                    }
                ]
            }
        },
        {
            "name": "network_by_path_segments_count",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-network.php",
            "line": 380,
            "doc": {
                "summary": "Filters the number of path segments to consider when searching for a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The number of path segments to consider. WordPress by default looks at one path segment. The function default of null only makes sense when you know the requested path should match a network.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "segments"
                    },
                    {
                        "name": "param",
                        "content": "The requested domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "The requested path, in full.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "pre_get_network_by_path",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/class-wp-network.php",
            "line": 414,
            "doc": {
                "summary": "Determines a network by its domain and path.",
                "description": "<p>This allows one to short-circuit the default logic, perhaps by replacing it with a routine that is more optimal for your setup.<\/p> <p>Return null to avoid the short-circuit. Return false if no network can be found at the requested domain and path. Otherwise, return an object from wp_get_network().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Network value to return by path. Default null to continue retrieving the network.",
                        "types": [
                            "null",
                            "false",
                            "\\WP_Network"
                        ],
                        "variable": "network"
                    },
                    {
                        "name": "param",
                        "content": "The requested domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "The requested path, in full.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The suggested number of paths to consult.<br>Default null, meaning the entire path was to be consulted.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "segments"
                    },
                    {
                        "name": "param",
                        "content": "Array of paths to search for, based on <code>$path<\/code> and <code>$segments<\/code>.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "paths"
                    }
                ]
            }
        },
        {
            "name": "oembed_default_width",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-oembed-controller.php",
            "line": 33,
            "doc": {
                "summary": "Filters the maxwidth oEmbed parameter.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Maximum allowed width. Default 600.",
                        "types": [
                            "int"
                        ],
                        "variable": "maxwidth"
                    }
                ]
            }
        },
        {
            "name": "oembed_request_post_id",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-oembed-controller.php",
            "line": 130,
            "doc": {
                "summary": "Filters the determined post ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The requested URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "rest_oembed_ttl",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-oembed-controller.php",
            "line": 240,
            "doc": {
                "summary": "Filters the oEmbed TTL value (time to live).",
                "description": "<p>Similar to the {@see 'oembed_ttl'} filter, but for the REST API oEmbed proxy endpoint.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Time to live (in seconds).",
                        "types": [
                            "int"
                        ],
                        "variable": "time"
                    },
                    {
                        "name": "param",
                        "content": "The attempted embed URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "An array of embed request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "oembed_providers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-oembed.php",
            "line": 220,
            "doc": {
                "summary": "Filters the list of sanctioned oEmbed providers.",
                "description": "<p>Since WordPress 4.4, oEmbed discovery is enabled for all users and allows embedding of sanitized iframes. The providers in this list are sanctioned, meaning they are trusted and allowed to embed any content, such as iframes, videos, JavaScript, and arbitrary HTML.<\/p> <p>Supported providers:<\/p> <table> <thead> <tr> <th>Provider<\/th> <th>Flavor<\/th> <th>Since<\/th> <\/tr> <\/thead> <tbody> <tr> <td>Dailymotion<\/td> <td>dailymotion.com<\/td> <td>2.9.0<\/td> <\/tr> <tr> <td>Flickr<\/td> <td>flickr.com<\/td> <td>2.9.0<\/td> <\/tr> <tr> <td>Scribd<\/td> <td>scribd.com<\/td> <td>2.9.0<\/td> <\/tr> <tr> <td>Vimeo<\/td> <td>vimeo.com<\/td> <td>2.9.0<\/td> <\/tr> <tr> <td>WordPress.tv<\/td> <td>wordpress.tv<\/td> <td>2.9.0<\/td> <\/tr> <tr> <td>YouTube<\/td> <td>youtube.com\/watch<\/td> <td>2.9.0<\/td> <\/tr> <tr> <td>Crowdsignal<\/td> <td>polldaddy.com<\/td> <td>3.0.0<\/td> <\/tr> <tr> <td>SmugMug<\/td> <td>smugmug.com<\/td> <td>3.0.0<\/td> <\/tr> <tr> <td>YouTube<\/td> <td>youtu.be<\/td> <td>3.0.0<\/td> <\/tr> <tr> <td>Twitter<\/td> <td>twitter.com<\/td> <td>3.4.0<\/td> <\/tr> <tr> <td>Slideshare<\/td> <td>slideshare.net<\/td> <td>3.5.0<\/td> <\/tr> <tr> <td>SoundCloud<\/td> <td>soundcloud.com<\/td> <td>3.5.0<\/td> <\/tr> <tr> <td>Dailymotion<\/td> <td>dai.ly<\/td> <td>3.6.0<\/td> <\/tr> <tr> <td>Flickr<\/td> <td>flic.kr<\/td> <td>3.6.0<\/td> <\/tr> <tr> <td>Spotify<\/td> <td>spotify.com<\/td> <td>3.6.0<\/td> <\/tr> <tr> <td>Imgur<\/td> <td>imgur.com<\/td> <td>3.9.0<\/td> <\/tr> <tr> <td>Animoto<\/td> <td>animoto.com<\/td> <td>4.0.0<\/td> <\/tr> <tr> <td>Animoto<\/td> <td>video214.com<\/td> <td>4.0.0<\/td> <\/tr> <tr> <td>Issuu<\/td> <td>issuu.com<\/td> <td>4.0.0<\/td> <\/tr> <tr> <td>Mixcloud<\/td> <td>mixcloud.com<\/td> <td>4.0.0<\/td> <\/tr> <tr> <td>Crowdsignal<\/td> <td>poll.fm<\/td> <td>4.0.0<\/td> <\/tr> <tr> <td>TED<\/td> <td>ted.com<\/td> <td>4.0.0<\/td> <\/tr> <tr> <td>YouTube<\/td> <td>youtube.com\/playlist<\/td> <td>4.0.0<\/td> <\/tr> <tr> <td>Tumblr<\/td> <td>tumblr.com<\/td> <td>4.2.0<\/td> <\/tr> <tr> <td>Kickstarter<\/td> <td>kickstarter.com<\/td> <td>4.2.0<\/td> <\/tr> <tr> <td>Kickstarter<\/td> <td>kck.st<\/td> <td>4.2.0<\/td> <\/tr> <tr> <td>Cloudup<\/td> <td>cloudup.com<\/td> <td>4.3.0<\/td> <\/tr> <tr> <td>ReverbNation<\/td> <td>reverbnation.com<\/td> <td>4.4.0<\/td> <\/tr> <tr> <td>VideoPress<\/td> <td>videopress.com<\/td> <td>4.4.0<\/td> <\/tr> <tr> <td>Reddit<\/td> <td>reddit.com<\/td> <td>4.4.0<\/td> <\/tr> <tr> <td>Speaker Deck<\/td> <td>speakerdeck.com<\/td> <td>4.4.0<\/td> <\/tr> <tr> <td>Twitter<\/td> <td>twitter.com\/timelines<\/td> <td>4.5.0<\/td> <\/tr> <tr> <td>Twitter<\/td> <td>twitter.com\/moments<\/td> <td>4.5.0<\/td> <\/tr> <tr> <td>Twitter<\/td> <td>twitter.com\/user<\/td> <td>4.7.0<\/td> <\/tr> <tr> <td>Twitter<\/td> <td>twitter.com\/likes<\/td> <td>4.7.0<\/td> <\/tr> <tr> <td>Twitter<\/td> <td>twitter.com\/lists<\/td> <td>4.7.0<\/td> <\/tr> <tr> <td>Screencast<\/td> <td>screencast.com<\/td> <td>4.8.0<\/td> <\/tr> <tr> <td>Amazon<\/td> <td>amazon.com (com.mx, com.br, ca)<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Amazon<\/td> <td>amazon.de (fr, it, es, in, nl, ru, co.uk)<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Amazon<\/td> <td>amazon.co.jp (com.au)<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Amazon<\/td> <td>amazon.cn<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Amazon<\/td> <td>a.co<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Amazon<\/td> <td>amzn.to (eu, in, asia)<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Amazon<\/td> <td>z.cn<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Someecards<\/td> <td>someecards.com<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Someecards<\/td> <td>some.ly<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Crowdsignal<\/td> <td>survey.fm<\/td> <td>5.1.0<\/td> <\/tr> <tr> <td>TikTok<\/td> <td>tiktok.com<\/td> <td>5.4.0<\/td> <\/tr> <tr> <td>Pinterest<\/td> <td>pinterest.com<\/td> <td>5.9.0<\/td> <\/tr> <tr> <td>WolframCloud<\/td> <td>wolframcloud.com<\/td> <td>5.9.0<\/td> <\/tr> <tr> <td>Pocket Casts<\/td> <td>pocketcasts.com<\/td> <td>6.1.0<\/td> <\/tr> <tr> <td>Crowdsignal<\/td> <td>crowdsignal.net<\/td> <td>6.2.0<\/td> <\/tr> <\/tbody> <\/table> <p>No longer supported providers:<\/p> <table> <thead> <tr> <th>Provider<\/th> <th>Flavor<\/th> <th>Since<\/th> <th>Removed<\/th> <\/tr> <\/thead> <tbody> <tr> <td>Qik<\/td> <td>qik.com<\/td> <td>2.9.0<\/td> <td>3.9.0<\/td> <\/tr> <tr> <td>Viddler<\/td> <td>viddler.com<\/td> <td>2.9.0<\/td> <td>4.0.0<\/td> <\/tr> <tr> <td>Revision3<\/td> <td>revision3.com<\/td> <td>2.9.0<\/td> <td>4.2.0<\/td> <\/tr> <tr> <td>Blip<\/td> <td>blip.tv<\/td> <td>2.9.0<\/td> <td>4.4.0<\/td> <\/tr> <tr> <td>Rdio<\/td> <td>rdio.com<\/td> <td>3.6.0<\/td> <td>4.4.1<\/td> <\/tr> <tr> <td>Rdio<\/td> <td>rd.io<\/td> <td>3.6.0<\/td> <td>4.4.1<\/td> <\/tr> <tr> <td>Vine<\/td> <td>vine.co<\/td> <td>4.1.0<\/td> <td>4.9.0<\/td> <\/tr> <tr> <td>Photobucket<\/td> <td>photobucket.com<\/td> <td>2.9.0<\/td> <td>5.1.0<\/td> <\/tr> <tr> <td>Funny or Die<\/td> <td>funnyordie.com<\/td> <td>3.0.0<\/td> <td>5.1.0<\/td> <\/tr> <tr> <td>CollegeHumor<\/td> <td>collegehumor.com<\/td> <td>4.0.0<\/td> <td>5.3.1<\/td> <\/tr> <tr> <td>Hulu<\/td> <td>hulu.com<\/td> <td>2.9.0<\/td> <td>5.5.0<\/td> <\/tr> <tr> <td>Instagram<\/td> <td>instagram.com<\/td> <td>3.5.0<\/td> <td>5.5.2<\/td> <\/tr> <tr> <td>Instagram<\/td> <td>instagr.am<\/td> <td>3.5.0<\/td> <td>5.5.2<\/td> <\/tr> <tr> <td>Instagram TV<\/td> <td>instagram.com<\/td> <td>5.1.0<\/td> <td>5.5.2<\/td> <\/tr> <tr> <td>Instagram TV<\/td> <td>instagr.am<\/td> <td>5.1.0<\/td> <td>5.5.2<\/td> <\/tr> <tr> <td>Facebook<\/td> <td>facebook.com<\/td> <td>4.7.0<\/td> <td>5.5.2<\/td> <\/tr> <tr> <td>Meetup.com<\/td> <td>meetup.com<\/td> <td>3.9.0<\/td> <td>6.0.1<\/td> <\/tr> <tr> <td>Meetup.com<\/td> <td>meetu.ps<\/td> <td>3.9.0<\/td> <td>6.0.1<\/td> <\/tr> <\/tbody> <\/table>",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_oembed_add_provider()"
                    },
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of arrays containing data about popular oEmbed providers.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "providers"
                    }
                ]
            }
        },
        {
            "name": "pre_oembed_result",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-oembed.php",
            "line": 401,
            "doc": {
                "summary": "Filters the oEmbed result before any HTTP requests are made.",
                "description": "<p>This allows one to short-circuit the default logic, perhaps by replacing it with a routine that is more optimal for your setup.<\/p> <p>Returning a non-null value from the filter will effectively short-circuit retrieval and return the passed value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.3"
                    },
                    {
                        "name": "param",
                        "content": "The UNSANITIZED (and potentially unsafe) HTML that should be used to embed.<br>Default null to continue retrieving the result.",
                        "types": [
                            "null",
                            "string"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "The URL to the content that should be attempted to be embedded.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Optional. Additional arguments for retrieving embed HTML.<br>See wp_oembed_get() for accepted arguments. Default empty.",
                        "types": [
                            "string",
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "oembed_result",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-oembed.php",
            "line": 423,
            "doc": {
                "summary": "Filters the HTML returned by the oEmbed provider.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The returned oEmbed HTML (false if unsafe).",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "URL of the content to be embedded.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Optional. Additional arguments for retrieving embed HTML.<br>See wp_oembed_get() for accepted arguments. Default empty.",
                        "types": [
                            "string",
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "oembed_remote_get_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-oembed.php",
            "line": 450,
            "doc": {
                "summary": "Filters oEmbed remote get arguments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Http::request()"
                    },
                    {
                        "name": "param",
                        "content": "oEmbed remote get arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "URL to be inspected.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "oembed_linktypes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-oembed.php",
            "line": 466,
            "endLine": 473,
            "doc": {
                "summary": "Filters the link types that contain oEmbed provider URLs.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of oEmbed link types. Accepts 'application\/json+oembed', 'text\/xml+oembed', and 'application\/xml+oembed' (incorrect, used by at least Vimeo).",
                        "types": [
                            "string[]"
                        ],
                        "variable": "format"
                    }
                ]
            }
        },
        {
            "name": "oembed_fetch_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-oembed.php",
            "line": 546,
            "doc": {
                "summary": "Filters the oEmbed URL to be fetched.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>dnt<\/code> (Do Not Track) query parameter was added to all oEmbed provider URLs."
                    },
                    {
                        "name": "param",
                        "content": "URL of the oEmbed provider.",
                        "types": [
                            "string"
                        ],
                        "variable": "provider"
                    },
                    {
                        "name": "param",
                        "content": "URL of the content to be embedded.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Optional. Additional arguments for retrieving embed HTML.<br>See wp_oembed_get() for accepted arguments. Default empty.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "oembed_dataparse",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-oembed.php",
            "line": 731,
            "doc": {
                "summary": "Filters the returned oEmbed HTML.",
                "description": "<p>Use this filter to add support for custom data types, or to filter the result.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The returned oEmbed HTML.",
                        "types": [
                            "string"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "A data object result from an oEmbed provider.",
                        "types": [
                            "object"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The URL of the content to be embedded.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "register_post_type_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-post-type.php",
            "line": 442,
            "doc": {
                "summary": "Filters the arguments for registering a post type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for registering a post type.<br>See the register_post_type() function for accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Post type key.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "register_{$post_type}_post_type_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-post-type.php",
            "line": 462,
            "doc": {
                "summary": "Filters the arguments for registering a specific post type.",
                "description": "<p>The dynamic portion of the filter name, <code>$post_type<\/code>, refers to the post type key.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>register_post_post_type_args<\/code><\/li> <li><code>register_page_post_type_args<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for registering a post type.<br>See the register_post_type() function for accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Post type key.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "parse_query",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 1131,
            "doc": {
                "summary": "Fires after the main query vars have been parsed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "parse_tax_query",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 1372,
            "doc": {
                "summary": "Fires after taxonomy-related query vars have been parsed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "post_search_columns",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 1435,
            "doc": {
                "summary": "Filters the columns to search in a WP_Query search.",
                "description": "<p>The supported columns are <code>post_title<\/code>, <code>post_excerpt<\/code> and <code>post_content<\/code>.<br>They are all included by default.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of column names to be searched.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "search_columns"
                    },
                    {
                        "name": "param",
                        "content": "Text being searched.",
                        "types": [
                            "string"
                        ],
                        "variable": "search"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_Query instance.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "wp_query_search_exclusion_prefix",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 1451,
            "doc": {
                "summary": "Filters the prefix that indicates that a search term should be excluded from results.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The prefix. Default '-'. Returning an empty value disables exclusions.",
                        "types": [
                            "string"
                        ],
                        "variable": "exclusion_prefix"
                    }
                ]
            }
        },
        {
            "name": "wp_search_stopwords",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 1577,
            "doc": {
                "summary": "Filters stopwords used when parsing search terms.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of stopwords.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "stopwords"
                    }
                ]
            }
        },
        {
            "name": "set_404",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 1808,
            "doc": {
                "summary": "Fires after a 404 is triggered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "pre_get_posts",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 1870,
            "doc": {
                "summary": "Fires after the query variable object is created, but before the actual query is run.",
                "description": "<p>Note: If using conditional tags, use the method versions within the passed instance (e.g. $this-&gt;is_main_query() instead of is_main_query()). This is because the functions like is_main_query() test against the global $wp_query instance, not the passed one.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "wp_allow_query_attachment_by_filename",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 1885,
            "doc": {
                "summary": "Filters whether an attachment query should include filenames or not.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.3"
                    },
                    {
                        "name": "param",
                        "content": "Whether or not to include filenames.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow_query_attachment_by_filename"
                    }
                ]
            }
        },
        {
            "name": "posts_search",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2229,
            "doc": {
                "summary": "Filters the search SQL that is used in the WHERE clause of WP_Query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Search SQL for WHERE clause.",
                        "types": [
                            "string"
                        ],
                        "variable": "search"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_Query object.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_search_orderby",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2488,
            "doc": {
                "summary": "Filters the ORDER BY used when ordering search results.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The ORDER BY clause.",
                        "types": [
                            "string"
                        ],
                        "variable": "search_orderby"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_Query instance.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_where",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2707,
            "doc": {
                "summary": "Filters the WHERE clause of the query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The WHERE clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "where"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_join",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2717,
            "doc": {
                "summary": "Filters the JOIN clause of the query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The JOIN clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "join"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "comment_feed_join",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2758,
            "doc": {
                "summary": "Filters the JOIN clause of the comments feed query before sending.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The JOIN clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "cjoin"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "comment_feed_where",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2768,
            "doc": {
                "summary": "Filters the WHERE clause of the comments feed query before sending.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The WHERE clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "cwhere"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "comment_feed_groupby",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2778,
            "doc": {
                "summary": "Filters the GROUP BY clause of the comments feed query before sending.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The GROUP BY clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "cgroupby"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "comment_feed_orderby",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2788,
            "doc": {
                "summary": "Filters the ORDER BY clause of the comments feed query before sending.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The ORDER BY clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "corderby"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "comment_feed_limits",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2798,
            "doc": {
                "summary": "Filters the LIMIT clause of the comments feed query before sending.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The JOIN clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "climits"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_where_paged",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2855,
            "doc": {
                "summary": "Filters the WHERE clause of the query.",
                "description": "<p>Specifically for manipulating paging queries.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The WHERE clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "where"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_groupby",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2865,
            "doc": {
                "summary": "Filters the GROUP BY clause of the query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The GROUP BY clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "groupby"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_join_paged",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2877,
            "doc": {
                "summary": "Filters the JOIN clause of the query.",
                "description": "<p>Specifically for manipulating paging queries.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The JOIN clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "join"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_orderby",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2887,
            "doc": {
                "summary": "Filters the ORDER BY clause of the query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The ORDER BY clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "orderby"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_distinct",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2897,
            "doc": {
                "summary": "Filters the DISTINCT clause of the query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The DISTINCT clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "distinct"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "post_limits",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2907,
            "doc": {
                "summary": "Filters the LIMIT clause of the query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The LIMIT clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "limits"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_fields",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2917,
            "doc": {
                "summary": "Filters the SELECT clause of the query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The SELECT clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_clauses",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2940,
            "doc": {
                "summary": "Filters all query clauses at once, for convenience.",
                "description": "<p>Covers the WHERE, GROUP BY, JOIN, ORDER BY, DISTINCT, fields (SELECT), and LIMIT clauses.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Associative array of the clauses for the query.<br>    @type string $where    The WHERE clause of the query.<br>    @type string $groupby  The GROUP BY clause of the query.<br>    @type string $join     The JOIN clause of the query.<br>    @type string $orderby  The ORDER BY clause of the query.<br>    @type string $distinct The DISTINCT clause of the query.<br>    @type string $fields   The SELECT clause of the query.<br>    @type string $limits   The LIMIT clause of the query.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "clauses"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_selection",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2960,
            "doc": {
                "summary": "Fires to announce the query's current selection parameters.",
                "description": "<p>For use by caching plugins.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The assembled selection query.",
                        "types": [
                            "string"
                        ],
                        "variable": "selection"
                    }
                ]
            }
        },
        {
            "name": "posts_where_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2977,
            "doc": {
                "summary": "Filters the WHERE clause of the query.",
                "description": "<p>For use by caching plugins.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The WHERE clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "where"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_groupby_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 2989,
            "doc": {
                "summary": "Filters the GROUP BY clause of the query.",
                "description": "<p>For use by caching plugins.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The GROUP BY clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "groupby"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_join_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3001,
            "doc": {
                "summary": "Filters the JOIN clause of the query.",
                "description": "<p>For use by caching plugins.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The JOIN clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "join"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_orderby_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3013,
            "doc": {
                "summary": "Filters the ORDER BY clause of the query.",
                "description": "<p>For use by caching plugins.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The ORDER BY clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "orderby"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_distinct_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3025,
            "doc": {
                "summary": "Filters the DISTINCT clause of the query.",
                "description": "<p>For use by caching plugins.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The DISTINCT clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "distinct"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_fields_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3037,
            "doc": {
                "summary": "Filters the SELECT clause of the query.",
                "description": "<p>For use by caching plugins.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The SELECT clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "post_limits_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3049,
            "doc": {
                "summary": "Filters the LIMIT clause of the query.",
                "description": "<p>For use by caching plugins.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The LIMIT clause of the query.",
                        "types": [
                            "string"
                        ],
                        "variable": "limits"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_clauses_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3074,
            "doc": {
                "summary": "Filters all query clauses at once, for convenience.",
                "description": "<p>For use by caching plugins.<\/p> <p>Covers the WHERE, GROUP BY, JOIN, ORDER BY, DISTINCT, fields (SELECT), and LIMIT clauses.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Associative array of the clauses for the query.<br>    @type string $where    The WHERE clause of the query.<br>    @type string $groupby  The GROUP BY clause of the query.<br>    @type string $join     The JOIN clause of the query.<br>    @type string $orderby  The ORDER BY clause of the query.<br>    @type string $distinct The DISTINCT clause of the query.<br>    @type string $fields   The SELECT clause of the query.<br>    @type string $limits   The LIMIT clause of the query.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "clauses"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3117,
            "doc": {
                "summary": "Filters the completed SQL query before sending.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete SQL query.",
                        "types": [
                            "string"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_pre_query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3136,
            "doc": {
                "summary": "Filters the posts array before the query takes place.",
                "description": "<p>Return a non-null value to bypass WordPress' default post queries.<\/p> <p>Filtering functions that require pagination information are encouraged to set the <code>found_posts<\/code> and <code>max_num_pages<\/code> properties of the WP_Query object, passed to the filter by reference. If WP_Query does not perform a database query, it will not have enough information to generate these values itself.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Return an array of post data to short-circuit WP's query, or null to allow WP to run its normal queries.",
                        "types": [
                            "\\WP_Post[]",
                            "int[]",
                            "null"
                        ],
                        "variable": "posts"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "split_the_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3277,
            "doc": {
                "summary": "Filters whether to split the query.",
                "description": "<p>Splitting the query will cause it to fetch just the IDs of the found posts (and then individually fetch each post by ID), rather than fetching every complete row at once. One massive result vs. many small results.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether or not to split the query.",
                        "types": [
                            "bool"
                        ],
                        "variable": "split_the_query"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_request_ids",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3299,
            "doc": {
                "summary": "Filters the Post IDs SQL request before sending.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID request.",
                        "types": [
                            "string"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "posts_results",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3343,
            "doc": {
                "summary": "Filters the raw post results array, prior to status checks.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of post objects.",
                        "types": [
                            "\\WP_Post[]"
                        ],
                        "variable": "posts"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "the_preview",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3437,
            "doc": {
                "summary": "Filters the single post for preview mode.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post_preview"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "the_posts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3505,
            "doc": {
                "summary": "Filters the array of retrieved posts after they've been fetched and internally processed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of post objects.",
                        "types": [
                            "\\WP_Post[]"
                        ],
                        "variable": "posts"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "found_posts_query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3567,
            "doc": {
                "summary": "Filters the query to run for retrieving the found posts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The query to run to find the found posts.",
                        "types": [
                            "string"
                        ],
                        "variable": "found_posts_query"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "found_posts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3590,
            "doc": {
                "summary": "Filters the number of found posts for the query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The number of posts found.",
                        "types": [
                            "int"
                        ],
                        "variable": "found_posts"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "loop_start",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3648,
            "doc": {
                "summary": "Fires once the loop is started.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "loop_end",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3675,
            "doc": {
                "summary": "Fires once the loop has ended.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "loop_no_results",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3686,
            "doc": {
                "summary": "Fires if no results are found in a post query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "comment_loop_start",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 3738,
            "doc": {
                "summary": "Fires once the comment loop is started.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ]
            }
        },
        {
            "name": "the_post",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 4690,
            "doc": {
                "summary": "Fires once the post data has been set up.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "Introduced <code>$query<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The Post object (passed by reference).",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The current Query object (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "content_pagination",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-query.php",
            "line": 4769,
            "doc": {
                "summary": "Filters the \"pages\" derived from splitting the post content.",
                "description": "<p>&quot;Pages&quot; are determined by splitting the post content based on the presence of <code>&lt;!-- nextpage --&gt;<\/code> tags.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of &quot;pages&quot; from the post content split by <code>&lt;!-- nextpage --&gt;<\/code> tags.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "pages"
                    },
                    {
                        "name": "param",
                        "content": "Current post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "recovery_mode_cookie_length",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-recovery-mode-cookie-service.php",
            "line": 46,
            "doc": {
                "summary": "Filters the length of time a Recovery Mode cookie is valid for.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Length in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "length"
                    }
                ]
            }
        },
        {
            "name": "recovery_email_support_info",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-recovery-mode-email-service.php",
            "line": 141,
            "doc": {
                "summary": "Filters the support message sent with the the fatal error protection email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The Message to include in the email.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    }
                ]
            }
        },
        {
            "name": "recovery_email_debug_info",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-recovery-mode-email-service.php",
            "line": 150,
            "doc": {
                "summary": "Filters the debug information included in the fatal error protection email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of debug information.",
                        "types": [
                            "array"
                        ],
                        "variable": "message"
                    }
                ]
            }
        },
        {
            "name": "recovery_mode_email",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-recovery-mode-email-service.php",
            "line": 223,
            "doc": {
                "summary": "Filters the contents of the Recovery Mode email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The <code>$email<\/code> argument includes the <code>attachments<\/code> key."
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build a call to wp_mail().<br>    @type string|array $to          Array or comma-separated list of email addresses to send message.<br>    @type string       $subject     Email subject     @type string       $message     Message contents     @type string|array $headers     Optional. Additional headers.<br>    @type string|array $attachments Optional. Files to attach.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email"
                    },
                    {
                        "name": "param",
                        "content": "URL to enter recovery mode.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "generate_recovery_mode_key",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-recovery-mode-key-service.php",
            "line": 76,
            "doc": {
                "summary": "Fires when a recovery mode key is generated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The recovery data token.",
                        "types": [
                            "string"
                        ],
                        "variable": "token"
                    },
                    {
                        "name": "param",
                        "content": "The recovery mode key.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    }
                ]
            }
        },
        {
            "name": "recovery_mode_begin_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-recovery-mode-link-service.php",
            "line": 128,
            "doc": {
                "summary": "Filters the URL to begin recovery mode.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The generated recovery mode begin URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The token used to identify the key.",
                        "types": [
                            "string"
                        ],
                        "variable": "token"
                    },
                    {
                        "name": "param",
                        "content": "The recovery mode key.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    }
                ]
            }
        },
        {
            "name": "recovery_mode_email_rate_limit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-recovery-mode.php",
            "line": 307,
            "doc": {
                "summary": "Filters the rate limit between sending new recovery mode email links.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Time to wait in seconds. Defaults to 1 day.",
                        "types": [
                            "int"
                        ],
                        "variable": "rate_limit"
                    }
                ]
            }
        },
        {
            "name": "recovery_mode_email_link_ttl",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-recovery-mode.php",
            "line": 331,
            "doc": {
                "summary": "Filters the amount of time the recovery mode email link is valid for.",
                "description": "<p>The ttl must be at least as long as the email rate limit.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The number of seconds the link is valid for.",
                        "types": [
                            "int"
                        ],
                        "variable": "valid_for"
                    }
                ]
            }
        },
        {
            "name": "post_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1311,
            "doc": {
                "summary": "Filters rewrite rules used for \"post\" archives.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of rewrite rules for posts, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_rewrite"
                    }
                ]
            }
        },
        {
            "name": "date_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1325,
            "doc": {
                "summary": "Filters rewrite rules used for date archives.",
                "description": "<p>Likely date archives would include <code>\/yyyy\/<\/code>, <code>\/yyyy\/mm\/<\/code>, and <code>\/yyyy\/mm\/dd\/<\/code>.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of rewrite rules for date archives, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "date_rewrite"
                    }
                ]
            }
        },
        {
            "name": "root_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1340,
            "doc": {
                "summary": "Filters rewrite rules used for root-level archives.",
                "description": "<p>Likely root-level archives would include pagination rules for the homepage as well as site-wide post feeds (e.g. <code>\/feed\/<\/code>, and <code>\/feed\/atom\/<\/code>).<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of root-level rewrite rules, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "root_rewrite"
                    }
                ]
            }
        },
        {
            "name": "comments_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1354,
            "doc": {
                "summary": "Filters rewrite rules used for comment feed archives.",
                "description": "<p>Likely comments feed archives include <code>\/comments\/feed\/<\/code> and <code>\/comments\/feed\/atom\/<\/code>.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of rewrite rules for the site-wide comments feeds, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "comments_rewrite"
                    }
                ]
            }
        },
        {
            "name": "search_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1370,
            "doc": {
                "summary": "Filters rewrite rules used for search archives.",
                "description": "<p>Likely search-related archives include <code>\/search\/search+query\/<\/code> as well as pagination and feed paths for a search.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of rewrite rules for search queries, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "search_rewrite"
                    }
                ]
            }
        },
        {
            "name": "author_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1385,
            "doc": {
                "summary": "Filters rewrite rules used for author archives.",
                "description": "<p>Likely author archives would include <code>\/author\/author-name\/<\/code>, as well as pagination and feed paths for author archives.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of rewrite rules for author archives, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "author_rewrite"
                    }
                ]
            }
        },
        {
            "name": "page_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1397,
            "doc": {
                "summary": "Filters rewrite rules used for \"page\" post type archives.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of rewrite rules for the &quot;page&quot; post type, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "page_rewrite"
                    }
                ]
            }
        },
        {
            "name": "{$permastructname}_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1427,
            "doc": {
                "summary": "Filters rewrite rules used for individual permastructs.",
                "description": "<p>The dynamic portion of the hook name, <code>$permastructname<\/code>, refers to the name of the registered permastruct.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>category_rewrite_rules<\/code><\/li> <li><code>post_format_rewrite_rules<\/code><\/li> <li><code>post_tag_rewrite_rules<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of rewrite rules generated for the current permastruct, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "rules"
                    }
                ]
            }
        },
        {
            "name": "tag_rewrite_rules",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1439,
            "doc": {
                "summary": "Filters rewrite rules used specifically for Tags.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.1.0",
                        "description": "Use {@see 'post_tag_rewrite_rules'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Array of rewrite rules generated for tags, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "rules"
                    }
                ]
            }
        },
        {
            "name": "generate_rewrite_rules",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1459,
            "doc": {
                "summary": "Fires after the rewrite rules are generated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Rewrite instance (passed by reference).",
                        "types": [
                            "\\WP_Rewrite"
                        ],
                        "variable": "wp_rewrite"
                    }
                ]
            }
        },
        {
            "name": "rewrite_rules_array",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1468,
            "doc": {
                "summary": "Filters the full set of generated rewrite rules.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The compiled array of rewrite rules, keyed by their regex pattern.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "rules"
                    }
                ]
            }
        },
        {
            "name": "mod_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1579,
            "doc": {
                "summary": "Filters the list of rewrite rules formatted for output to an .htaccess file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "mod_rewrite Rewrite rules formatted for .htaccess.",
                        "types": [
                            "string"
                        ],
                        "variable": "rules"
                    }
                ]
            }
        },
        {
            "name": "rewrite_rules",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1589,
            "doc": {
                "summary": "Filters the list of rewrite rules formatted for output to an .htaccess file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "1.5.0",
                        "description": "Use the {@see 'mod_rewrite_rules'} filter instead."
                    },
                    {
                        "name": "param",
                        "content": "mod_rewrite Rewrite rules formatted for .htaccess.",
                        "types": [
                            "string"
                        ],
                        "variable": "rules"
                    }
                ]
            }
        },
        {
            "name": "iis7_url_rewrite_rules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1641,
            "doc": {
                "summary": "Filters the list of rewrite rules formatted for output to a web.config.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Rewrite rules formatted for IIS web.config.",
                        "types": [
                            "string"
                        ],
                        "variable": "rules"
                    }
                ]
            }
        },
        {
            "name": "flush_rewrite_rules_hard",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1871,
            "doc": {
                "summary": "Filters whether a \"hard\" rewrite rule flush should be performed when requested.",
                "description": "<p>A &quot;hard&quot; flush updates .htaccess (Apache) or web.config (IIS).<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to flush rewrite rules &quot;hard&quot;. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "hard"
                    }
                ]
            }
        },
        {
            "name": "permalink_structure_changed",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-rewrite.php",
            "line": 1949,
            "doc": {
                "summary": "Fires after the permalink structure is updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The previous permalink structure.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_permalink_structure"
                    },
                    {
                        "name": "param",
                        "content": "The new permalink structure.",
                        "types": [
                            "string"
                        ],
                        "variable": "permalink_structure"
                    }
                ]
            }
        },
        {
            "name": "role_has_cap",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-role.php",
            "line": 95,
            "doc": {
                "summary": "Filters which capabilities a role has.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of key\/value pairs where keys represent a capability name and boolean values represent whether the role has that capability.",
                        "types": [
                            "bool[]"
                        ],
                        "variable": "capabilities"
                    },
                    {
                        "name": "param",
                        "content": "Capability name.",
                        "types": [
                            "string"
                        ],
                        "variable": "cap"
                    },
                    {
                        "name": "param",
                        "content": "Role name.",
                        "types": [
                            "string"
                        ],
                        "variable": "name"
                    }
                ]
            }
        },
        {
            "name": "wp_roles_init",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-roles.php",
            "line": 303,
            "doc": {
                "summary": "Fires after the roles have been initialized, allowing plugins to add their own roles.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "A reference to the WP_Roles object.",
                        "types": [
                            "\\WP_Roles"
                        ],
                        "variable": "wp_roles"
                    }
                ]
            }
        },
        {
            "name": "wp_default_scripts",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-scripts.php",
            "line": 167,
            "doc": {
                "summary": "Fires when the WP_Scripts instance is initialized.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Scripts instance (passed by reference).",
                        "types": [
                            "\\WP_Scripts"
                        ],
                        "variable": "wp_scripts"
                    }
                ]
            }
        },
        {
            "name": "script_loader_src",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-scripts.php",
            "line": 334,
            "doc": {
                "summary": "Filters the script loader source.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Script loader source path.",
                        "types": [
                            "string"
                        ],
                        "variable": "src"
                    },
                    {
                        "name": "param",
                        "content": "Script handle.",
                        "types": [
                            "string"
                        ],
                        "variable": "handle"
                    }
                ]
            }
        },
        {
            "name": "script_loader_tag",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-scripts.php",
            "line": 406,
            "doc": {
                "summary": "Filters the HTML script tag of an enqueued script.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The <code>&lt;script&gt;<\/code> tag for the enqueued script.",
                        "types": [
                            "string"
                        ],
                        "variable": "tag"
                    },
                    {
                        "name": "param",
                        "content": "The script's registered handle.",
                        "types": [
                            "string"
                        ],
                        "variable": "handle"
                    },
                    {
                        "name": "param",
                        "content": "The script's source URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "src"
                    }
                ]
            }
        },
        {
            "name": "print_scripts_array",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-scripts.php",
            "line": 659,
            "doc": {
                "summary": "Filters the list of script dependencies left to print.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of script dependency handles.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "to_do"
                    }
                ]
            }
        },
        {
            "name": "session_token_manager",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-session-tokens.php",
            "line": 58,
            "doc": {
                "summary": "Filters the class name for the session token manager.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of class to use as the manager.<br>Default 'WP_User_Meta_Session_Tokens'.",
                        "types": [
                            "string"
                        ],
                        "variable": "session"
                    }
                ]
            }
        },
        {
            "name": "attach_session_information",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-session-tokens.php",
            "line": 134,
            "doc": {
                "summary": "Filters the information attached to the newly created session.",
                "description": "<p>Can be used to attach further information to a session.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of extra data.",
                        "types": [
                            "array"
                        ],
                        "variable": "session"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "parse_site_query",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-site-query.php",
            "line": 257,
            "doc": {
                "summary": "Fires after the site query vars have been parsed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Site_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Site_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "pre_get_sites",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-site-query.php",
            "line": 301,
            "doc": {
                "summary": "Fires before sites are retrieved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Site_Query (passed by reference).",
                        "types": [
                            "\\WP_Site_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "sites_pre_query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-site-query.php",
            "line": 341,
            "doc": {
                "summary": "Filters the site data before the get_sites query takes place.",
                "description": "<p>Return a non-null value to bypass WordPress' default site queries.<\/p> <p>The expected return type from this filter depends on the value passed in the request query vars:<\/p> <ul> <li>When <code>$this-&gt;query_vars['count']<\/code> is set, the filter should return the site count as an integer.<\/li> <li>When <code>'ids' === $this-&gt;query_vars['fields']<\/code>, the filter should return an array of site IDs.<\/li> <li>Otherwise the filter should return an array of WP_Site objects.<\/li> <\/ul> <p>Note that if the filter returns an array of site data, it will be assigned to the <code>sites<\/code> property of the current WP_Site_Query instance.<\/p> <p>Filtering functions that require pagination information are encouraged to set the <code>found_sites<\/code> and <code>max_num_pages<\/code> properties of the WP_Site_Query object, passed to the filter by reference. If WP_Site_Query does not perform a database query, it will not have enough information to generate these values itself.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The returned array of site data is assigned to the <code>sites<\/code> property of the current WP_Site_Query instance."
                    },
                    {
                        "name": "param",
                        "content": "Return an array of site data to short-circuit WP's site query, the site count as an integer if <code>$this-&gt;query_vars['count']<\/code> is set, or null to run the normal queries.",
                        "types": [
                            "array",
                            "int",
                            "null"
                        ],
                        "variable": "site_data"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Site_Query instance, passed by reference.",
                        "types": [
                            "\\WP_Site_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "the_sites",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-site-query.php",
            "line": 419,
            "doc": {
                "summary": "Filters the site query results.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of WP_Site objects.",
                        "types": [
                            "\\WP_Site[]"
                        ],
                        "variable": "_sites"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Site_Query (passed by reference).",
                        "types": [
                            "\\WP_Site_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "site_search_columns",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-site-query.php",
            "line": 623,
            "doc": {
                "summary": "Filters the columns to search in a WP_Site_Query search.",
                "description": "<p>The default columns include 'domain' and 'path.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of column names to be searched.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "search_columns"
                    },
                    {
                        "name": "param",
                        "content": "Text being searched.",
                        "types": [
                            "string"
                        ],
                        "variable": "search"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_Site_Query instance.",
                        "types": [
                            "\\WP_Site_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "sites_clauses",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-site-query.php",
            "line": 662,
            "doc": {
                "summary": "Filters the site query clauses.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of site query clauses.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "clauses"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Site_Query (passed by reference).",
                        "types": [
                            "\\WP_Site_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "found_sites_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-site-query.php",
            "line": 732,
            "doc": {
                "summary": "Filters the query used to retrieve found site count.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "SQL query. Default 'SELECT FOUND_ROWS()'.",
                        "types": [
                            "string"
                        ],
                        "variable": "found_sites_query"
                    },
                    {
                        "name": "param",
                        "content": "The <code>WP_Site_Query<\/code> instance.",
                        "types": [
                            "\\WP_Site_Query"
                        ],
                        "variable": "site_query"
                    }
                ]
            }
        },
        {
            "name": "site_details",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-site.php",
            "line": 349,
            "doc": {
                "summary": "Filters a site's extended properties.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The site details.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "details"
                    }
                ]
            }
        },
        {
            "name": "wp_default_styles",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-styles.php",
            "line": 135,
            "doc": {
                "summary": "Fires when the WP_Styles instance is initialized.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Styles instance (passed by reference).",
                        "types": [
                            "\\WP_Styles"
                        ],
                        "variable": "wp_styles"
                    }
                ]
            }
        },
        {
            "name": "style_loader_tag",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-styles.php",
            "line": 251,
            "doc": {
                "summary": "Filters the HTML link tag of an enqueued style.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.3.0",
                        "description": "Introduced the <code>$href<\/code> parameter."
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Introduced the <code>$media<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The link tag for the enqueued style.",
                        "types": [
                            "string"
                        ],
                        "variable": "tag"
                    },
                    {
                        "name": "param",
                        "content": "The style's registered handle.",
                        "types": [
                            "string"
                        ],
                        "variable": "handle"
                    },
                    {
                        "name": "param",
                        "content": "The stylesheet's source URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "href"
                    },
                    {
                        "name": "param",
                        "content": "The stylesheet's media attribute.",
                        "types": [
                            "string"
                        ],
                        "variable": "media"
                    }
                ]
            }
        },
        {
            "name": "print_styles_array",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-styles.php",
            "line": 380,
            "doc": {
                "summary": "Filters the array of enqueued styles before processing for output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The list of enqueued style handles about to be processed.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "to_do"
                    }
                ]
            }
        },
        {
            "name": "style_loader_src",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-styles.php",
            "line": 412,
            "doc": {
                "summary": "Filters an enqueued style's fully-qualified URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The source URL of the enqueued style.",
                        "types": [
                            "string"
                        ],
                        "variable": "src"
                    },
                    {
                        "name": "param",
                        "content": "The style's registered handle.",
                        "types": [
                            "string"
                        ],
                        "variable": "handle"
                    }
                ]
            }
        },
        {
            "name": "register_taxonomy_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-taxonomy.php",
            "line": 315,
            "doc": {
                "summary": "Filters the arguments for registering a taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for registering a taxonomy.<br>See the register_taxonomy() function for accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy key.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Array of names of object types for the taxonomy.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "object_type"
                    }
                ]
            }
        },
        {
            "name": "register_{$taxonomy}_taxonomy_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-taxonomy.php",
            "line": 336,
            "doc": {
                "summary": "Filters the arguments for registering a specific taxonomy.",
                "description": "<p>The dynamic portion of the filter name, <code>$taxonomy<\/code>, refers to the taxonomy key.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>register_category_taxonomy_args<\/code><\/li> <li><code>register_post_tag_taxonomy_args<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for registering a taxonomy.<br>See the register_taxonomy() function for accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy key.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Array of names of object types for the taxonomy.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "object_type"
                    }
                ]
            }
        },
        {
            "name": "get_terms_defaults",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-term-query.php",
            "line": 260,
            "doc": {
                "summary": "Filters the terms query default arguments.",
                "description": "<p>Use {@see 'get_terms_args'} to filter the passed arguments.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of default get_terms() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "defaults"
                    },
                    {
                        "name": "param",
                        "content": "An array of taxonomy names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    }
                ]
            }
        },
        {
            "name": "parse_term_query",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-term-query.php",
            "line": 291,
            "doc": {
                "summary": "Fires after term query vars have been parsed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Term_Query.",
                        "types": [
                            "\\WP_Term_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "pre_get_terms",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-term-query.php",
            "line": 365,
            "doc": {
                "summary": "Fires before terms are retrieved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Term_Query (passed by reference).",
                        "types": [
                            "\\WP_Term_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "get_terms_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-term-query.php",
            "line": 408,
            "doc": {
                "summary": "Filters the terms query arguments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of get_terms() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "An array of taxonomy names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    }
                ]
            }
        },
        {
            "name": "list_terms_exclusions",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-term-query.php",
            "line": 534,
            "doc": {
                "summary": "Filters the terms to exclude from the terms query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "<code>NOT IN<\/code> clause of the terms query.",
                        "types": [
                            "string"
                        ],
                        "variable": "exclusions"
                    },
                    {
                        "name": "param",
                        "content": "An array of terms query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "An array of taxonomy names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    }
                ]
            }
        },
        {
            "name": "get_terms_fields",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-term-query.php",
            "line": 699,
            "doc": {
                "summary": "Filters the fields to select in the terms query.",
                "description": "<p>Field lists modified using this filter will only modify the term fields returned by the function when the <code>$fields<\/code> parameter set to 'count' or 'all'. In all other cases, the term fields in the results array will be determined by the <code>$fields<\/code> parameter alone.<\/p> <p>Use of this filter can result in unpredictable behavior, and is not recommended.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of fields to select for the terms query.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "selects"
                    },
                    {
                        "name": "param",
                        "content": "An array of term query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "An array of taxonomy names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    }
                ]
            }
        },
        {
            "name": "terms_clauses",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-term-query.php",
            "line": 731,
            "doc": {
                "summary": "Filters the terms query SQL clauses.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Associative array of the clauses for the query.<br>    @type string $fields   The SELECT clause of the query.<br>    @type string $join     The JOIN clause of the query.<br>    @type string $where    The WHERE clause of the query.<br>    @type string $distinct The DISTINCT clause of the query.<br>    @type string $orderby  The ORDER BY clause of the query.<br>    @type string $order    The ORDER clause of the query.<br>    @type string $limits   The LIMIT clause of the query.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "clauses"
                    },
                    {
                        "name": "param",
                        "content": "An array of taxonomy names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    },
                    {
                        "name": "param",
                        "content": "An array of term query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "terms_pre_query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-term-query.php",
            "line": 771,
            "doc": {
                "summary": "Filters the terms array before the query takes place.",
                "description": "<p>Return a non-null value to bypass WordPress' default term queries.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Return an array of term data to short-circuit WP's term query, or null to allow WP queries to run normally.",
                        "types": [
                            "array",
                            "null"
                        ],
                        "variable": "terms"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Term_Query instance, passed by reference.",
                        "types": [
                            "\\WP_Term_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "get_terms_orderby",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-term-query.php",
            "line": 941,
            "doc": {
                "summary": "Filters the ORDERBY clause of the terms query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "<code>ORDERBY<\/code> clause of the terms query.",
                        "types": [
                            "string"
                        ],
                        "variable": "orderby"
                    },
                    {
                        "name": "param",
                        "content": "An array of term query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "An array of taxonomy names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    }
                ]
            }
        },
        {
            "name": "process_text_diff_html",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-text-diff-renderer-table.php",
            "line": 185,
            "doc": {
                "summary": "Contextually filters a diffed line.",
                "description": "<p>Filters TextDiff processing of diffed line. By default, diffs are processed with htmlspecialchars. Use this filter to remove or change the processing. Passes a context indicating if the line is added, deleted or unchanged.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The processed diffed line.",
                        "types": [
                            "string"
                        ],
                        "variable": "processed_line"
                    },
                    {
                        "name": "param",
                        "content": "The unprocessed diffed line.",
                        "types": [
                            "string"
                        ],
                        "variable": "line"
                    },
                    {
                        "name": "param",
                        "content": "The line context. Values are 'added', 'deleted' or 'unchanged'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "wp_theme_json_data_default",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-theme-json-resolver.php",
            "line": 175,
            "doc": {
                "summary": "Filters the default data provided by WordPress for global styles & settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Class to access and update the underlying data.",
                        "types": [
                            "\\WP_Theme_JSON_Data"
                        ],
                        "variable": ""
                    }
                ]
            }
        },
        {
            "name": "wp_theme_json_data_theme",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-theme-json-resolver.php",
            "line": 257,
            "doc": {
                "summary": "Filters the data provided by the theme for global styles and settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Class to access and update the underlying data.",
                        "types": [
                            "\\WP_Theme_JSON_Data"
                        ],
                        "variable": ""
                    }
                ]
            }
        },
        {
            "name": "wp_theme_json_data_blocks",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-theme-json-resolver.php",
            "line": 361,
            "doc": {
                "summary": "Filters the data provided by the blocks for global styles & settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Class to access and update the underlying data.",
                        "types": [
                            "\\WP_Theme_JSON_Data"
                        ],
                        "variable": ""
                    }
                ]
            }
        },
        {
            "name": "wp_theme_json_data_user",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-theme-json-resolver.php",
            "line": 497,
            "doc": {
                "summary": "Filters the data provided by the user for global styles & settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Class to access and update the underlying data.",
                        "types": [
                            "\\WP_Theme_JSON_Data"
                        ],
                        "variable": ""
                    }
                ]
            }
        },
        {
            "name": "wp_theme_json_get_style_nodes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-theme-json.php",
            "line": 2124,
            "doc": {
                "summary": "Filters the list of style nodes with metadata.",
                "description": "<p>This allows for things like loading block CSS independently.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Style nodes with metadata.",
                        "types": [
                            "array"
                        ],
                        "variable": "nodes"
                    }
                ]
            }
        },
        {
            "name": "theme_templates",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-theme.php",
            "line": 1350,
            "doc": {
                "summary": "Filters list of page templates for a theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "Array of template header names keyed by the template file name.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_templates"
                    },
                    {
                        "name": "param",
                        "content": "The theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "The post being edited, provided for context, or null.",
                        "types": [
                            "\\WP_Post",
                            "null"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Post type to get the templates for.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "theme_{$post_type}_templates",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-theme.php",
            "line": 1372,
            "doc": {
                "summary": "Filters list of page templates for a theme.",
                "description": "<p>The dynamic portion of the hook name, <code>$post_type<\/code>, refers to the post type.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>theme_post_templates<\/code><\/li> <li><code>theme_page_templates<\/code><\/li> <li><code>theme_attachment_templates<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Converted to allow complete control over the <code>$page_templates<\/code> array."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$post_type<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Array of template header names keyed by the template file name.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_templates"
                    },
                    {
                        "name": "param",
                        "content": "The theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "The post being edited, provided for context, or null.",
                        "types": [
                            "\\WP_Post",
                            "null"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Post type to get the templates for.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "theme_scandir_exclusions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-theme.php",
            "line": 1418,
            "doc": {
                "summary": "Filters the array of excluded directories and files while scanning theme folder.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.4"
                    },
                    {
                        "name": "param",
                        "content": "Array of excluded directories and files.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "exclusions"
                    }
                ]
            }
        },
        {
            "name": "network_allowed_themes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-theme.php",
            "line": 1606,
            "doc": {
                "summary": "Filters the array of themes allowed on the network.",
                "description": "<p>Site is provided as context so that a list of network allowed themes can be filtered further.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of theme stylesheet names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_themes"
                    },
                    {
                        "name": "param",
                        "content": "ID of the site.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "allowed_themes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-theme.php",
            "line": 1630,
            "doc": {
                "summary": "Filters the array of themes allowed on the network.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "An array of theme stylesheet names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_themes"
                    }
                ]
            }
        },
        {
            "name": "site_allowed_themes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-theme.php",
            "line": 1659,
            "doc": {
                "summary": "Filters the array of themes allowed on the site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of theme stylesheet names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_themes"
                    },
                    {
                        "name": "param",
                        "content": "ID of the site. Defaults to current site.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "pre_get_users",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-user-query.php",
            "line": 277,
            "doc": {
                "summary": "Fires before the WP_User_Query has been parsed.",
                "description": "<p>The passed WP_User_Query object contains the query variables, not yet passed into SQL.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_User_Query (passed by reference).",
                        "types": [
                            "\\WP_User_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "user_search_columns",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-user-query.php",
            "line": 735,
            "doc": {
                "summary": "Filters the columns to search in a WP_User_Query search.",
                "description": "<p>The default columns depend on the search term, and include 'ID', 'user_login', 'user_email', 'user_url', 'user_nicename', and 'display_name'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of column names to be searched.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "search_columns"
                    },
                    {
                        "name": "param",
                        "content": "Text being searched.",
                        "types": [
                            "string"
                        ],
                        "variable": "search"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User_Query instance.",
                        "types": [
                            "\\WP_User_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "pre_user_query",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-user-query.php",
            "line": 766,
            "doc": {
                "summary": "Fires after the WP_User_Query has been parsed, and before the query is executed.",
                "description": "<p>The passed WP_User_Query object contains SQL parts formed from parsing the given query.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_User_Query (passed by reference).",
                        "types": [
                            "\\WP_User_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "users_pre_query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-user-query.php",
            "line": 809,
            "doc": {
                "summary": "Filters the users array before the query takes place.",
                "description": "<p>Return a non-null value to bypass WordPress' default user queries.<\/p> <p>Filtering functions that require pagination information are encouraged to set the <code>total_users<\/code> property of the WP_User_Query object, passed to the filter by reference. If WP_User_Query does not perform a database query, it will not have enough information to generate these values itself.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Return an array of user data to short-circuit WP's user query or null to allow WP to run its normal queries.",
                        "types": [
                            "array",
                            "null"
                        ],
                        "variable": "results"
                    },
                    {
                        "name": "param",
                        "content": "The WP_User_Query instance (passed by reference).",
                        "types": [
                            "\\WP_User_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "found_users_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-user-query.php",
            "line": 838,
            "doc": {
                "summary": "Filters SELECT FOUND_ROWS() query for the current WP_User_Query instance.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "Added the <code>$this<\/code> parameter."
                    },
                    {
                        "name": "global",
                        "content": "wpdb $wpdb WordPress database abstraction object."
                    },
                    {
                        "name": "param",
                        "content": "The SELECT FOUND_ROWS() query for the current WP_User_Query.",
                        "types": [
                            "string"
                        ],
                        "variable": "sql"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User_Query instance.",
                        "types": [
                            "\\WP_User_Query"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "add_user_role",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-user.php",
            "line": 563,
            "doc": {
                "summary": "Fires immediately after the user has been given a new role.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The new role.",
                        "types": [
                            "string"
                        ],
                        "variable": "role"
                    }
                ]
            }
        },
        {
            "name": "remove_user_role",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-user.php",
            "line": 591,
            "doc": {
                "summary": "Fires immediately after a role as been removed from a user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The removed role.",
                        "types": [
                            "string"
                        ],
                        "variable": "role"
                    }
                ]
            }
        },
        {
            "name": "set_user_role",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-user.php",
            "line": 651,
            "doc": {
                "summary": "Fires after the user's role has changed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "3.6.0",
                        "description": "Added $old_roles to include an array of the user's previous roles."
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The new role.",
                        "types": [
                            "string"
                        ],
                        "variable": "role"
                    },
                    {
                        "name": "param",
                        "content": "An array of the user's previous roles.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "old_roles"
                    }
                ]
            }
        },
        {
            "name": "user_has_cap",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-user.php",
            "line": 809,
            "doc": {
                "summary": "Dynamically filter a user's capabilities.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.7.0",
                        "description": "Added the <code>$user<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Array of key\/value pairs where keys represent a capability name and boolean values represent whether the user has that capability.",
                        "types": [
                            "bool[]"
                        ],
                        "variable": "allcaps"
                    },
                    {
                        "name": "param",
                        "content": "Required primitive capabilities for the requested capability.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "caps"
                    },
                    {
                        "name": "param",
                        "content": "{     Arguments that accompany the requested capability check.<br>    @type string    $0 Requested capability.<br>    @type int       $1 Concerned user ID.<br>    @type mixed  ...$2 Optional second and further parameters, typically object ID.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The user object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "widget_display_callback",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-widget.php",
            "line": 383,
            "doc": {
                "summary": "Filters the settings for a particular widget instance.",
                "description": "<p>Returning false will effectively short-circuit display of the widget.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The current widget instance's settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "The current widget instance.",
                        "types": [
                            "\\WP_Widget"
                        ],
                        "variable": "widget"
                    },
                    {
                        "name": "param",
                        "content": "An array of default widget arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "widget_update_callback",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/class-wp-widget.php",
            "line": 476,
            "doc": {
                "summary": "Filters a widget's settings before saving.",
                "description": "<p>Returning false will effectively short-circuit the widget's ability to update settings.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The current widget instance's settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "Array of new widget settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "new_instance"
                    },
                    {
                        "name": "param",
                        "content": "Array of old widget settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "old_instance"
                    },
                    {
                        "name": "param",
                        "content": "The current widget instance.",
                        "types": [
                            "\\WP_Widget"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "widget_form_callback",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-widget.php",
            "line": 530,
            "doc": {
                "summary": "Filters the widget instance's settings before displaying the control form.",
                "description": "<p>Returning false effectively short-circuits display of the control form.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The current widget instance's settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "The current widget instance.",
                        "types": [
                            "\\WP_Widget"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "in_widget_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-widget.php",
            "line": 553,
            "doc": {
                "summary": "Fires at the end of the widget control form.",
                "description": "<p>Use this hook to add extra fields to the widget form. The hook is only fired if the value passed to the 'widget_form_callback' hook is not false.<\/p> <p>Note: If the widget has no form, the text echoed from the default form method can be hidden using CSS.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget instance (passed by reference).",
                        "types": [
                            "\\WP_Widget"
                        ],
                        "variable": "widget"
                    },
                    {
                        "name": "param",
                        "content": "Return null if new fields are added.",
                        "types": [
                            "null"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "An array of the widget's settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_methods",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 174,
            "doc": {
                "summary": "Filters the methods exposed by the XML-RPC server.",
                "description": "<p>This filter can be used to add new methods, and remove built-in methods.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of XML-RPC methods, keyed by their methodName.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "methods"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_enabled",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 219,
            "doc": {
                "summary": "Filters whether XML-RPC methods requiring authentication are enabled.",
                "description": "<p>Contrary to the way it's named, this filter does not control whether XML-RPC is <em>fully<\/em> enabled, rather, it only controls whether XML-RPC methods requiring authentication - such as for publishing purposes - are enabled.<\/p> <p>Further, the filter does not control whether pingbacks or other custom endpoints that don't require authentication are enabled. This behavior is expected, and due to how parity was matched with the <code>enable_xmlrpc<\/code> UI option the filter replaced when it was introduced in 3.5.<\/p> <p>To disable XML-RPC methods that require authentication, use:<\/p> <pre><code>add_filter( 'xmlrpc_enabled', '__return_false' );<\/code><\/pre> <p>For more granular control over all XML-RPC methods and requests, see the {@see 'xmlrpc_methods'} and {@see 'xmlrpc_element_limit'} hooks.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether XML-RPC is enabled. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_enabled"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_login_error",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 312,
            "doc": {
                "summary": "Filters the XML-RPC user login error message.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The XML-RPC error message.",
                        "types": [
                            "\\IXR_Error"
                        ],
                        "variable": "error"
                    },
                    {
                        "name": "param",
                        "content": "WP_Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_blog_options",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 677,
            "doc": {
                "summary": "Filters the XML-RPC blog options property.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of XML-RPC blog options.",
                        "types": [
                            "array"
                        ],
                        "variable": "blog_options"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 734,
            "doc": {
                "summary": "Fires after the XML-RPC user has been authenticated but before the rest of the method logic begins.",
                "description": "<p>All built-in XML-RPC methods use the action xmlrpc_call, with a parameter equal to the method's name, e.g., wp.getUsersBlogs, wp.newPost, etc.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.7.0",
                        "description": "Added the <code>$args<\/code> and <code>$server<\/code> parameters."
                    },
                    {
                        "name": "param",
                        "content": "The method name.",
                        "types": [
                            "string"
                        ],
                        "variable": "name"
                    },
                    {
                        "name": "param",
                        "content": "The escaped arguments passed to the method.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The XML-RPC server instance.",
                        "types": [
                            "\\wp_xmlrpc_server"
                        ],
                        "variable": "server"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_prepare_taxonomy",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 832,
            "doc": {
                "summary": "Filters XML-RPC-prepared data for the given taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of taxonomy data.",
                        "types": [
                            "array"
                        ],
                        "variable": "_taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy object.",
                        "types": [
                            "\\WP_Taxonomy"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "The subset of taxonomy fields to return.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_prepare_term",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 867,
            "doc": {
                "summary": "Filters XML-RPC-prepared data for the given term.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of term data.",
                        "types": [
                            "array"
                        ],
                        "variable": "_term"
                    },
                    {
                        "name": "param",
                        "content": "Term object or array.",
                        "types": [
                            "array",
                            "object"
                        ],
                        "variable": "term"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_prepare_post",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 994,
            "doc": {
                "summary": "Filters XML-RPC-prepared date for the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of modified post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "_post"
                    },
                    {
                        "name": "param",
                        "content": "An array of post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "An array of post fields.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_prepare_post_type",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 1047,
            "doc": {
                "summary": "Filters XML-RPC-prepared date for the given post type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Converted the <code>$post_type<\/code> parameter to accept a WP_Post_Type object."
                    },
                    {
                        "name": "param",
                        "content": "An array of post type data.",
                        "types": [
                            "array"
                        ],
                        "variable": "_post_type"
                    },
                    {
                        "name": "param",
                        "content": "Post type object.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_prepare_media_item",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 1086,
            "doc": {
                "summary": "Filters XML-RPC-prepared data for the given media item.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of media item data.",
                        "types": [
                            "array"
                        ],
                        "variable": "_media_item"
                    },
                    {
                        "name": "param",
                        "content": "Media item object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "media_item"
                    },
                    {
                        "name": "param",
                        "content": "Image size.",
                        "types": [
                            "string"
                        ],
                        "variable": "thumbnail_size"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_prepare_page",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 1166,
            "doc": {
                "summary": "Filters XML-RPC-prepared data for the given page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of page data.",
                        "types": [
                            "array"
                        ],
                        "variable": "_page"
                    },
                    {
                        "name": "param",
                        "content": "Page object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "page"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_prepare_comment",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 1213,
            "doc": {
                "summary": "Filters XML-RPC-prepared data for the given comment.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of prepared comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "_comment"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_prepare_user",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 1260,
            "doc": {
                "summary": "Filters XML-RPC-prepared data for the given user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of user data.",
                        "types": [
                            "array"
                        ],
                        "variable": "_user"
                    },
                    {
                        "name": "param",
                        "content": "User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "An array of user fields.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_wp_insert_post_data",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 1682,
            "doc": {
                "summary": "Filters post data array to be inserted via XML-RPC.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Parsed array of post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "post_data"
                    },
                    {
                        "name": "param",
                        "content": "Post data array.",
                        "types": [
                            "array"
                        ],
                        "variable": "content_struct"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_default_post_fields",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 1919,
            "doc": {
                "summary": "Filters the list of post query fields used by the given XML-RPC method.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of post fields. Default array contains 'post', 'terms', and 'custom_fields'.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "Method name.",
                        "types": [
                            "string"
                        ],
                        "variable": "method"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_default_taxonomy_fields",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 2550,
            "doc": {
                "summary": "Filters the taxonomy query fields used by the given XML-RPC method.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of taxonomy fields to retrieve.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "The method name.",
                        "types": [
                            "string"
                        ],
                        "variable": "method"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_default_user_fields",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 2694,
            "doc": {
                "summary": "Filters the default user query fields used by the given XML-RPC method.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "User query fields for given method. Default 'all'.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "The method name.",
                        "types": [
                            "string"
                        ],
                        "variable": "method"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_wp_deletePage",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 3148,
            "doc": {
                "summary": "Fires after a page has been successfully deleted via XML-RPC.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted page.",
                        "types": [
                            "int"
                        ],
                        "variable": "page_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to delete the page.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_wp_newCategory",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 3455,
            "doc": {
                "summary": "Fires after a new category has been successfully created via XML-RPC.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new category.",
                        "types": [
                            "int"
                        ],
                        "variable": "cat_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of new category arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_wp_deleteCategory",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 3505,
            "doc": {
                "summary": "Fires after a category has been successfully deleted via XML-RPC.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted category.",
                        "types": [
                            "int"
                        ],
                        "variable": "category_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to delete the category.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_wp_deleteComment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 3753,
            "doc": {
                "summary": "Fires after a comment has been successfully deleted via XML-RPC.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted comment.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to delete the comment.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_wp_editComment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 3865,
            "doc": {
                "summary": "Fires after a comment has been successfully updated via XML-RPC.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated comment.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to update the comment.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_allow_anonymous_comments",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 3902,
            "doc": {
                "summary": "Filters whether to allow anonymous comments over XML-RPC.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow anonymous commenting via XML-RPC.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_wp_newComment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 4020,
            "doc": {
                "summary": "Fires after a new comment has been successfully created via XML-RPC.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new comment.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of new comment arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_default_posttype_fields",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 4549,
            "doc": {
                "summary": "Filters the default query fields used by the given XML-RPC method.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of post type query fields for the given method.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "The method name.",
                        "types": [
                            "string"
                        ],
                        "variable": "method"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_default_revision_fields",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 4676,
            "doc": {
                "summary": "Filters the default revision query fields used by the given XML-RPC method.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of revision query fields.",
                        "types": [
                            "array"
                        ],
                        "variable": "field"
                    },
                    {
                        "name": "param",
                        "content": "The method name.",
                        "types": [
                            "string"
                        ],
                        "variable": "method"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_blogger_newPost",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 5150,
            "doc": {
                "summary": "Fires after a new post has been successfully created via the XML-RPC Blogger API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new post.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of new post arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_blogger_editPost",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 5229,
            "doc": {
                "summary": "Fires after a post has been successfully updated via the XML-RPC Blogger API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated post.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments for the post to edit.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_blogger_deletePost",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 5288,
            "doc": {
                "summary": "Fires after a post has been successfully deleted via the XML-RPC Blogger API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted post.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to delete the post.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_mw_newPost",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 5637,
            "doc": {
                "summary": "Fires after a new post has been successfully created via the XML-RPC MovableType API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new post.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to create the new post.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_mw_editPost",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 6021,
            "doc": {
                "summary": "Fires after a post has been successfully updated via the XML-RPC MovableType API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated post.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to update the post.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "pre_upload_error",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 6414,
            "doc": {
                "summary": "Filters whether to preempt the XML-RPC media upload.",
                "description": "<p>Returning a truthy value will effectively short-circuit the media upload, returning that value as a 500 error instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to pre-empt the media upload. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "error"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_call_success_mw_newMediaObject",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 6455,
            "doc": {
                "summary": "Fires after a new attachment has been added via the XML-RPC MovableType API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new attachment.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to add the attachment.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_text_filters",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 6721,
            "doc": {
                "summary": "Filters the MoveableType text filters list for XML-RPC.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of text filters.",
                        "types": [
                            "array"
                        ],
                        "variable": "filters"
                    }
                ]
            }
        },
        {
            "name": "pingback_ping_source_uri",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 6855,
            "doc": {
                "summary": "Filters the pingback source URI.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "URI of the page linked from.",
                        "types": [
                            "string"
                        ],
                        "variable": "pagelinkedfrom"
                    },
                    {
                        "name": "param",
                        "content": "URI of the page linked to.",
                        "types": [
                            "string"
                        ],
                        "variable": "pagelinkedto"
                    }
                ]
            }
        },
        {
            "name": "pre_remote_source",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 6963,
            "doc": {
                "summary": "Filters the pingback remote source.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Response source for the page linked from.",
                        "types": [
                            "string"
                        ],
                        "variable": "remote_source"
                    },
                    {
                        "name": "param",
                        "content": "URL of the page linked to.",
                        "types": [
                            "string"
                        ],
                        "variable": "pagelinkedto"
                    }
                ]
            }
        },
        {
            "name": "pingback_post",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 7059,
            "doc": {
                "summary": "Fires after a post pingback has been sent.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_pingback_error",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp-xmlrpc-server.php",
            "line": 7131,
            "doc": {
                "summary": "Filters the XML-RPC pingback error return.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.1"
                    },
                    {
                        "name": "param",
                        "content": "An IXR_Error object containing the error code and message.",
                        "types": [
                            "\\IXR_Error"
                        ],
                        "variable": "error"
                    }
                ]
            }
        },
        {
            "name": "do_parse_request",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp.php",
            "line": 148,
            "doc": {
                "summary": "Filters whether to parse the request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether or not to parse the request. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bool"
                    },
                    {
                        "name": "param",
                        "content": "Current WordPress environment instance.",
                        "types": [
                            "\\WP"
                        ],
                        "variable": "wp"
                    },
                    {
                        "name": "param",
                        "content": "Extra passed query variables.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "extra_query_vars"
                    }
                ]
            }
        },
        {
            "name": "query_vars",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp.php",
            "line": 299,
            "doc": {
                "summary": "Filters the query variables allowed before processing.",
                "description": "<p>Allows (publicly allowed) query vars to be added, removed, or changed prior to executing the query. Needed to allow custom rewrite rules using your own arguments to work, or any other custom query variables you want to be publicly available.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The array of allowed query variable names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "public_query_vars"
                    }
                ]
            }
        },
        {
            "name": "request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp.php",
            "line": 390,
            "doc": {
                "summary": "Filters the array of parsed query variables.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The array of requested query variables.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_vars"
                    }
                ]
            }
        },
        {
            "name": "parse_request",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp.php",
            "line": 399,
            "doc": {
                "summary": "Fires once all query variables for the current request have been parsed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WordPress environment instance (passed by reference).",
                        "types": [
                            "\\WP"
                        ],
                        "variable": "wp"
                    }
                ]
            }
        },
        {
            "name": "wp_headers",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp.php",
            "line": 529,
            "doc": {
                "summary": "Filters the HTTP headers before they're sent to the browser.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of headers to be sent.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "headers"
                    },
                    {
                        "name": "param",
                        "content": "Current WordPress environment instance.",
                        "types": [
                            "\\WP"
                        ],
                        "variable": "wp"
                    }
                ]
            }
        },
        {
            "name": "send_headers",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp.php",
            "line": 561,
            "doc": {
                "summary": "Fires once the requested HTTP headers for caching, content type, etc. have been sent.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WordPress environment instance (passed by reference).",
                        "types": [
                            "\\WP"
                        ],
                        "variable": "wp"
                    }
                ]
            }
        },
        {
            "name": "query_string",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wp.php",
            "line": 593,
            "endLine": 598,
            "doc": {
                "summary": "Filters the query string before parsing.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "2.1.0",
                        "description": "Use {@see 'query_vars'} or {@see 'request'} filters instead."
                    },
                    {
                        "name": "param",
                        "content": "The query string to modify.",
                        "types": [
                            "string"
                        ],
                        "variable": "query_string"
                    }
                ]
            }
        },
        {
            "name": "pre_handle_404",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wp.php",
            "line": 697,
            "doc": {
                "summary": "Filters whether to short-circuit default header status handling.",
                "description": "<p>Returning a non-false value from the filter will short-circuit the handling and return early.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to short-circuit default header status handling. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "preempt"
                    },
                    {
                        "name": "param",
                        "content": "WordPress Query object.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "wp_query"
                    }
                ]
            }
        },
        {
            "name": "wp",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wp.php",
            "line": 797,
            "doc": {
                "summary": "Fires once the WordPress environment has been set up.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WordPress environment instance (passed by reference).",
                        "types": [
                            "\\WP"
                        ],
                        "variable": "wp"
                    }
                ]
            }
        },
        {
            "name": "incompatible_sql_modes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wpdb.php",
            "line": 1006,
            "doc": {
                "summary": "Filters the list of incompatible SQL modes to exclude.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of incompatible modes.",
                        "types": [
                            "array"
                        ],
                        "variable": "incompatible_modes"
                    }
                ]
            }
        },
        {
            "name": "query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/class-wpdb.php",
            "line": 2285,
            "doc": {
                "summary": "Filters the database query.",
                "description": "<p>Some queries are made before the plugins have been loaded, and thus cannot be filtered with this method.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Database query.",
                        "types": [
                            "string"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "log_query_custom_data",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/class-wpdb.php",
            "line": 2474,
            "doc": {
                "summary": "Filters the custom data to log alongside a query.",
                "description": "<p>Caution should be used when modifying any of this data, it is recommended that any additional information you need to store about a query be added as a new associative array element.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Custom query data.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_data"
                    },
                    {
                        "name": "param",
                        "content": "The query's SQL.",
                        "types": [
                            "string"
                        ],
                        "variable": "query"
                    },
                    {
                        "name": "param",
                        "content": "Total time spent on the query, in seconds.",
                        "types": [
                            "float"
                        ],
                        "variable": "query_time"
                    },
                    {
                        "name": "param",
                        "content": "Comma-separated list of the calling functions.",
                        "types": [
                            "string"
                        ],
                        "variable": "query_callstack"
                    },
                    {
                        "name": "param",
                        "content": "Unix timestamp of the time at the start of the query.",
                        "types": [
                            "float"
                        ],
                        "variable": "query_start"
                    }
                ]
            }
        },
        {
            "name": "pre_get_table_charset",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/class-wpdb.php",
            "line": 3165,
            "doc": {
                "summary": "Filters the table charset value before the DB is checked.",
                "description": "<p>Returning a non-null value from the filter will effectively short-circuit checking the DB for the charset, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The character set to use, WP_Error object if it couldn't be found. Default null.",
                        "types": [
                            "string",
                            "\\WP_Error",
                            "null"
                        ],
                        "variable": "charset"
                    },
                    {
                        "name": "param",
                        "content": "The name of the table being checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "table"
                    }
                ]
            }
        },
        {
            "name": "pre_get_col_charset",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/class-wpdb.php",
            "line": 3270,
            "doc": {
                "summary": "Filters the column charset value before the DB is checked.",
                "description": "<p>Passing a non-null value to the filter will short-circuit checking the DB for the charset, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The character set to use. Default null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "charset"
                    },
                    {
                        "name": "param",
                        "content": "The name of the table being checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "table"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column being checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "column"
                    }
                ]
            }
        },
        {
            "name": "get_comment_author",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 49,
            "doc": {
                "summary": "Filters the returned comment author name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> and <code>$comment<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "The comment author's username.",
                        "types": [
                            "string"
                        ],
                        "variable": "author"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "comment_author",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 74,
            "doc": {
                "summary": "Filters the comment author's name for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The comment author's username.",
                        "types": [
                            "string"
                        ],
                        "variable": "author"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "get_comment_author_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 100,
            "doc": {
                "summary": "Filters the comment author's returned email address.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> and <code>$comment<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "The comment author's email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_author_email"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "author_email",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 131,
            "doc": {
                "summary": "Filters the comment author's email for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The comment author's email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "author_email"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "comment_email",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 194,
            "doc": {
                "summary": "Filters the comment author's email for display.",
                "description": "<p>Care should be taken to protect the email address and assure that email harvesters do not capture your commenter's email address.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The comment author's email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_author_email"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "comment_author_link_rel",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 246,
            "doc": {
                "summary": "Filters the rel attributes of the comment author's link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of strings representing the rel tags which will be joined into the anchor's rel attribute.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "rel_parts"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "get_comment_author_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 272,
            "doc": {
                "summary": "Filters the comment author's link for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$author<\/code> and <code>$comment_id<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "The HTML-formatted comment author link.<br>Empty for an invalid URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "The comment author's username.",
                        "types": [
                            "string"
                        ],
                        "variable": "author"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "get_comment_author_IP",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 311,
            "doc": {
                "summary": "Filters the comment author's returned IP address.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> and <code>$comment<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "The comment author's IP address, or an empty string if it's not available.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_author_ip"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "get_comment_author_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 358,
            "doc": {
                "summary": "Filters the comment author's URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> and <code>$comment<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "The comment author's URL, or an empty string.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string, or 0 if not found.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment object, or null if not found.",
                        "types": [
                            "\\WP_Comment",
                            "null"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "comment_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 383,
            "doc": {
                "summary": "Filters the comment author's URL for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The comment author's URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "author_url"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "get_comment_author_url_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 428,
            "doc": {
                "summary": "Filters the comment author's returned URL link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML-formatted comment author URL link.",
                        "types": [
                            "string"
                        ],
                        "variable": "return"
                    }
                ]
            }
        },
        {
            "name": "comment_class",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/comment-template.php",
            "line": 570,
            "doc": {
                "summary": "Filters the returned CSS classes for the current comment.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of comment classes.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "classes"
                    },
                    {
                        "name": "param",
                        "content": "An array of additional classes added to the list.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "css_class"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "The post ID or WP_Post object.",
                        "types": [
                            "int",
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_comment_date",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 600,
            "doc": {
                "summary": "Filters the returned comment date.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Formatted date string or Unix timestamp.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "date"
                    },
                    {
                        "name": "param",
                        "content": "PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "comment_excerpt_length",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 648,
            "doc": {
                "summary": "Filters the maximum number of words used in the comment excerpt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The amount of words you want to display in the comment excerpt.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_excerpt_length"
                    }
                ]
            }
        },
        {
            "name": "get_comment_excerpt",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 662,
            "doc": {
                "summary": "Filters the retrieved comment excerpt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> and <code>$comment<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "The comment excerpt text.",
                        "types": [
                            "string"
                        ],
                        "variable": "excerpt"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "comment_excerpt",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 687,
            "doc": {
                "summary": "Filters the comment excerpt for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The comment excerpt text.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_excerpt"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "get_comment_ID",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 710,
            "doc": {
                "summary": "Filters the returned comment ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The current comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "get_comment_link",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/comment-template.php",
            "line": 834,
            "doc": {
                "summary": "Filters the returned single comment permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$cpage<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_page_of_comment()"
                    },
                    {
                        "name": "param",
                        "content": "The comment permalink with '#comment-$id' appended.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "The current comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to override the defaults.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The calculated 'cpage' value.",
                        "types": [
                            "int"
                        ],
                        "variable": "cpage"
                    }
                ]
            }
        },
        {
            "name": "get_comments_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 857,
            "doc": {
                "summary": "Filters the returned post comments permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post comments permalink with '#comments' appended.",
                        "types": [
                            "string"
                        ],
                        "variable": "comments_link"
                    },
                    {
                        "name": "param",
                        "content": "Post ID or WP_Post object.",
                        "types": [
                            "int",
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_comments_number",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 901,
            "doc": {
                "summary": "Filters the returned comment count for a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "A string representing the number of comments a post has, otherwise 0.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "count"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "comments_number",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 980,
            "doc": {
                "summary": "Filters the comments count for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\_n()"
                    },
                    {
                        "name": "param",
                        "content": "A translatable string formatted based on whether the count is equal to 0, 1, or 1+.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "The number of post comments.",
                        "types": [
                            "int"
                        ],
                        "variable": "number"
                    }
                ]
            }
        },
        {
            "name": "get_comment_text",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1027,
            "doc": {
                "summary": "Filters the text of a comment.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\Walker_Comment::comment()"
                    },
                    {
                        "name": "param",
                        "content": "Text of the comment.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_content"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "comment_text",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1057,
            "doc": {
                "summary": "Filters the text of a comment to be displayed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\Walker_Comment::comment()"
                    },
                    {
                        "name": "param",
                        "content": "Text of the current comment.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_text"
                    },
                    {
                        "name": "param",
                        "content": "The comment object. Null if not found.",
                        "types": [
                            "\\WP_Comment",
                            "null"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_comment_time",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1098,
            "doc": {
                "summary": "Filters the returned comment time.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment time, formatted as a date string or Unix timestamp.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "date"
                    },
                    {
                        "name": "param",
                        "content": "PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "Whether the GMT date is in use.",
                        "types": [
                            "bool"
                        ],
                        "variable": "gmt"
                    },
                    {
                        "name": "param",
                        "content": "Whether the time is translated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "translate"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "get_comment_type",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1142,
            "doc": {
                "summary": "Filters the returned comment type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "The <code>$comment_id<\/code> and <code>$comment<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "The type of comment, such as 'comment', 'pingback', or 'trackback'.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_type"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "trackback_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1202,
            "doc": {
                "summary": "Filters the returned trackback URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The trackback URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "trackback_url"
                    }
                ]
            }
        },
        {
            "name": "comments_open",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1292,
            "doc": {
                "summary": "Filters whether the current post is open for comments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the current post is open for comments.",
                        "types": [
                            "bool"
                        ],
                        "variable": "open"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "pings_open",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1321,
            "doc": {
                "summary": "Filters whether the current post is open for pings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the current post is open for pings.",
                        "types": [
                            "bool"
                        ],
                        "variable": "open"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "comments_template_top_level_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1490,
            "doc": {
                "summary": "Filters the arguments used in the top level comments query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Comment_Query::__construct()"
                    },
                    {
                        "name": "param",
                        "content": "{     The top level query arguments for the comments template.<br>    @type bool         $count   Whether to return a comment count.<br>    @type string|array $orderby The field(s) to order by.<br>    @type int          $post_id The post ID.<br>    @type string|array $status  The comment status to limit results by.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "top_level_args"
                    }
                ]
            }
        },
        {
            "name": "comments_template_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1521,
            "doc": {
                "summary": "Filters the arguments used to query comments in comments_template().",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Comment_Query::__construct()"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of WP_Comment_Query arguments.<br>    @type string|array $orderby                   Field(s) to order by.<br>    @type string       $order                     Order of results. Accepts 'ASC' or 'DESC'.<br>    @type string       $status                    Comment status.<br>    @type array        $include_unapproved        Array of IDs or email addresses whose unapproved comments                                                   will be included in results.<br>    @type int          $post_id                   ID of the post.<br>    @type bool         $no_found_rows             Whether to refrain from querying for found rows.<br>    @type bool         $update_comment_meta_cache Whether to prime cache for comment meta.<br>    @type bool|string  $hierarchical              Whether to query for comments hierarchically.<br>    @type int          $offset                    Comment offset.<br>    @type int          $number                    Number of comments to fetch.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "comment_args"
                    }
                ]
            }
        },
        {
            "name": "comments_array",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1555,
            "doc": {
                "summary": "Filters the comments array.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of comments supplied to the comments template.",
                        "types": [
                            "array"
                        ],
                        "variable": "comments"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "comments_template",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1588,
            "doc": {
                "summary": "Filters the path to the theme template file used for the comments template.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The path to the theme template file.",
                        "types": [
                            "string"
                        ],
                        "variable": "theme_template"
                    }
                ]
            }
        },
        {
            "name": "respond_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1657,
            "doc": {
                "summary": "Filters the respond link when a post has no comments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The default response link.",
                        "types": [
                            "string"
                        ],
                        "variable": "respond_link"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "comments_popup_link_attributes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1675,
            "doc": {
                "summary": "Filters the comments link attributes for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comments link attributes. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "attributes"
                    }
                ]
            }
        },
        {
            "name": "comment_reply_link_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1762,
            "doc": {
                "summary": "Filters the comment reply link arguments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment reply link arguments. See get_comment_reply_link() for more information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The object of the comment being replied to.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "comment_reply_link",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1815,
            "doc": {
                "summary": "Filters the comment reply link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML markup for the comment reply link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments overriding the defaults.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The object of the comment being replied.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_comments_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1906,
            "doc": {
                "summary": "Filters the formatted post comments link HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML-formatted post comments link.",
                        "types": [
                            "string"
                        ],
                        "variable": "formatted"
                    },
                    {
                        "name": "param",
                        "content": "The post ID or WP_Post object.",
                        "types": [
                            "int",
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "cancel_comment_reply_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 1957,
            "doc": {
                "summary": "Filters the cancel comment reply link HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML-formatted cancel comment reply link.",
                        "types": [
                            "string"
                        ],
                        "variable": "formatted_link"
                    },
                    {
                        "name": "param",
                        "content": "Cancel comment reply link URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Cancel comment reply link text.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "comment_id_fields",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2002,
            "doc": {
                "summary": "Filters the returned comment ID fields.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML-formatted hidden ID field comment elements.",
                        "types": [
                            "string"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the comment being replied to.",
                        "types": [
                            "int"
                        ],
                        "variable": "reply_to_id"
                    }
                ]
            }
        },
        {
            "name": "wp_list_comments_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2202,
            "doc": {
                "summary": "Filters the arguments used in retrieving the comment list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_list_comments()"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments for displaying comments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "comment_form_comments_closed",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2437,
            "doc": {
                "summary": "Fires after the comment form if comments are closed.",
                "description": "<p>For backward compatibility, this action also fires if comment_form() is called with an invalid post object or ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "comment_form_default_fields",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2533,
            "doc": {
                "summary": "Filters the default comment form fields.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of the default comment fields.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "fields"
                    }
                ]
            }
        },
        {
            "name": "comment_form_defaults",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2606,
            "doc": {
                "summary": "Filters the comment form default arguments.",
                "description": "<p>Use {@see 'comment_form_default_fields'} to filter the comment fields.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The default comment form arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "defaults"
                    }
                ]
            }
        },
        {
            "name": "comment_form_before",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2625,
            "doc": {
                "summary": "Fires before the comment form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "comment_form_must_log_in_after",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2651,
            "doc": {
                "summary": "Fires after the HTML-formatted 'must log in after' message in the comment form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "comment_form_top",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2668,
            "doc": {
                "summary": "Fires at the top of the comment form, inside the form tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "comment_form_logged_in",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2684,
            "doc": {
                "summary": "Filters the 'logged in' message for the comment form for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML for the 'logged in as [user]' message, the Edit profile link, and the Log out link.",
                        "types": [
                            "string"
                        ],
                        "variable": "args_logged_in"
                    },
                    {
                        "name": "param",
                        "content": "An array containing the comment author's username, email, and URL.",
                        "types": [
                            "array"
                        ],
                        "variable": "commenter"
                    },
                    {
                        "name": "param",
                        "content": "If the commenter is a registered user, the display name, blank otherwise.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_identity"
                    }
                ]
            }
        },
        {
            "name": "comment_form_logged_in_after",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2696,
            "doc": {
                "summary": "Fires after the is_user_logged_in() check in the comment form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array containing the comment author's username, email, and URL.",
                        "types": [
                            "array"
                        ],
                        "variable": "commenter"
                    },
                    {
                        "name": "param",
                        "content": "If the commenter is a registered user, the display name, blank otherwise.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_identity"
                    }
                ]
            }
        },
        {
            "name": "comment_form_fields",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2714,
            "doc": {
                "summary": "Filters the comment form fields, including the textarea.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment fields.",
                        "types": [
                            "array"
                        ],
                        "variable": "comment_fields"
                    }
                ]
            }
        },
        {
            "name": "comment_form_field_comment",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2734,
            "doc": {
                "summary": "Filters the content of the comment textarea field for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The content of the comment textarea field.",
                        "types": [
                            "string"
                        ],
                        "variable": "args_comment_field"
                    }
                ]
            }
        },
        {
            "name": "comment_form_before_fields",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2746,
            "doc": {
                "summary": "Fires before the comment fields in the comment form, excluding the textarea.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "comment_form_field_{$name}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2767,
            "doc": {
                "summary": "Filters a comment form field for display.",
                "description": "<p>The dynamic portion of the hook name, <code>$name<\/code>, refers to the name of the comment form field.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>comment_form_field_comment<\/code><\/li> <li><code>comment_form_field_author<\/code><\/li> <li><code>comment_form_field_email<\/code><\/li> <li><code>comment_form_field_url<\/code><\/li> <li><code>comment_form_field_cookies<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML-formatted output of the comment form field.",
                        "types": [
                            "string"
                        ],
                        "variable": "field"
                    }
                ]
            }
        },
        {
            "name": "comment_form_after_fields",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2775,
            "doc": {
                "summary": "Fires after the comment fields in the comment form, excluding the textarea.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "comment_form_submit_button",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2796,
            "doc": {
                "summary": "Filters the submit button for the comment form to display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML markup for the submit button.",
                        "types": [
                            "string"
                        ],
                        "variable": "submit_button"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to comment_form().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "comment_form_submit_field",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2815,
            "doc": {
                "summary": "Filters the submit field for the comment form to display.",
                "description": "<p>The submit field includes the submit button, hidden fields for the comment form, and any wrapper markup.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML markup for the submit field.",
                        "types": [
                            "string"
                        ],
                        "variable": "submit_field"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to comment_form().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "comment_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2824,
            "doc": {
                "summary": "Fires at the bottom of the comment form, inside the closing form tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "comment_form_after",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/comment-template.php",
            "line": 2838,
            "doc": {
                "summary": "Fires after the comment form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "comment_max_links_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment.php",
            "line": 65,
            "doc": {
                "summary": "Filters the number of links found in a comment.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The number of links found.",
                        "types": [
                            "int"
                        ],
                        "variable": "num_links"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's URL. Included in allowed links total.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Content of the comment.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "get_comment",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 225,
            "doc": {
                "summary": "Fires after a comment is retrieved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment data.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "_comment"
                    }
                ]
            }
        },
        {
            "name": "get_default_comment_status",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment.php",
            "line": 315,
            "doc": {
                "summary": "Filters the default comment status for the given post type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Default status for the given post type, either 'open' or 'closed'.",
                        "types": [
                            "string"
                        ],
                        "variable": "status"
                    },
                    {
                        "name": "param",
                        "content": "Post type. Default is <code>post<\/code>.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Type of comment. Default is <code>comment<\/code>.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_type"
                    }
                ]
            }
        },
        {
            "name": "comment_cookie_lifetime",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 571,
            "doc": {
                "summary": "Filters the lifetime of the comment cookie in seconds.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment cookie lifetime. Default 30000000.",
                        "types": [
                            "int"
                        ],
                        "variable": "seconds"
                    }
                ]
            }
        },
        {
            "name": "pre_comment_author_name",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 600,
            "doc": {
                "summary": "Filters the comment author's name cookie before it is set.",
                "description": "<p>When this filter hook is evaluated in wp_filter_comment(), the comment author's name string is passed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment author name cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "author_cookie"
                    }
                ]
            }
        },
        {
            "name": "pre_comment_author_email",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 618,
            "doc": {
                "summary": "Filters the comment author's email cookie before it is set.",
                "description": "<p>When this filter hook is evaluated in wp_filter_comment(), the comment author's email string is passed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment author email cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "author_email_cookie"
                    }
                ]
            }
        },
        {
            "name": "pre_comment_author_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 636,
            "doc": {
                "summary": "Filters the comment author's URL cookie before it is set.",
                "description": "<p>When this filter hook is evaluated in wp_filter_comment(), the comment author's URL string is passed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment author URL cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "author_url_cookie"
                    }
                ]
            }
        },
        {
            "name": "duplicate_comment_id",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 694,
            "doc": {
                "summary": "Filters the ID, if any, of the duplicate comment found when creating a new comment.",
                "description": "<p>Return an empty value from this filter to allow what WP considers a duplicate comment.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the comment identified as a duplicate.",
                        "types": [
                            "int"
                        ],
                        "variable": "dupe_id"
                    },
                    {
                        "name": "param",
                        "content": "Data for the comment being created.",
                        "types": [
                            "array"
                        ],
                        "variable": "commentdata"
                    }
                ]
            }
        },
        {
            "name": "comment_duplicate_trigger",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 704,
            "doc": {
                "summary": "Fires immediately after a duplicate comment is detected.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "commentdata"
                    }
                ]
            }
        },
        {
            "name": "comment_duplicate_message",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 713,
            "doc": {
                "summary": "Filters duplicate comment error message.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Duplicate comment error message.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_duplicate_message"
                    }
                ]
            }
        },
        {
            "name": "check_comment_flood",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/comment.php",
            "line": 741,
            "endLine": 747,
            "doc": {
                "summary": "Fires immediately before a comment is marked approved.",
                "description": "<p>Allows checking for comment flooding.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$avoid_die<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$avoid_die<\/code> parameter was renamed to <code>$wp_error<\/code>."
                    },
                    {
                        "name": "param",
                        "content": "Comment author's IP address.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_author_ip"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's email.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_author_email"
                    },
                    {
                        "name": "param",
                        "content": "GMT date the comment was posted.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_date_gmt"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return a WP_Error object instead of executing wp_die() or die() if a comment flood is occurring.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_error"
                    }
                ]
            }
        },
        {
            "name": "wp_is_comment_flood",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/comment.php",
            "line": 764,
            "endLine": 771,
            "doc": {
                "summary": "Filters whether a comment is part of a comment flood.",
                "description": "<p>The default check is wp_check_comment_flood(). See check_comment_flood_db().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$avoid_die<\/code> parameter was renamed to <code>$wp_error<\/code>."
                    },
                    {
                        "name": "param",
                        "content": "Is a comment flooding occurring? Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_flood"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's IP address.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_author_ip"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's email.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_author_email"
                    },
                    {
                        "name": "param",
                        "content": "GMT date the comment was posted.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_date_gmt"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return a WP_Error object instead of executing wp_die() or die() if a comment flood is occurring.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_error"
                    }
                ]
            }
        },
        {
            "name": "pre_comment_approved",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 832,
            "doc": {
                "summary": "Filters a comment's approval status before it is set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Returning a WP_Error value from the filter will short-circuit comment insertion and allow skipping further processing."
                    },
                    {
                        "name": "param",
                        "content": "The approval status. Accepts 1, 0, 'spam', 'trash', or WP_Error.",
                        "types": [
                            "int",
                            "string",
                            "\\WP_Error"
                        ],
                        "variable": "approved"
                    },
                    {
                        "name": "param",
                        "content": "Comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "commentdata"
                    }
                ]
            }
        },
        {
            "name": "comment_flood_filter",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment.php",
            "line": 912,
            "doc": {
                "summary": "Filters the comment flood status.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether a comment flood is occurring. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bool"
                    },
                    {
                        "name": "param",
                        "content": "Timestamp of when the last comment was posted.",
                        "types": [
                            "int"
                        ],
                        "variable": "time_lastcomment"
                    },
                    {
                        "name": "param",
                        "content": "Timestamp of when the new comment was posted.",
                        "types": [
                            "int"
                        ],
                        "variable": "time_newcomment"
                    }
                ]
            }
        },
        {
            "name": "comment_flood_trigger",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 923,
            "doc": {
                "summary": "Fires before the comment flood message is triggered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Timestamp of when the last comment was posted.",
                        "types": [
                            "int"
                        ],
                        "variable": "time_lastcomment"
                    },
                    {
                        "name": "param",
                        "content": "Timestamp of when the new comment was posted.",
                        "types": [
                            "int"
                        ],
                        "variable": "time_newcomment"
                    }
                ]
            }
        },
        {
            "name": "comment_flood_message",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 935,
            "doc": {
                "summary": "Filters the comment flood error message.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment flood error message.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_flood_message"
                    }
                ]
            }
        },
        {
            "name": "get_page_of_comment_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 1167,
            "doc": {
                "summary": "Filters the arguments used to query comments in get_page_of_comment().",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Comment_Query::__construct()"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of WP_Comment_Query arguments.<br>    @type string $type               Limit paginated comments to those matching a given type.<br>                                     Accepts 'comment', 'trackback', 'pingback', 'pings'                                      (trackbacks and pingbacks), or 'all'. Default 'all'.<br>    @type int    $post_id            ID of the post.<br>    @type string $fields             Comment fields to return.<br>    @type bool   $count              Whether to return a comment count (true) or array                                      of comment objects (false).<br>    @type string $status             Comment status.<br>    @type int    $parent             Parent ID of comment to retrieve children of.<br>    @type array  $date_query         Date query clauses to limit comments by. See WP_Date_Query.<br>    @type array  $include_unapproved Array of IDs or email addresses whose unapproved comments                                      will be included in paginated comments.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "comment_args"
                    }
                ]
            }
        },
        {
            "name": "get_page_of_comment",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/comment.php",
            "line": 1209,
            "doc": {
                "summary": "Filters the calculated page on which a comment appears.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Introduced the <code>$comment_id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Comment page.",
                        "types": [
                            "int"
                        ],
                        "variable": "page"
                    },
                    {
                        "name": "param",
                        "content": "{     Arguments used to calculate pagination. These include arguments auto-detected by the function,     based on query vars, system settings, etc. For pristine arguments passed to the function,     see <code>$original_args<\/code>.<br>    @type string $type      Type of comments to count.<br>    @type int    $page      Calculated current page.<br>    @type int    $per_page  Calculated number of comments per page.<br>    @type int    $max_depth Maximum comment threading depth allowed.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of arguments passed to the function. Some or all of these may not be set.<br>    @type string $type      Type of comments to count.<br>    @type int    $page      Current comment page.<br>    @type int    $per_page  Number of comments per page.<br>    @type int    $max_depth Maximum comment threading depth allowed.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "original_args"
                    },
                    {
                        "name": "param",
                        "content": "ID of the comment.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_get_comment_fields_max_lengths",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 1264,
            "doc": {
                "summary": "Filters the lengths for the comment form fields.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of maximum lengths keyed by field name.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "lengths"
                    }
                ]
            }
        },
        {
            "name": "wp_blacklist_check",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/comment.php",
            "line": 1325,
            "endLine": 1331,
            "doc": {
                "summary": "Fires before the comment is tested for disallowed characters or words.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.5.0",
                        "description": "Use {@see 'wp_check_comment_disallowed_list'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Comment author.",
                        "types": [
                            "string"
                        ],
                        "variable": "author"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's email.",
                        "types": [
                            "string"
                        ],
                        "variable": "email"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Comment content.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's IP address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_ip"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's browser user agent.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_agent"
                    }
                ]
            }
        },
        {
            "name": "wp_check_comment_disallowed_list",
            "type": "action",
            "numArgs": 6,
            "path": "\/wp-includes\/comment.php",
            "line": 1345,
            "doc": {
                "summary": "Fires before the comment is tested for disallowed characters or words.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment author.",
                        "types": [
                            "string"
                        ],
                        "variable": "author"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's email.",
                        "types": [
                            "string"
                        ],
                        "variable": "email"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Comment content.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's IP address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_ip"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's browser user agent.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_agent"
                    }
                ]
            }
        },
        {
            "name": "wp_count_comments",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1418,
            "doc": {
                "summary": "Filters the comments count for a given post or the whole site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An empty array or an object containing comment counts.",
                        "types": [
                            "array",
                            "\\stdClass"
                        ],
                        "variable": "count"
                    },
                    {
                        "name": "param",
                        "content": "The post ID. Can be 0 to represent the whole site.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "delete_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1476,
            "doc": {
                "summary": "Fires immediately before a comment is deleted from the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be deleted.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "deleted_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1504,
            "doc": {
                "summary": "Fires immediately after a comment is deleted from the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The deleted comment.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "trash_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1550,
            "doc": {
                "summary": "Fires immediately before a comment is sent to the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be trashed.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "trashed_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1567,
            "doc": {
                "summary": "Fires immediately after a comment is sent to Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The trashed comment.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "untrash_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1598,
            "doc": {
                "summary": "Fires immediately before a comment is restored from the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be untrashed.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "untrashed_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1618,
            "doc": {
                "summary": "Fires immediately after a comment is restored from the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The untrashed comment.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "spam_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1649,
            "doc": {
                "summary": "Fires immediately before a comment is marked as Spam.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be marked as spam.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "spammed_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1666,
            "doc": {
                "summary": "Fires immediately after a comment is marked as Spam.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment marked as spam.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "unspam_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1697,
            "doc": {
                "summary": "Fires immediately before a comment is unmarked as Spam.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be unmarked as spam.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "unspammed_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1717,
            "doc": {
                "summary": "Fires immediately after a comment is unmarked as Spam.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment unmarked as spam.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "transition_comment_status",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/comment.php",
            "line": 1804,
            "doc": {
                "summary": "Fires when the comment status is in transition.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The new comment status.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "new_status"
                    },
                    {
                        "name": "param",
                        "content": "The old comment status.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "old_status"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "comment_{$old_status}_to_{$new_status}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 1824,
            "doc": {
                "summary": "Fires when the comment status is in transition from one specific status to another.",
                "description": "<p>The dynamic portions of the hook name, <code>$old_status<\/code>, and <code>$new_status<\/code>, refer to the old and new comment statuses, respectively.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>comment_unapproved_to_approved<\/code><\/li> <li><code>comment_spam_to_approved<\/code><\/li> <li><code>comment_approved_to_unapproved<\/code><\/li> <li><code>comment_spam_to_unapproved<\/code><\/li> <li><code>comment_unapproved_to_spam<\/code><\/li> <li><code>comment_approved_to_spam<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "comment_{$new_status}_{$comment->comment_type}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 1851,
            "doc": {
                "summary": "Fires when the status of a specific comment type is in transition.",
                "description": "<p>The dynamic portions of the hook name, <code>$new_status<\/code>, and <code>$comment-&gt;comment_type<\/code>, refer to the new comment status, and the type of comment, respectively.<\/p> <p>Typical comment types include 'comment', 'pingback', or 'trackback'.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>comment_approved_comment<\/code><\/li> <li><code>comment_approved_pingback<\/code><\/li> <li><code>comment_approved_trackback<\/code><\/li> <li><code>comment_unapproved_comment<\/code><\/li> <li><code>comment_unapproved_pingback<\/code><\/li> <li><code>comment_unapproved_trackback<\/code><\/li> <li><code>comment_spam_comment<\/code><\/li> <li><code>comment_spam_pingback<\/code><\/li> <li><code>comment_spam_trackback<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "wp_get_current_commenter",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 1925,
            "doc": {
                "summary": "Filters the current commenter's name, email, and URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of current commenter variables.<br>    @type string $comment_author       The name of the current commenter, or an empty string.<br>    @type string $comment_author_email The email address of the current commenter, or an empty string.<br>    @type string $comment_author_url   The URL address of the current commenter, or an empty string.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "comment_author_data"
                    }
                ]
            }
        },
        {
            "name": "wp_insert_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 2078,
            "doc": {
                "summary": "Fires immediately after a comment is inserted into the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "pre_user_id",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 2107,
            "doc": {
                "summary": "Filters the comment author's user ID before it is set.",
                "description": "<p>The first time this filter is evaluated, <code>user_ID<\/code> is checked (for back-compat), followed by the standard <code>user_id<\/code> value.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment author's user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "pre_comment_user_agent",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 2120,
            "doc": {
                "summary": "Filters the comment author's browser user agent before it is set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment author's browser user agent.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_agent"
                    }
                ]
            }
        },
        {
            "name": "pre_comment_content",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 2130,
            "doc": {
                "summary": "Filters the comment content before it is set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment content.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_content"
                    }
                ]
            }
        },
        {
            "name": "pre_comment_user_ip",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 2138,
            "doc": {
                "summary": "Filters the comment author's IP address before it is set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment author's IP address.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_author_ip"
                    }
                ]
            }
        },
        {
            "name": "preprocess_comment",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 2249,
            "doc": {
                "summary": "Filters a comment's data before it is sanitized and inserted into the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "Comment data includes the <code>comment_agent<\/code> and <code>comment_author_IP<\/code> values."
                    },
                    {
                        "name": "param",
                        "content": "Comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "commentdata"
                    }
                ]
            }
        },
        {
            "name": "comment_post",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/comment.php",
            "line": 2326,
            "doc": {
                "summary": "Fires immediately after a comment is inserted into the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The <code>$commentdata<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "1 if the comment is approved, 0 if not, 'spam' if spam.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "comment_approved"
                    },
                    {
                        "name": "param",
                        "content": "Comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "commentdata"
                    }
                ]
            }
        },
        {
            "name": "notify_post_author",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 2380,
            "doc": {
                "summary": "Filters whether to send the post author new comment notification emails, overriding the site setting.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to notify the post author about the new comment.",
                        "types": [
                            "bool"
                        ],
                        "variable": "maybe_notify"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the comment for the notification.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_set_comment_status",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 2460,
            "doc": {
                "summary": "Fires immediately after transitioning a comment's status from one to another in the database and removing the comment from the object cache, but prior to all status transition hooks.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "Current comment status. Possible values include 'hold', '0', 'approve', '1', 'spam', and 'trash'.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_status"
                    }
                ]
            }
        },
        {
            "name": "comment_save_pre",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 2543,
            "doc": {
                "summary": "Filters the comment content before it is updated in the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment data.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_content"
                    }
                ]
            }
        },
        {
            "name": "wp_update_comment_data",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment.php",
            "line": 2571,
            "doc": {
                "summary": "Filters the comment data immediately before it is updated in the database.",
                "description": "<p>Note: data being passed to the filter is already unslashed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Returning a WP_Error value from the filter will short-circuit comment update and allow skipping further processing."
                    },
                    {
                        "name": "param",
                        "content": "The new, processed comment data, or WP_Error.",
                        "types": [
                            "array",
                            "\\WP_Error"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The old, unslashed comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "The new, raw comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "commentarr"
                    }
                ]
            }
        },
        {
            "name": "edit_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 2632,
            "doc": {
                "summary": "Fires immediately after a comment is updated in the database.",
                "description": "<p>The hook also fires immediately before comment status transition hooks are fired.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Added the <code>$data<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "Comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_update_comment_count_now",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment.php",
            "line": 2753,
            "doc": {
                "summary": "Filters a post's comment count before it is updated in the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The new comment count. Default null.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "new"
                    },
                    {
                        "name": "param",
                        "content": "The old comment count.",
                        "types": [
                            "int"
                        ],
                        "variable": "old"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "wp_update_comment_count",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/comment.php",
            "line": 2774,
            "doc": {
                "summary": "Fires immediately after a post's comment count is updated in the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The new comment count.",
                        "types": [
                            "int"
                        ],
                        "variable": "new"
                    },
                    {
                        "name": "param",
                        "content": "The old comment count.",
                        "types": [
                            "int"
                        ],
                        "variable": "old"
                    }
                ]
            }
        },
        {
            "name": "do_all_pings",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/comment.php",
            "line": 2891,
            "doc": {
                "summary": "Fires immediately after the `do_pings` event to hook services individually.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    }
                ]
            }
        },
        {
            "name": "pre_ping",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3116,
            "doc": {
                "summary": "Fires just before pinging back links found in a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of link URLs to be checked (passed by reference).",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_links"
                    },
                    {
                        "name": "param",
                        "content": "Array of link URLs already pinged (passed by reference).",
                        "types": [
                            "string[]"
                        ],
                        "variable": "pung"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "pingback_useragent",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/comment.php",
            "line": 3144,
            "doc": {
                "summary": "Filters the user agent sent when pinging-back a URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The user agent concatenated with ' -- WordPress\/' and the WordPress version.",
                        "types": [
                            "string"
                        ],
                        "variable": "concat_useragent"
                    },
                    {
                        "name": "param",
                        "content": "The useragent.",
                        "types": [
                            "string"
                        ],
                        "variable": "useragent"
                    },
                    {
                        "name": "param",
                        "content": "The server URL being linked to.",
                        "types": [
                            "string"
                        ],
                        "variable": "pingback_server_url"
                    },
                    {
                        "name": "param",
                        "content": "URL of page linked to.",
                        "types": [
                            "string"
                        ],
                        "variable": "pagelinkedto"
                    },
                    {
                        "name": "param",
                        "content": "URL of page linked from.",
                        "types": [
                            "string"
                        ],
                        "variable": "pagelinkedfrom"
                    }
                ]
            }
        },
        {
            "name": "clean_comment_cache",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3293,
            "doc": {
                "summary": "Fires immediately after a comment has been removed from the object cache.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "close_comments_for_post_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3378,
            "doc": {
                "summary": "Filters the list of post types to automatically close comments for.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of post type names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_types"
                    }
                ]
            }
        },
        {
            "name": "comment_reply_to_unapproved_comment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 3504,
            "doc": {
                "summary": "Fires when a comment reply is attempted to an unapproved comment.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_post_id"
                    },
                    {
                        "name": "param",
                        "content": "Parent comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_parent"
                    }
                ]
            }
        },
        {
            "name": "comment_id_not_found",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3521,
            "doc": {
                "summary": "Fires when a comment is attempted on a post that does not exist.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_post_id"
                    }
                ]
            }
        },
        {
            "name": "comment_closed",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3545,
            "doc": {
                "summary": "Fires when a comment is attempted on a post that has comments closed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_post_id"
                    }
                ]
            }
        },
        {
            "name": "comment_on_trash",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3558,
            "doc": {
                "summary": "Fires when a comment is attempted on a trashed post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_post_id"
                    }
                ]
            }
        },
        {
            "name": "comment_on_draft",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3571,
            "doc": {
                "summary": "Fires when a comment is attempted on a post in draft mode.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_post_id"
                    }
                ]
            }
        },
        {
            "name": "comment_on_password_protected",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3587,
            "doc": {
                "summary": "Fires when a comment is attempted on a password-protected post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_post_id"
                    }
                ]
            }
        },
        {
            "name": "pre_comment_on_post",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3599,
            "doc": {
                "summary": "Fires before a comment is posted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_post_id"
                    }
                ]
            }
        },
        {
            "name": "allow_empty_comment",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/comment.php",
            "line": 3662,
            "doc": {
                "summary": "Filters whether an empty comment should be allowed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow empty comments. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow_empty_comment"
                    },
                    {
                        "name": "param",
                        "content": "Array of comment data to be sent to wp_insert_comment().",
                        "types": [
                            "array"
                        ],
                        "variable": "commentdata"
                    }
                ]
            }
        },
        {
            "name": "wp_anonymize_comment",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/comment.php",
            "line": 3876,
            "doc": {
                "summary": "Filters whether to anonymize the comment.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "Whether to apply the comment anonymization (bool) or a custom message (string). Default true.",
                        "types": [
                            "bool",
                            "string"
                        ],
                        "variable": "anon_message"
                    },
                    {
                        "name": "param",
                        "content": "WP_Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "Anonymized comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "anonymized_comment"
                    }
                ]
            }
        },
        {
            "name": "wp_update_comment_type_batch_size",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/comment.php",
            "line": 3976,
            "doc": {
                "summary": "Filters the comment batch size for updating the comment type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment batch size. Default 100.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_batch_size"
                    }
                ]
            }
        },
        {
            "name": "pre_schedule_event",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/cron.php",
            "line": 91,
            "doc": {
                "summary": "Filter to preflight or hijack scheduling an event.",
                "description": "<p>Returning a non-null value will short-circuit adding the event to the cron array, causing the function to return the filtered value instead.<\/p> <p>Both single events and recurring events are passed through this filter; single events have <code>$event-&gt;schedule<\/code> as false, whereas recurring events have this set to a recurrence from wp_get_schedules(). Recurring events also have the integer recurrence interval set as <code>$event-&gt;interval<\/code>.<\/p> <p>For plugins replacing wp-cron, it is recommended you check for an identical event within ten minutes and apply the {@see 'schedule_event'} filter to check if another plugin has disallowed the event before scheduling.<\/p> <p>Return true if the event was scheduled, false or a WP_Error if not.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.7.0",
                        "description": "The <code>$wp_error<\/code> parameter was added, and a <code>WP_Error<\/code> object can now be returned."
                    },
                    {
                        "name": "param",
                        "content": "The value to return instead. Default null to continue adding the event.",
                        "types": [
                            "null",
                            "bool",
                            "\\WP_Error"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "{     An object containing an event's data.<br>    @type string       $hook      Action hook to execute when the event is run.<br>    @type int          $timestamp Unix timestamp (UTC) for when to next run the event.<br>    @type string|false $schedule  How often the event should subsequently recur.<br>    @type array        $args      Array containing each separate argument to pass to the hook's callback function.<br>    @type int          $interval  Optional. The interval time in seconds for the schedule. Only present for recurring events.<br>}",
                        "types": [
                            "object"
                        ],
                        "variable": "event"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return a WP_Error on failure.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_error"
                    }
                ]
            }
        },
        {
            "name": "schedule_event",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/cron.php",
            "line": 177,
            "doc": {
                "summary": "Modify an event before it is scheduled.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An object containing an event's data, or boolean false to prevent the event from being scheduled.<br>    @type string       $hook      Action hook to execute when the event is run.<br>    @type int          $timestamp Unix timestamp (UTC) for when to next run the event.<br>    @type string|false $schedule  How often the event should subsequently recur.<br>    @type array        $args      Array containing each separate argument to pass to the hook's callback function.<br>    @type int          $interval  Optional. The interval time in seconds for the schedule. Only present for recurring events.<br>}",
                        "types": [
                            "object",
                            "false"
                        ],
                        "variable": "event"
                    }
                ]
            }
        },
        {
            "name": "pre_reschedule_event",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/cron.php",
            "line": 399,
            "doc": {
                "summary": "Filter to preflight or hijack rescheduling of a recurring event.",
                "description": "<p>Returning a non-null value will short-circuit the normal rescheduling process, causing the function to return the filtered value instead.<\/p> <p>For plugins replacing wp-cron, return true if the event was successfully rescheduled, false or a WP_Error if not.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.7.0",
                        "description": "The <code>$wp_error<\/code> parameter was added, and a <code>WP_Error<\/code> object can now be returned."
                    },
                    {
                        "name": "param",
                        "content": "Value to return instead. Default null to continue adding the event.",
                        "types": [
                            "null",
                            "bool",
                            "\\WP_Error"
                        ],
                        "variable": "pre"
                    },
                    {
                        "name": "param",
                        "content": "{     An object containing an event's data.<br>    @type string $hook      Action hook to execute when the event is run.<br>    @type int    $timestamp Unix timestamp (UTC) for when to next run the event.<br>    @type string $schedule  How often the event should subsequently recur.<br>    @type array  $args      Array containing each separate argument to pass to the hook's callback function.<br>    @type int    $interval  The interval time in seconds for the schedule.<br>}",
                        "types": [
                            "object"
                        ],
                        "variable": "event"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return a WP_Error on failure.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_error"
                    }
                ]
            }
        },
        {
            "name": "pre_unschedule_event",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/cron.php",
            "line": 490,
            "doc": {
                "summary": "Filter to preflight or hijack unscheduling of events.",
                "description": "<p>Returning a non-null value will short-circuit the normal unscheduling process, causing the function to return the filtered value instead.<\/p> <p>For plugins replacing wp-cron, return true if the event was successfully unscheduled, false or a WP_Error if not.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.7.0",
                        "description": "The <code>$wp_error<\/code> parameter was added, and a <code>WP_Error<\/code> object can now be returned."
                    },
                    {
                        "name": "param",
                        "content": "Value to return instead. Default null to continue unscheduling the event.",
                        "types": [
                            "null",
                            "bool",
                            "\\WP_Error"
                        ],
                        "variable": "pre"
                    },
                    {
                        "name": "param",
                        "content": "Timestamp for when to run the event.",
                        "types": [
                            "int"
                        ],
                        "variable": "timestamp"
                    },
                    {
                        "name": "param",
                        "content": "Action hook, the execution of which will be unscheduled.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook"
                    },
                    {
                        "name": "param",
                        "content": "Arguments to pass to the hook's callback function.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return a WP_Error on failure.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_error"
                    }
                ]
            }
        },
        {
            "name": "pre_clear_scheduled_hook",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/cron.php",
            "line": 570,
            "doc": {
                "summary": "Filter to preflight or hijack clearing a scheduled hook.",
                "description": "<p>Returning a non-null value will short-circuit the normal unscheduling process, causing the function to return the filtered value instead.<\/p> <p>For plugins replacing wp-cron, return the number of events successfully unscheduled (zero if no events were registered with the hook) or false or a WP_Error if unscheduling one or more events fails.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.7.0",
                        "description": "The <code>$wp_error<\/code> parameter was added, and a <code>WP_Error<\/code> object can now be returned."
                    },
                    {
                        "name": "param",
                        "content": "Value to return instead. Default null to continue unscheduling the event.",
                        "types": [
                            "null",
                            "int",
                            "false",
                            "\\WP_Error"
                        ],
                        "variable": "pre"
                    },
                    {
                        "name": "param",
                        "content": "Action hook, the execution of which will be unscheduled.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook"
                    },
                    {
                        "name": "param",
                        "content": "Arguments to pass to the hook's callback function.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return a WP_Error on failure.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_error"
                    }
                ]
            }
        },
        {
            "name": "pre_unschedule_hook",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/cron.php",
            "line": 659,
            "doc": {
                "summary": "Filter to preflight or hijack clearing all events attached to the hook.",
                "description": "<p>Returning a non-null value will short-circuit the normal unscheduling process, causing the function to return the filtered value instead.<\/p> <p>For plugins replacing wp-cron, return the number of events successfully unscheduled (zero if no events were registered with the hook) or false if unscheduling one or more events fails.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.7.0",
                        "description": "The <code>$wp_error<\/code> parameter was added, and a <code>WP_Error<\/code> object can now be returned."
                    },
                    {
                        "name": "param",
                        "content": "Value to return instead. Default null to continue unscheduling the hook.",
                        "types": [
                            "null",
                            "int",
                            "false",
                            "\\WP_Error"
                        ],
                        "variable": "pre"
                    },
                    {
                        "name": "param",
                        "content": "Action hook, the execution of which will be unscheduled.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return a WP_Error on failure.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_error"
                    }
                ]
            }
        },
        {
            "name": "pre_get_scheduled_event",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/cron.php",
            "line": 754,
            "doc": {
                "summary": "Filter to preflight or hijack retrieving a scheduled event.",
                "description": "<p>Returning a non-null value will short-circuit the normal process, returning the filtered value instead.<\/p> <p>Return false if the event does not exist, otherwise an event object should be returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Value to return instead. Default null to continue retrieving the event.",
                        "types": [
                            "null",
                            "false",
                            "object"
                        ],
                        "variable": "pre"
                    },
                    {
                        "name": "param",
                        "content": "Action hook of the event.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook"
                    },
                    {
                        "name": "param",
                        "content": "Array containing each separate argument to pass to the hook's callback function.<br>Although not passed to a callback, these arguments are used to uniquely identify the event.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Unix timestamp (UTC) of the event. Null to retrieve next scheduled event.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "timestamp"
                    }
                ]
            }
        },
        {
            "name": "cron_schedules",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/cron.php",
            "line": 1088,
            "doc": {
                "summary": "Filters the non-default cron schedules.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of non-default cron schedules keyed by the schedule name. Default empty array.<br>    @type array ...$0 {         Cron schedule information.<br>        @type int    $interval The schedule interval in seconds.<br>        @type string $display  The schedule display name.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "new_schedules"
                    }
                ]
            }
        },
        {
            "name": "get_schedule",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/cron.php",
            "line": 1121,
            "doc": {
                "summary": "Filters the schedule name for a hook.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Schedule for the hook. False if not found.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "schedule"
                    },
                    {
                        "name": "param",
                        "content": "Action hook to execute when cron is run.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook"
                    },
                    {
                        "name": "param",
                        "content": "Arguments to pass to the hook's callback function.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "pre_get_ready_cron_jobs",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/cron.php",
            "line": 1146,
            "doc": {
                "summary": "Filter to preflight or hijack retrieving ready cron jobs.",
                "description": "<p>Returning an array will short-circuit the normal retrieval of ready cron jobs, causing the function to return the filtered value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of ready cron tasks to return instead. Default null to continue using results from _get_cron_array().",
                        "types": [
                            "null",
                            "array[]"
                        ],
                        "variable": "pre"
                    }
                ]
            }
        },
        {
            "name": "wp_nav_menu_item_custom_fields_customize_template",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/customize\/class-wp-customize-nav-menu-item-control.php",
            "line": 145,
            "doc": {
                "summary": "Fires at the end of the form field template for nav menu items in the customizer.",
                "description": "<p>Additional fields can be rendered here and managed in JavaScript.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    }
                ]
            }
        },
        {
            "name": "customize_partial_render",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/customize\/class-wp-customize-partial.php",
            "line": 246,
            "doc": {
                "summary": "Filters partial rendering.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The partial value. Default false.",
                        "types": [
                            "string",
                            "array",
                            "false"
                        ],
                        "variable": "rendered"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Partial"
                        ],
                        "variable": "partial"
                    },
                    {
                        "name": "param",
                        "content": "Optional array of context data associated with the target container.",
                        "types": [
                            "array"
                        ],
                        "variable": "container_context"
                    }
                ]
            }
        },
        {
            "name": "customize_partial_render_{$partial->id}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/customize\/class-wp-customize-partial.php",
            "line": 260,
            "doc": {
                "summary": "Filters partial rendering for a specific partial.",
                "description": "<p>The dynamic portion of the hook name, <code>$partial-&gt;ID<\/code> refers to the partial ID.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The partial value. Default false.",
                        "types": [
                            "string",
                            "array",
                            "false"
                        ],
                        "variable": "rendered"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Partial"
                        ],
                        "variable": "partial"
                    },
                    {
                        "name": "param",
                        "content": "Optional array of context data associated with the target container.",
                        "types": [
                            "array"
                        ],
                        "variable": "container_context"
                    }
                ]
            }
        },
        {
            "name": "customize_dynamic_partial_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/customize\/class-wp-customize-selective-refresh.php",
            "line": 235,
            "doc": {
                "summary": "Filters a dynamic partial's constructor arguments.",
                "description": "<p>For a dynamic partial to be registered, this filter must be employed to override the default false value with an array of args to pass to the WP_Customize_Partial constructor.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The arguments to the WP_Customize_Partial constructor.",
                        "types": [
                            "false",
                            "array"
                        ],
                        "variable": "partial_args"
                    },
                    {
                        "name": "param",
                        "content": "ID for dynamic partial.",
                        "types": [
                            "string"
                        ],
                        "variable": "partial_id"
                    }
                ]
            }
        },
        {
            "name": "customize_dynamic_partial_class",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/customize\/class-wp-customize-selective-refresh.php",
            "line": 251,
            "doc": {
                "summary": "Filters the class used to construct partials.",
                "description": "<p>Allow non-statically created partials to be constructed with custom WP_Customize_Partial subclass.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Partial or a subclass.",
                        "types": [
                            "string"
                        ],
                        "variable": "partial_class"
                    },
                    {
                        "name": "param",
                        "content": "ID for dynamic partial.",
                        "types": [
                            "string"
                        ],
                        "variable": "partial_id"
                    },
                    {
                        "name": "param",
                        "content": "The arguments to the WP_Customize_Partial constructor.",
                        "types": [
                            "array"
                        ],
                        "variable": "partial_args"
                    }
                ]
            }
        },
        {
            "name": "customize_render_partials_before",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/customize\/class-wp-customize-selective-refresh.php",
            "line": 344,
            "doc": {
                "summary": "Fires immediately before partials are rendered.",
                "description": "<p>Plugins may do things like call wp_enqueue_scripts() and gather a list of the scripts and styles which may get enqueued in the response.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Selective refresh component.",
                        "types": [
                            "\\WP_Customize_Selective_Refresh"
                        ],
                        "variable": "refresh"
                    },
                    {
                        "name": "param",
                        "content": "Placements' context data for the partials rendered in the request.<br>The array is keyed by partial ID, with each item being an array of the placements' context data.",
                        "types": [
                            "array"
                        ],
                        "variable": "partials"
                    }
                ]
            }
        },
        {
            "name": "customize_render_partials_after",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/customize\/class-wp-customize-selective-refresh.php",
            "line": 393,
            "doc": {
                "summary": "Fires immediately after partials are rendered.",
                "description": "<p>Plugins may do things like call wp_footer() to scrape scripts output and return them via the {@see 'customize_render_partials_response'} filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Selective refresh component.",
                        "types": [
                            "\\WP_Customize_Selective_Refresh"
                        ],
                        "variable": "refresh"
                    },
                    {
                        "name": "param",
                        "content": "Placements' context data for the partials rendered in the request.<br>The array is keyed by partial ID, with each item being an array of the placements' context data.",
                        "types": [
                            "array"
                        ],
                        "variable": "partials"
                    }
                ]
            }
        },
        {
            "name": "customize_render_partials_response",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/customize\/class-wp-customize-selective-refresh.php",
            "line": 437,
            "doc": {
                "summary": "Filters the response from rendering the partials.",
                "description": "<p>Plugins may use this filter to inject <code>$scripts<\/code> and <code>$styles<\/code>, which are dependencies for the partials being rendered. The response data will be available to the client via the <code>render-partials-response<\/code> JS event, so the client can then inject the scripts and styles into the DOM if they have not already been enqueued there.<\/p> <p>If plugins do this, they'll need to take care for any scripts that do <code>document.write()<\/code> and make sure that these are not injected, or else to override the function to no-op, or else the page will be destroyed.<\/p> <p>Plugins should be aware that <code>$scripts<\/code> and <code>$styles<\/code> may eventually be included by default in the response.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Response.<br>    @type array $contents Associative array mapping a partial ID its corresponding array of contents                           for the containers requested.<br>    @type array $errors   List of errors triggered during rendering of partials, if <code>WP_DEBUG_DISPLAY<\/code>                           is enabled.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Selective refresh component.",
                        "types": [
                            "\\WP_Customize_Selective_Refresh"
                        ],
                        "variable": "refresh"
                    },
                    {
                        "name": "param",
                        "content": "Placements' context data for the partials rendered in the request.<br>The array is keyed by partial ID, with each item being an array of the placements' context data.",
                        "types": [
                            "array"
                        ],
                        "variable": "partials"
                    }
                ]
            }
        },
        {
            "name": "the_content_rss",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/deprecated.php",
            "line": 1689,
            "doc": {
                "summary": "Filters the post content in the context of an RSS feed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "Content of the current post.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "update_usermeta",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/deprecated.php",
            "line": 2343,
            "doc": {
                "summary": "",
                "tags": [
                    {
                        "name": "todo",
                        "content": "Might need fix because usermeta data is assumed to be already escaped"
                    }
                ]
            }
        },
        {
            "name": "richedit_pre",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/deprecated.php",
            "line": 3586,
            "doc": {
                "summary": "Filters text returned for the rich text editor.",
                "description": "<p>This filter is first evaluated, and the value returned, if an empty string is passed to wp_richedit_pre(). If an empty string is passed, it results in a break tag and line feed.<\/p> <p>If a non-empty string is passed, the filter is evaluated on the wp_richedit_pre() return after being formatted.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Text for the rich text editor.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    }
                ]
            }
        },
        {
            "name": "htmledit_pre",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/deprecated.php",
            "line": 3624,
            "doc": {
                "summary": "Filters the text before it is formatted for the HTML editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML-formatted text.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    }
                ]
            }
        },
        {
            "name": "shortcut_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/deprecated.php",
            "line": 3934,
            "doc": {
                "summary": "Filters the Press This bookmarklet link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The Press This bookmarklet link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_thumb_file",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/deprecated.php",
            "line": 4359,
            "doc": {
                "summary": "Filters the attachment thumbnail file path.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "File path to the attachment thumbnail.",
                        "types": [
                            "string"
                        ],
                        "variable": "thumbfile"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "embed_defaults",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/embed.php",
            "line": 91,
            "doc": {
                "summary": "Filters the default array of embed dimensions.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Indexed array of the embed width and height in pixels.<br>    @type int $0 The embed width.<br>    @type int $1 The embed height.<br>}",
                        "types": [
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "The URL that should be embedded.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "load_default_embeds",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/embed.php",
            "line": 201,
            "doc": {
                "summary": "Filters whether to load the default embed handlers.",
                "description": "<p>Returning a falsey value will prevent loading the default embed handlers.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to load the embeds library. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "maybe_load_embeds"
                    }
                ]
            }
        },
        {
            "name": "wp_audio_embed_handler",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/embed.php",
            "line": 214,
            "doc": {
                "summary": "Filters the audio embed handler callback.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Audio embed handler callback function.",
                        "types": [
                            "callable"
                        ],
                        "variable": "handler"
                    }
                ]
            }
        },
        {
            "name": "wp_video_embed_handler",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/embed.php",
            "line": 223,
            "doc": {
                "summary": "Filters the video embed handler callback.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Video embed handler callback function.",
                        "types": [
                            "callable"
                        ],
                        "variable": "handler"
                    }
                ]
            }
        },
        {
            "name": "wp_embed_handler_youtube",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/embed.php",
            "line": 258,
            "doc": {
                "summary": "Filters the YoutTube embed output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_embed_handler_youtube()"
                    },
                    {
                        "name": "param",
                        "content": "YouTube embed output.",
                        "types": [
                            "string"
                        ],
                        "variable": "embed"
                    },
                    {
                        "name": "param",
                        "content": "An array of embed attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "The original URL that was matched by the regex.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The original unmodified attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "rawattr"
                    }
                ]
            }
        },
        {
            "name": "wp_embed_handler_audio",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/embed.php",
            "line": 285,
            "doc": {
                "summary": "Filters the audio embed output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Audio embed output.",
                        "types": [
                            "string"
                        ],
                        "variable": "audio"
                    },
                    {
                        "name": "param",
                        "content": "An array of embed attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "The original URL that was matched by the regex.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The original unmodified attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "rawattr"
                    }
                ]
            }
        },
        {
            "name": "wp_embed_handler_video",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/embed.php",
            "line": 317,
            "doc": {
                "summary": "Filters the video embed output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Video embed output.",
                        "types": [
                            "string"
                        ],
                        "variable": "video"
                    },
                    {
                        "name": "param",
                        "content": "An array of embed attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "The original URL that was matched by the regex.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The original unmodified attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "rawattr"
                    }
                ]
            }
        },
        {
            "name": "oembed_discovery_links",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/embed.php",
            "line": 353,
            "doc": {
                "summary": "Filters the oEmbed discovery links HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML of the discovery links.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    }
                ]
            }
        },
        {
            "name": "post_embed_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/embed.php",
            "line": 429,
            "doc": {
                "summary": "Filters the URL to embed a specific post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The post embed URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "embed_url"
                    },
                    {
                        "name": "param",
                        "content": "The corresponding post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "oembed_endpoint_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/embed.php",
            "line": 465,
            "doc": {
                "summary": "Filters the oEmbed endpoint URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The URL to the oEmbed endpoint.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The permalink used for the <code>url<\/code> query arg.",
                        "types": [
                            "string"
                        ],
                        "variable": "permalink"
                    },
                    {
                        "name": "param",
                        "content": "The requested response format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    }
                ]
            }
        },
        {
            "name": "embed_html",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/embed.php",
            "line": 532,
            "doc": {
                "summary": "Filters the embed HTML output for a given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The default iframe tag to display embedded content.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Current post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Width of the response.",
                        "types": [
                            "int"
                        ],
                        "variable": "width"
                    },
                    {
                        "name": "param",
                        "content": "Height of the response.",
                        "types": [
                            "int"
                        ],
                        "variable": "height"
                    }
                ]
            }
        },
        {
            "name": "oembed_min_max_width",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/embed.php",
            "line": 569,
            "endLine": 575,
            "doc": {
                "summary": "Filters the allowed minimum and maximum widths for the oEmbed response.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Minimum and maximum widths for the oEmbed response.<br>    @type int $min Minimum width. Default 200.<br>    @type int $max Maximum width. Default 600.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "min_max_width"
                    }
                ]
            }
        },
        {
            "name": "oembed_response_data",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/embed.php",
            "line": 607,
            "doc": {
                "summary": "Filters the oEmbed response data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The response data.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The requested width.",
                        "types": [
                            "int"
                        ],
                        "variable": "width"
                    },
                    {
                        "name": "param",
                        "content": "The calculated height.",
                        "types": [
                            "int"
                        ],
                        "variable": "height"
                    }
                ]
            }
        },
        {
            "name": "oembed_iframe_title_attribute",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/embed.php",
            "line": 879,
            "doc": {
                "summary": "Filters the title attribute of the given oEmbed HTML iframe.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The title attribute.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "The oEmbed HTML result.",
                        "types": [
                            "string"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "A data object result from an oEmbed provider.",
                        "types": [
                            "object"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The URL of the content to be embedded.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "the_excerpt_embed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/embed.php",
            "line": 1017,
            "doc": {
                "summary": "Filters the post excerpt for the embed template.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The current post excerpt.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    }
                ]
            }
        },
        {
            "name": "enqueue_embed_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/embed.php",
            "line": 1056,
            "doc": {
                "summary": "Fires when scripts and styles are enqueued for the embed iframe.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ]
            }
        },
        {
            "name": "embed_site_title_html",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/embed.php",
            "line": 1219,
            "doc": {
                "summary": "Filters the site title HTML in the embed footer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The site title HTML.",
                        "types": [
                            "string"
                        ],
                        "variable": "site_title"
                    }
                ]
            }
        },
        {
            "name": "wp_fatal_error_handler_enabled",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/error-protection.php",
            "line": 139,
            "doc": {
                "summary": "Filters whether the fatal error handler is enabled.",
                "description": "<p><strong>Important:<\/strong> This filter runs before it can be used by plugins. It cannot be used by plugins, mu-plugins, or themes. To use this filter you must define a <code>$wp_filter<\/code> global before WordPress loads, usually in <code>wp-config.php<\/code>.<\/p> <p>Example:<\/p> <pre><code>$GLOBALS['wp_filter'] = array(\n    'wp_fatal_error_handler_enabled' =&gt; array(\n        10 =&gt; array(\n            array(\n                'accepted_args' =&gt; 0,\n                'function'      =&gt; function() {\n                    return false;\n                },\n            ),\n        ),\n    ),\n);<\/code><\/pre> <p>Alternatively you can use the <code>WP_DISABLE_FATAL_ERROR_HANDLER<\/code> constant.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "True if the fatal error handler is enabled, false otherwise.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enabled"
                    }
                ]
            }
        },
        {
            "name": "atom_comments_ns",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-atom-comments.php",
            "line": 27,
            "doc": {
                "summary": "Fires inside the feed tag in the Atom comment feed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "comments_atom_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-atom-comments.php",
            "line": 67,
            "doc": {
                "summary": "Fires at the end of the Atom comment feed header.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "comment_atom_entry",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/feed-atom-comments.php",
            "line": 138,
            "doc": {
                "summary": "Fires at the end of each Atom comment feed item.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the current comment.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the post the current comment is connected to.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_post_id"
                    }
                ]
            }
        },
        {
            "name": "atom_ns",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-atom.php",
            "line": 26,
            "doc": {
                "summary": "Fires at end of the Atom feed root to add namespaces.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "atom_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-atom.php",
            "line": 44,
            "doc": {
                "summary": "Fires just before the first Atom feed entry.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "atom_author",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-atom.php",
            "line": 65,
            "doc": {
                "summary": "Fires at the end of each Atom feed author entry.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    }
                ]
            }
        },
        {
            "name": "atom_entry",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-atom.php",
            "line": 91,
            "doc": {
                "summary": "Fires at the end of each Atom feed item.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "rdf_ns",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rdf.php",
            "line": 29,
            "doc": {
                "summary": "Fires at the end of the feed root to add namespaces.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "rdf_header",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rdf.php",
            "line": 56,
            "doc": {
                "summary": "Fires at the end of the RDF feed header.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "rdf_item",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rdf.php",
            "line": 95,
            "doc": {
                "summary": "Fires at the end of each RDF feed item.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "rss_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rss.php",
            "line": 26,
            "doc": {
                "summary": "Fires at the end of the RSS Feed Header.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "rss_item",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rss.php",
            "line": 43,
            "doc": {
                "summary": "Fires at the end of each RSS feed item.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "rss2_comments_ns",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rss2-comments.php",
            "line": 31,
            "doc": {
                "summary": "Fires at the end of the RSS root to add namespaces.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "commentsrss2_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rss2-comments.php",
            "line": 71,
            "doc": {
                "summary": "Fires at the end of the RSS2 comment feed header.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    }
                ]
            }
        },
        {
            "name": "commentrss2_item",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/feed-rss2-comments.php",
            "line": 116,
            "doc": {
                "summary": "Fires at the end of each RSS2 comment feed item.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the comment being displayed.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the post the comment is connected to.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_post_id"
                    }
                ]
            }
        },
        {
            "name": "rss_tag_pre",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/feed-rss2.php",
            "line": 21,
            "doc": {
                "summary": "Fires between the xml and rss tags in a feed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Type of feed. Possible values include 'rss2', 'rss2-comments', 'rdf', 'atom', and 'atom-comments'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "rss2_ns",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rss2.php",
            "line": 36,
            "doc": {
                "summary": "Fires at the end of the RSS root to add namespaces.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "rss_update_period",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed-rss2.php",
            "line": 59,
            "doc": {
                "summary": "Filters how often to update the RSS feed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The update period. Accepts 'hourly', 'daily', 'weekly', 'monthly', 'yearly'. Default 'hourly'.",
                        "types": [
                            "string"
                        ],
                        "variable": "duration"
                    }
                ]
            }
        },
        {
            "name": "rss_update_frequency",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed-rss2.php",
            "line": 74,
            "doc": {
                "summary": "Filters the RSS update frequency.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An integer passed as a string representing the frequency of RSS updates within the update period. Default '1'.",
                        "types": [
                            "string"
                        ],
                        "variable": "frequency"
                    }
                ]
            }
        },
        {
            "name": "rss2_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rss2.php",
            "line": 83,
            "doc": {
                "summary": "Fires at the end of the RSS2 Feed Header.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "rss2_item",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/feed-rss2.php",
            "line": 125,
            "doc": {
                "summary": "Fires at the end of each RSS2 feed item.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ]
            }
        },
        {
            "name": "get_bloginfo_rss",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/feed.php",
            "line": 40,
            "doc": {
                "summary": "Filters the bloginfo for use in RSS feeds.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\convert_chars()"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_bloginfo()"
                    },
                    {
                        "name": "param",
                        "content": "Converted string value of the blog information.",
                        "types": [
                            "string"
                        ],
                        "variable": "info"
                    },
                    {
                        "name": "param",
                        "content": "The type of blog information to retrieve.",
                        "types": [
                            "string"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "bloginfo_rss",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/feed.php",
            "line": 67,
            "doc": {
                "summary": "Filters the bloginfo for display in RSS feeds.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_bloginfo()"
                    },
                    {
                        "name": "param",
                        "content": "RSS container for the blog information.",
                        "types": [
                            "string"
                        ],
                        "variable": "rss_container"
                    },
                    {
                        "name": "param",
                        "content": "The type of blog information to retrieve.",
                        "types": [
                            "string"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "default_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 89,
            "doc": {
                "summary": "Filters the default feed type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Type of default feed. Possible values include 'rss2', 'atom'.<br>Default 'rss2'.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed_type"
                    }
                ]
            }
        },
        {
            "name": "get_wp_title_rss",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/feed.php",
            "line": 118,
            "doc": {
                "summary": "Filters the blog title for use as the feed title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$sep<\/code> parameter was deprecated and renamed to <code>$deprecated<\/code>."
                    },
                    {
                        "name": "param",
                        "content": "The current blog title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Unused.",
                        "types": [
                            "string"
                        ],
                        "variable": "deprecated"
                    }
                ]
            }
        },
        {
            "name": "wp_title_rss",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/feed.php",
            "line": 146,
            "doc": {
                "summary": "Filters the blog title for display of the feed title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$sep<\/code> parameter was deprecated and renamed to <code>$deprecated<\/code>."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_wp_title_rss()"
                    },
                    {
                        "name": "param",
                        "content": "The current blog title.",
                        "types": [
                            "string"
                        ],
                        "variable": "wp_title_rss"
                    },
                    {
                        "name": "param",
                        "content": "Unused.",
                        "types": [
                            "string"
                        ],
                        "variable": "deprecated"
                    }
                ]
            }
        },
        {
            "name": "the_title_rss",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 166,
            "doc": {
                "summary": "Filters the post title for use in a feed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The current post title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "the_content_feed",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/feed.php",
            "line": 206,
            "doc": {
                "summary": "Filters the post content for use in feeds.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The current post content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Type of feed. Possible values include 'rss2', 'atom'.<br>Default 'rss2'.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed_type"
                    }
                ]
            }
        },
        {
            "name": "the_excerpt_rss",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 234,
            "doc": {
                "summary": "Filters the post excerpt for a feed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The current post excerpt.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    }
                ]
            }
        },
        {
            "name": "the_permalink_rss",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 250,
            "doc": {
                "summary": "Filters the permalink to the post for use in feeds.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The current post permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_permalink"
                    }
                ]
            }
        },
        {
            "name": "comments_link_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 267,
            "doc": {
                "summary": "Filters the comments permalink for the current post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The current comment permalink with '#comments' appended.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_permalink"
                    }
                ]
            }
        },
        {
            "name": "comment_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 317,
            "doc": {
                "summary": "Filters the current comment's permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_comment_link()"
                    },
                    {
                        "name": "param",
                        "content": "The current comment permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_permalink"
                    }
                ]
            }
        },
        {
            "name": "comment_author_rss",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 337,
            "doc": {
                "summary": "Filters the current comment author for use in a feed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_comment_author()"
                    },
                    {
                        "name": "param",
                        "content": "The current comment author.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_author"
                    }
                ]
            }
        },
        {
            "name": "comment_text_rss",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 363,
            "doc": {
                "summary": "Filters the current comment content for use in a feed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The content of the current comment.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_text"
                    }
                ]
            }
        },
        {
            "name": "the_category_rss",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/feed.php",
            "line": 426,
            "doc": {
                "summary": "Filters all of the post categories for display in a feed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "All of the RSS post categories.",
                        "types": [
                            "string"
                        ],
                        "variable": "the_list"
                    },
                    {
                        "name": "param",
                        "content": "Type of feed. Possible values include 'rss2', 'atom'.<br>Default 'rss2'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "rss_enclosure",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 494,
            "doc": {
                "summary": "Filters the RSS enclosure HTML link tag for the current post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML link tag with a URI and other attributes.",
                        "types": [
                            "string"
                        ],
                        "variable": "html_link_tag"
                    }
                ]
            }
        },
        {
            "name": "atom_enclosure",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 559,
            "doc": {
                "summary": "Filters the atom enclosure HTML link tag for the current post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML link tag with a URI and other attributes.",
                        "types": [
                            "string"
                        ],
                        "variable": "html_link_tag"
                    }
                ]
            }
        },
        {
            "name": "self_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 683,
            "doc": {
                "summary": "Filters the current feed URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\set_url_scheme()"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_unslash()"
                    },
                    {
                        "name": "param",
                        "content": "The link for the feed with set URL scheme.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed_link"
                    }
                ]
            }
        },
        {
            "name": "get_feed_build_date",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/feed.php",
            "line": 741,
            "doc": {
                "summary": "Filters the date the last post or comment in the query was modified.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Date the last post or comment was modified in the query, in UTC.<br>False on failure.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "max_modified_time"
                    },
                    {
                        "name": "param",
                        "content": "The date format requested in get_feed_build_date().",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    }
                ]
            }
        },
        {
            "name": "feed_content_type",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/feed.php",
            "line": 774,
            "doc": {
                "summary": "Filters the content type for a specific feed type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Content type indicating the type of data that a feed contains.",
                        "types": [
                            "string"
                        ],
                        "variable": "content_type"
                    },
                    {
                        "name": "param",
                        "content": "Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "wp_feed_options",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/feed.php",
            "line": 827,
            "doc": {
                "summary": "Fires just before processing the SimplePie feed object.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "SimplePie feed object (passed by reference).",
                        "types": [
                            "\\SimplePie"
                        ],
                        "variable": "feed"
                    },
                    {
                        "name": "param",
                        "content": "URL of feed or array of URLs of feeds to retrieve.",
                        "types": [
                            "string",
                            "string[]"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "run_wptexturize",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 78,
            "doc": {
                "summary": "Filters whether to skip running wptexturize().",
                "description": "<p>Returning false from the filter will effectively short-circuit wptexturize() and return the original text passed to the function instead.<\/p> <p>The filter runs only once, the first time wptexturize() is called.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wptexturize()"
                    },
                    {
                        "name": "param",
                        "content": "Whether to short-circuit wptexturize().",
                        "types": [
                            "bool"
                        ],
                        "variable": "run_texturize"
                    }
                ]
            }
        },
        {
            "name": "no_texturize_tags",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 218,
            "doc": {
                "summary": "Filters the list of HTML elements not to texturize.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of HTML element names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "default_no_texturize_tags"
                    }
                ]
            }
        },
        {
            "name": "no_texturize_shortcodes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 226,
            "doc": {
                "summary": "Filters the list of shortcodes not to texturize.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of shortcode names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "default_no_texturize_shortcodes"
                    }
                ]
            }
        },
        {
            "name": "sanitize_file_name_chars",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 2046,
            "doc": {
                "summary": "Filters the list of characters to remove from a filename.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of characters to remove.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "special_chars"
                    },
                    {
                        "name": "param",
                        "content": "The original filename to be sanitized.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename_raw"
                    }
                ]
            }
        },
        {
            "name": "sanitize_file_name",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 2108,
            "doc": {
                "summary": "Filters a sanitized filename string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Sanitized filename.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename"
                    },
                    {
                        "name": "param",
                        "content": "The filename prior to sanitization.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename_raw"
                    }
                ]
            }
        },
        {
            "name": "sanitize_user",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/formatting.php",
            "line": 2153,
            "doc": {
                "summary": "Filters a sanitized username string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.1"
                    },
                    {
                        "name": "param",
                        "content": "Sanitized username.",
                        "types": [
                            "string"
                        ],
                        "variable": "username"
                    },
                    {
                        "name": "param",
                        "content": "The username prior to sanitization.",
                        "types": [
                            "string"
                        ],
                        "variable": "raw_username"
                    },
                    {
                        "name": "param",
                        "content": "Whether to limit the sanitization to specific characters.",
                        "types": [
                            "bool"
                        ],
                        "variable": "strict"
                    }
                ]
            }
        },
        {
            "name": "sanitize_key",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 2183,
            "doc": {
                "summary": "Filters a sanitized key string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Sanitized key.",
                        "types": [
                            "string"
                        ],
                        "variable": "sanitized_key"
                    },
                    {
                        "name": "param",
                        "content": "The key prior to sanitization.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    }
                ]
            }
        },
        {
            "name": "sanitize_title",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/formatting.php",
            "line": 2220,
            "doc": {
                "summary": "Filters a sanitized title string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Sanitized title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "The title prior to sanitization.",
                        "types": [
                            "string"
                        ],
                        "variable": "raw_title"
                    },
                    {
                        "name": "param",
                        "content": "The context for which the title is being sanitized.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "sanitize_html_class",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/formatting.php",
            "line": 2433,
            "doc": {
                "summary": "Filters a sanitized HTML class string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The sanitized HTML class.",
                        "types": [
                            "string"
                        ],
                        "variable": "sanitized"
                    },
                    {
                        "name": "param",
                        "content": "HTML class before sanitization.",
                        "types": [
                            "string"
                        ],
                        "variable": "classname"
                    },
                    {
                        "name": "param",
                        "content": "The fallback string.",
                        "types": [
                            "string"
                        ],
                        "variable": "fallback"
                    }
                ]
            }
        },
        {
            "name": "sanitize_locale_name",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 2456,
            "doc": {
                "summary": "Filters a sanitized locale name string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.1"
                    },
                    {
                        "name": "param",
                        "content": "The sanitized locale name.",
                        "types": [
                            "string"
                        ],
                        "variable": "sanitized"
                    },
                    {
                        "name": "param",
                        "content": "The locale name before sanitization.",
                        "types": [
                            "string"
                        ],
                        "variable": "locale_name"
                    }
                ]
            }
        },
        {
            "name": "format_to_edit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 2736,
            "doc": {
                "summary": "Filters the text to be formatted for editing.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The text, prior to formatting for editing.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "make_clickable_rel",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 3031,
            "doc": {
                "summary": "Filters the rel value that is added to URL matches converted to links.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The rel value.",
                        "types": [
                            "string"
                        ],
                        "variable": "rel"
                    },
                    {
                        "name": "param",
                        "content": "The matched URL being converted to a link tag.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "wp_targeted_link_rel",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 3331,
            "doc": {
                "summary": "Filters the rel values that are added to links with `target` attribute.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The rel values.",
                        "types": [
                            "string"
                        ],
                        "variable": "rel"
                    },
                    {
                        "name": "param",
                        "content": "The matched content of the link tag including all HTML attributes.",
                        "types": [
                            "string"
                        ],
                        "variable": "link_html"
                    }
                ]
            }
        },
        {
            "name": "smilies_src",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/formatting.php",
            "line": 3442,
            "doc": {
                "summary": "Filters the Smiley image URL before it's used in the image element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "URL for the smiley image.",
                        "types": [
                            "string"
                        ],
                        "variable": "smiley_url"
                    },
                    {
                        "name": "param",
                        "content": "Filename for the smiley image.",
                        "types": [
                            "string"
                        ],
                        "variable": "img"
                    },
                    {
                        "name": "param",
                        "content": "Site URL, as returned by site_url().",
                        "types": [
                            "string"
                        ],
                        "variable": "site_url"
                    }
                ]
            }
        },
        {
            "name": "is_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/formatting.php",
            "line": 3530,
            "doc": {
                "summary": "Filters whether an email address is valid.",
                "description": "<p>This filter is evaluated under several different contexts, such as 'email_too_short', 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits', 'domain_no_periods', 'sub_hyphen_limits', 'sub_invalid_chars', or no specific context.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The email address if successfully passed the is_email() checks, false otherwise.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "is_email"
                    },
                    {
                        "name": "param",
                        "content": "The email address being checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "email"
                    },
                    {
                        "name": "param",
                        "content": "Context under which the email was tested.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "sanitize_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/formatting.php",
            "line": 3740,
            "doc": {
                "summary": "Filters a sanitized email address.",
                "description": "<p>This filter is evaluated under several contexts, including 'email_too_short', 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits', 'domain_no_periods', 'domain_no_valid_subs', or no context.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The sanitized email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "sanitized_email"
                    },
                    {
                        "name": "param",
                        "content": "The email address, as provided to sanitize_email().",
                        "types": [
                            "string"
                        ],
                        "variable": "email"
                    },
                    {
                        "name": "param",
                        "content": "A message to pass to the user. null if email is sanitized.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "message"
                    }
                ]
            }
        },
        {
            "name": "human_time_diff",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/formatting.php",
            "line": 3899,
            "doc": {
                "summary": "Filters the human readable difference between two timestamps.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The difference in human readable text.",
                        "types": [
                            "string"
                        ],
                        "variable": "since"
                    },
                    {
                        "name": "param",
                        "content": "The difference in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "diff"
                    },
                    {
                        "name": "param",
                        "content": "Unix timestamp from which the difference begins.",
                        "types": [
                            "int"
                        ],
                        "variable": "from"
                    },
                    {
                        "name": "param",
                        "content": "Unix timestamp to end the time difference.",
                        "types": [
                            "int"
                        ],
                        "variable": "to"
                    }
                ]
            }
        },
        {
            "name": "excerpt_length",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 3941,
            "doc": {
                "summary": "Filters the maximum number of words in a post excerpt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The maximum number of words. Default 55.",
                        "types": [
                            "int"
                        ],
                        "variable": "number"
                    }
                ]
            }
        },
        {
            "name": "excerpt_more",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 3950,
            "doc": {
                "summary": "Filters the string in the \"more\" link displayed after a trimmed excerpt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The string shown within the more link.",
                        "types": [
                            "string"
                        ],
                        "variable": "more_string"
                    }
                ]
            }
        },
        {
            "name": "wp_trim_excerpt",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 3962,
            "doc": {
                "summary": "Filters the trimmed excerpt string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The trimmed text.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "The text prior to trimming.",
                        "types": [
                            "string"
                        ],
                        "variable": "raw_excerpt"
                    }
                ]
            }
        },
        {
            "name": "wp_trim_words",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/formatting.php",
            "line": 4016,
            "doc": {
                "summary": "Filters the text content after words have been trimmed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The trimmed text.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "The number of words to trim the text to. Default 55.",
                        "types": [
                            "int"
                        ],
                        "variable": "num_words"
                    },
                    {
                        "name": "param",
                        "content": "An optional string to append to the end of the trimmed text, e.g. &hellip;.",
                        "types": [
                            "string"
                        ],
                        "variable": "more"
                    },
                    {
                        "name": "param",
                        "content": "The text before it was trimmed.",
                        "types": [
                            "string"
                        ],
                        "variable": "original_text"
                    }
                ]
            }
        },
        {
            "name": "pre_ent2ncr",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 4039,
            "doc": {
                "summary": "Filters text before named entities are converted into numbered entities.",
                "description": "<p>A non-null string must be returned for the filter to be evaluated.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The text to be converted. Default null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "converted_text"
                    },
                    {
                        "name": "param",
                        "content": "The text prior to entity conversion.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "format_for_editor",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 4338,
            "doc": {
                "summary": "Filters the text after it is formatted for the editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The formatted text.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "The default editor for the current user.<br>It is usually either 'html' or 'tinymce'.",
                        "types": [
                            "string"
                        ],
                        "variable": "default_editor"
                    }
                ]
            }
        },
        {
            "name": "clean_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/formatting.php",
            "line": 4503,
            "doc": {
                "summary": "Filters a string cleaned and escaped for output as a URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The cleaned URL to be returned.",
                        "types": [
                            "string"
                        ],
                        "variable": "good_protocol_url"
                    },
                    {
                        "name": "param",
                        "content": "The URL prior to cleaning.",
                        "types": [
                            "string"
                        ],
                        "variable": "original_url"
                    },
                    {
                        "name": "param",
                        "content": "If 'display', replace ampersands and single quotes only.",
                        "types": [
                            "string"
                        ],
                        "variable": "_context"
                    }
                ]
            }
        },
        {
            "name": "js_escape",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 4588,
            "doc": {
                "summary": "Filters a string cleaned and escaped for output in JavaScript.",
                "description": "<p>Text passed to esc_js() is stripped of invalid or special characters, and properly slashed for output.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.6"
                    },
                    {
                        "name": "param",
                        "content": "The text after it has been escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "safe_text"
                    },
                    {
                        "name": "param",
                        "content": "The text prior to being escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "esc_html",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 4613,
            "doc": {
                "summary": "Filters a string cleaned and escaped for output in HTML.",
                "description": "<p>Text passed to esc_html() is stripped of invalid or special characters before output.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The text after it has been escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "safe_text"
                    },
                    {
                        "name": "param",
                        "content": "The text prior to being escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "attribute_escape",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 4638,
            "doc": {
                "summary": "Filters a string cleaned and escaped for output in an HTML attribute.",
                "description": "<p>Text passed to esc_attr() is stripped of invalid or special characters before output.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.6"
                    },
                    {
                        "name": "param",
                        "content": "The text after it has been escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "safe_text"
                    },
                    {
                        "name": "param",
                        "content": "The text prior to being escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "esc_textarea",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 4659,
            "doc": {
                "summary": "Filters a string cleaned and escaped for output in a textarea element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The text after it has been escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "safe_text"
                    },
                    {
                        "name": "param",
                        "content": "The text prior to being escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "esc_xml",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 4716,
            "doc": {
                "summary": "Filters a string cleaned and escaped for output in XML.",
                "description": "<p>Text passed to esc_xml() is stripped of invalid or special characters before output. HTML named character references are converted to their equivalent code points.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The text after it has been escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "safe_text"
                    },
                    {
                        "name": "param",
                        "content": "The text prior to being escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "tag_escape",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 4737,
            "doc": {
                "summary": "Filters a string cleaned and escaped for output as an HTML tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The tag name after it has been escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "safe_tag"
                    },
                    {
                        "name": "param",
                        "content": "The text before it was escaped.",
                        "types": [
                            "string"
                        ],
                        "variable": "tag_name"
                    }
                ]
            }
        },
        {
            "name": "sanitize_option_{$option}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/formatting.php",
            "line": 5036,
            "doc": {
                "summary": "Filters an option value following sanitization.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.3.0",
                        "description": "Added the <code>$original_value<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The sanitized option value.",
                        "types": [
                            "string"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "The original value passed to the function.",
                        "types": [
                            "string"
                        ],
                        "variable": "original_value"
                    }
                ]
            }
        },
        {
            "name": "wp_parse_str",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 5085,
            "doc": {
                "summary": "Filters the array of variables derived from a parsed string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.1"
                    },
                    {
                        "name": "param",
                        "content": "The array populated with variables.",
                        "types": [
                            "array"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "wp_sprintf",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 5203,
            "doc": {
                "summary": "Filters a fragment from the pattern passed to wp_sprintf().",
                "description": "<p>If the fragment is unchanged, then sprintf() will be run on the fragment.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "A fragment from the pattern.",
                        "types": [
                            "string"
                        ],
                        "variable": "fragment"
                    },
                    {
                        "name": "param",
                        "content": "The argument.",
                        "types": [
                            "string"
                        ],
                        "variable": "arg"
                    }
                ]
            }
        },
        {
            "name": "wp_sprintf_l",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 5254,
            "endLine": 5264,
            "doc": {
                "summary": "Filters the translated delimiters used by wp_sprintf_l().",
                "description": "<p>Placeholders (%s) are included to assist translators and then removed before the array of strings reaches the filter.<\/p> <p>Please note: Ampersands and entities should be avoided here.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of translated delimiters.",
                        "types": [
                            "array"
                        ],
                        "variable": "delimiters"
                    }
                ]
            }
        },
        {
            "name": "sanitize_text_field",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 5498,
            "doc": {
                "summary": "Filters a sanitized text field string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The sanitized string.",
                        "types": [
                            "string"
                        ],
                        "variable": "filtered"
                    },
                    {
                        "name": "param",
                        "content": "The string prior to being sanitized.",
                        "types": [
                            "string"
                        ],
                        "variable": "str"
                    }
                ]
            }
        },
        {
            "name": "sanitize_textarea_field",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 5526,
            "doc": {
                "summary": "Filters a sanitized textarea field string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The sanitized string.",
                        "types": [
                            "string"
                        ],
                        "variable": "filtered"
                    },
                    {
                        "name": "param",
                        "content": "The string prior to being sanitized.",
                        "types": [
                            "string"
                        ],
                        "variable": "str"
                    }
                ]
            }
        },
        {
            "name": "sanitize_mime_type",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 5641,
            "doc": {
                "summary": "Filters a mime type following sanitization.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.3"
                    },
                    {
                        "name": "param",
                        "content": "The sanitized mime type.",
                        "types": [
                            "string"
                        ],
                        "variable": "sani_mime_type"
                    },
                    {
                        "name": "param",
                        "content": "The mime type prior to sanitization.",
                        "types": [
                            "string"
                        ],
                        "variable": "mime_type"
                    }
                ]
            }
        },
        {
            "name": "sanitize_trackback_urls",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/formatting.php",
            "line": 5672,
            "doc": {
                "summary": "Filters a list of trackback URLs following sanitization.",
                "description": "<p>The string returned here consists of a space or carriage return-delimited list of trackback URLs.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Sanitized space or carriage return separated URLs.",
                        "types": [
                            "string"
                        ],
                        "variable": "urls_to_ping"
                    },
                    {
                        "name": "param",
                        "content": "Space or carriage return separated URLs before sanitization.",
                        "types": [
                            "string"
                        ],
                        "variable": "to_ping"
                    }
                ]
            }
        },
        {
            "name": "wp_spaces_regexp",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 5761,
            "doc": {
                "summary": "Filters the regexp for common whitespace characters.",
                "description": "<p>This string is substituted for the \\s sequence as needed in regular expressions. For websites not written in English, different characters may represent whitespace. For websites not encoded in UTF-8, the 0xC2 0xA0 sequence may not be in use.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Regexp pattern for matching common whitespace characters.",
                        "types": [
                            "string"
                        ],
                        "variable": "spaces"
                    }
                ]
            }
        },
        {
            "name": "emoji_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 5833,
            "doc": {
                "summary": "Filters the URL where emoji png images are hosted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The emoji base URL for png images.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "emoji_ext",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 5842,
            "doc": {
                "summary": "Filters the extension of the emoji png files.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The emoji extension for png files. Default .png.",
                        "types": [
                            "string"
                        ],
                        "variable": "extension"
                    }
                ]
            }
        },
        {
            "name": "emoji_svg_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 5851,
            "doc": {
                "summary": "Filters the URL where emoji SVG images are hosted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The emoji base URL for svg images.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "emoji_svg_ext",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/formatting.php",
            "line": 5860,
            "doc": {
                "summary": "Filters the extension of the emoji SVG files.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The emoji extension for svg files. Default .svg.",
                        "types": [
                            "string"
                        ],
                        "variable": "extension"
                    }
                ]
            }
        },
        {
            "name": "date_i18n",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/functions.php",
            "line": 215,
            "doc": {
                "summary": "Filters the date formatted based on the locale.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Formatted date string.",
                        "types": [
                            "string"
                        ],
                        "variable": "date"
                    },
                    {
                        "name": "param",
                        "content": "Format to display the date.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "A sum of Unix timestamp and timezone offset in seconds.<br>Might be without offset if input omitted timestamp but requested GMT.",
                        "types": [
                            "int"
                        ],
                        "variable": "timestamp"
                    },
                    {
                        "name": "param",
                        "content": "Whether to use GMT timezone. Only applies if timestamp was not provided.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "gmt"
                    }
                ]
            }
        },
        {
            "name": "wp_date",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/functions.php",
            "line": 313,
            "doc": {
                "summary": "Filters the date formatted based on the locale.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Formatted date string.",
                        "types": [
                            "string"
                        ],
                        "variable": "date"
                    },
                    {
                        "name": "param",
                        "content": "Format to display the date.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "Unix timestamp.",
                        "types": [
                            "int"
                        ],
                        "variable": "timestamp"
                    },
                    {
                        "name": "param",
                        "content": "Timezone.",
                        "types": [
                            "\\DateTimeZone"
                        ],
                        "variable": "timezone"
                    }
                ]
            }
        },
        {
            "name": "number_format_i18n",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/functions.php",
            "line": 438,
            "doc": {
                "summary": "Filters the number formatted based on the locale.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>$number<\/code> and <code>$decimals<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "Converted number in string format.",
                        "types": [
                            "string"
                        ],
                        "variable": "formatted"
                    },
                    {
                        "name": "param",
                        "content": "The number to convert based on locale.",
                        "types": [
                            "float"
                        ],
                        "variable": "number"
                    },
                    {
                        "name": "param",
                        "content": "Precision of the number of decimal places.",
                        "types": [
                            "int"
                        ],
                        "variable": "decimals"
                    }
                ]
            }
        },
        {
            "name": "enclosure_links",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/functions.php",
            "line": 937,
            "doc": {
                "summary": "Filters the list of enclosure links before querying the database.",
                "description": "<p>Allows for the addition and\/or removal of potential enclosures to save to postmeta before checking the database for existing enclosures.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of enclosure links.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_links"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "removable_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 1265,
            "doc": {
                "summary": "Filters the list of query variable names to remove.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of query variable names to remove from a URL.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "removable_query_args"
                    }
                ]
            }
        },
        {
            "name": "status_header",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/functions.php",
            "line": 1470,
            "doc": {
                "summary": "Filters an HTTP status header.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "HTTP status header.",
                        "types": [
                            "string"
                        ],
                        "variable": "status_header"
                    },
                    {
                        "name": "param",
                        "content": "HTTP status code.",
                        "types": [
                            "int"
                        ],
                        "variable": "code"
                    },
                    {
                        "name": "param",
                        "content": "Description for the status code.",
                        "types": [
                            "string"
                        ],
                        "variable": "description"
                    },
                    {
                        "name": "param",
                        "content": "Server protocol.",
                        "types": [
                            "string"
                        ],
                        "variable": "protocol"
                    }
                ]
            }
        },
        {
            "name": "nocache_headers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 1504,
            "doc": {
                "summary": "Filters the cache-controlling headers.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_get_nocache_headers()"
                    },
                    {
                        "name": "param",
                        "content": "Header names and field values.",
                        "types": [
                            "array"
                        ],
                        "variable": "headers"
                    }
                ]
            }
        },
        {
            "name": "do_feed_{$feed}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/functions.php",
            "line": 1624,
            "doc": {
                "summary": "Fires once the given feed is loaded.",
                "description": "<p>The dynamic portion of the hook name, <code>$feed<\/code>, refers to the feed template name.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>do_feed_atom<\/code><\/li> <li><code>do_feed_rdf<\/code><\/li> <li><code>do_feed_rss<\/code><\/li> <li><code>do_feed_rss2<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$feed<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Whether the feed is a comment feed.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_comment_feed"
                    },
                    {
                        "name": "param",
                        "content": "The feed name.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    }
                ]
            }
        },
        {
            "name": "do_robotstxt",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/functions.php",
            "line": 1699,
            "doc": {
                "summary": "Fires when displaying the robots.txt file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "robots_txt",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/functions.php",
            "line": 1717,
            "doc": {
                "summary": "Filters the robots.txt output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The robots.txt output.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Whether the site is considered &quot;public&quot;.",
                        "types": [
                            "bool"
                        ],
                        "variable": "public"
                    }
                ]
            }
        },
        {
            "name": "do_faviconico",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/functions.php",
            "line": 1731,
            "doc": {
                "summary": "Fires when serving the favicon.ico file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    }
                ]
            }
        },
        {
            "name": "upload_dir",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 2363,
            "doc": {
                "summary": "Filters the uploads directory data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of information about the upload directory.<br>    @type string       $path    Base directory and subdirectory or full path to upload directory.<br>    @type string       $url     Base URL and subdirectory or absolute URL to upload directory.<br>    @type string       $subdir  Subdirectory if uploads use year\/month folders option is on.<br>    @type string       $basedir Path without subdir.<br>    @type string       $baseurl URL path without subdir.<br>    @type string|false $error   False or error message.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "uploads"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_unique_filename_file_list",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/functions.php",
            "line": 2643,
            "doc": {
                "summary": "Filters the file list used for calculating a unique filename for a newly added file.",
                "description": "<p>Returning an array from the filter will effectively short-circuit retrieval from the filesystem and return the passed value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The list of files to use for filename comparisons.<br>Default null (to retrieve the list from the filesystem).",
                        "types": [
                            "array",
                            "null"
                        ],
                        "variable": "files"
                    },
                    {
                        "name": "param",
                        "content": "The directory for the new file.",
                        "types": [
                            "string"
                        ],
                        "variable": "dir"
                    },
                    {
                        "name": "param",
                        "content": "The proposed filename for the new file.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename"
                    }
                ]
            }
        },
        {
            "name": "wp_unique_filename",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/functions.php",
            "line": 2768,
            "doc": {
                "summary": "Filters the result when generating a unique file name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.1",
                        "description": "The <code>$alt_filenames<\/code> and <code>$number<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "Unique file name.",
                        "types": [
                            "string"
                        ],
                        "variable": "filename"
                    },
                    {
                        "name": "param",
                        "content": "File extension. Example: &quot;.png&quot;.",
                        "types": [
                            "string"
                        ],
                        "variable": "ext"
                    },
                    {
                        "name": "param",
                        "content": "Directory path.",
                        "types": [
                            "string"
                        ],
                        "variable": "dir"
                    },
                    {
                        "name": "param",
                        "content": "Callback function that generates the unique file name.",
                        "types": [
                            "callable",
                            "null"
                        ],
                        "variable": "unique_filename_callback"
                    },
                    {
                        "name": "param",
                        "content": "Array of alternate file names that were checked for collisions.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "alt_filenames"
                    },
                    {
                        "name": "param",
                        "content": "The highest number that was used to make the file name unique or an empty string if unused.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "number"
                    }
                ]
            }
        },
        {
            "name": "wp_upload_bits",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 2890,
            "endLine": 2897,
            "doc": {
                "summary": "Filters whether to treat the upload bits as an error.",
                "description": "<p>Returning a non-array from the filter will effectively short-circuit preparing the upload bits and return that value instead. An error message should be returned as a string.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of upload bits data, or error message to return.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "upload_bits_error"
                    }
                ]
            }
        },
        {
            "name": "getimagesize_mimes_to_exts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 3089,
            "endLine": 3099,
            "doc": {
                "summary": "Filters the list mapping image mime types to their respective extensions.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of image mime types and their matching extensions.",
                        "types": [
                            "array"
                        ],
                        "variable": "mime_to_ext"
                    }
                ]
            }
        },
        {
            "name": "wp_check_filetype_and_ext",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/functions.php",
            "line": 3246,
            "doc": {
                "summary": "Filters the \"real\" file type of the given file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "The $real_mime parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "{     Values for the extension, mime type, and corrected filename.<br>    @type string|false $ext             File extension, or false if the file doesn't match a mime type.<br>    @type string|false $type            File mime type, or false if the file doesn't match a mime type.<br>    @type string|false $proper_filename File name with its correct extension, or false if it cannot be determined.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "wp_check_filetype_and_ext"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the file.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "The name of the file (may differ from $file due to $file being in a tmp directory).",
                        "types": [
                            "string"
                        ],
                        "variable": "filename"
                    },
                    {
                        "name": "param",
                        "content": "Array of mime types keyed by their file extension regex.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "mimes"
                    },
                    {
                        "name": "param",
                        "content": "The actual mime type or false if the type cannot be determined.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "real_mime"
                    }
                ]
            }
        },
        {
            "name": "mime_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 3340,
            "endLine": 3447,
            "doc": {
                "summary": "Filters the list of mime types and file extensions.",
                "description": "<p>This filter should be used to add, not remove, mime types. To remove mime types, use the {@see 'upload_mimes'} filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Mime types keyed by the file extension regex corresponding to those types.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "wp_get_mime_types"
                    }
                ]
            }
        },
        {
            "name": "ext2type",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 3468,
            "endLine": 3481,
            "doc": {
                "summary": "Filters file type based on the extension name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_ext2type()"
                    },
                    {
                        "name": "param",
                        "content": "Multi-dimensional array of file extensions types keyed by the type of file.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "ext2type"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_filesize",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/functions.php",
            "line": 3503,
            "doc": {
                "summary": "Filters the result of wp_filesize before the PHP function is run.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The unfiltered value. Returning an int from the callback bypasses the filesize call.",
                        "types": [
                            "null",
                            "int"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "Path to the file.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "wp_filesize",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/functions.php",
            "line": 3519,
            "doc": {
                "summary": "Filters the size of the file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The result of PHP filesize on the file.",
                        "types": [
                            "int"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "Path to the file.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "upload_mimes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/functions.php",
            "line": 3551,
            "doc": {
                "summary": "Filters the list of allowed mime types and file extensions.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Mime types keyed by the file extension regex corresponding to those types.",
                        "types": [
                            "array"
                        ],
                        "variable": "t"
                    },
                    {
                        "name": "param",
                        "content": "User ID, User object or null if not provided (indicates current user).",
                        "types": [
                            "int",
                            "\\WP_User",
                            "null"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_die_ajax_handler",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 3670,
            "doc": {
                "summary": "Filters the callback for killing WordPress execution for Ajax requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Callback function name.",
                        "types": [
                            "callable"
                        ],
                        "variable": "callback"
                    }
                ]
            }
        },
        {
            "name": "wp_die_json_handler",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 3679,
            "doc": {
                "summary": "Filters the callback for killing WordPress execution for JSON requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Callback function name.",
                        "types": [
                            "callable"
                        ],
                        "variable": "callback"
                    }
                ]
            }
        },
        {
            "name": "wp_die_jsonp_handler",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 3688,
            "doc": {
                "summary": "Filters the callback for killing WordPress execution for JSONP REST requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Callback function name.",
                        "types": [
                            "callable"
                        ],
                        "variable": "callback"
                    }
                ]
            }
        },
        {
            "name": "wp_die_xmlrpc_handler",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 3697,
            "doc": {
                "summary": "Filters the callback for killing WordPress execution for XML-RPC requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Callback function name.",
                        "types": [
                            "callable"
                        ],
                        "variable": "callback"
                    }
                ]
            }
        },
        {
            "name": "wp_die_xml_handler",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 3710,
            "doc": {
                "summary": "Filters the callback for killing WordPress execution for XML requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Callback function name.",
                        "types": [
                            "callable"
                        ],
                        "variable": "callback"
                    }
                ]
            }
        },
        {
            "name": "wp_die_handler",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 3719,
            "doc": {
                "summary": "Filters the callback for killing WordPress execution for all non-Ajax, non-JSON, non-XML requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Callback function name.",
                        "types": [
                            "callable"
                        ],
                        "variable": "callback"
                    }
                ]
            }
        },
        {
            "name": "smilies",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 4746,
            "doc": {
                "summary": "Filters all the smilies.",
                "description": "<p>This filter must be added before <code>smilies_init<\/code> is run, as it is normally only run once to setup the smilies regex.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "List of the smilies' hexadecimal representations, keyed by their smily code.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "wpsmiliestrans"
                    }
                ]
            }
        },
        {
            "name": "load_default_widgets",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 5265,
            "doc": {
                "summary": "Filters whether to load the Widgets library.",
                "description": "<p>Returning a falsey value from the filter will effectively short-circuit the Widgets library from loading.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to load the Widgets library.<br>Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_maybe_load_widgets"
                    }
                ]
            }
        },
        {
            "name": "deprecated_function_run",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/functions.php",
            "line": 5393,
            "doc": {
                "summary": "Fires when a deprecated function is called.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The function that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "function_name"
                    },
                    {
                        "name": "param",
                        "content": "The function that should have been called.",
                        "types": [
                            "string"
                        ],
                        "variable": "replacement"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the function.",
                        "types": [
                            "string"
                        ],
                        "variable": "version"
                    }
                ]
            }
        },
        {
            "name": "deprecated_function_trigger_error",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 5402,
            "doc": {
                "summary": "Filters whether to trigger an error for deprecated functions.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to trigger the error for deprecated functions. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "trigger"
                    }
                ]
            }
        },
        {
            "name": "deprecated_constructor_run",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/functions.php",
            "line": 5483,
            "doc": {
                "summary": "Fires when a deprecated constructor is called.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Added the <code>$parent_class<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The class containing the deprecated constructor.",
                        "types": [
                            "string"
                        ],
                        "variable": "class_name"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the function.",
                        "types": [
                            "string"
                        ],
                        "variable": "version"
                    },
                    {
                        "name": "param",
                        "content": "The parent class calling the deprecated constructor.",
                        "types": [
                            "string"
                        ],
                        "variable": "parent_class"
                    }
                ]
            }
        },
        {
            "name": "deprecated_constructor_trigger_error",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 5494,
            "doc": {
                "summary": "Filters whether to trigger an error for deprecated functions.",
                "description": "<p><code>WP_DEBUG<\/code> must be true in addition to the filter evaluating to true.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to trigger the error for deprecated functions. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "trigger"
                    }
                ]
            }
        },
        {
            "name": "deprecated_file_included",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/functions.php",
            "line": 5581,
            "doc": {
                "summary": "Fires when a deprecated file is called.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The file that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "The file that should have been included based on ABSPATH.",
                        "types": [
                            "string"
                        ],
                        "variable": "replacement"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the file.",
                        "types": [
                            "string"
                        ],
                        "variable": "version"
                    },
                    {
                        "name": "param",
                        "content": "A message regarding the change.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    }
                ]
            }
        },
        {
            "name": "deprecated_file_trigger_error",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 5590,
            "doc": {
                "summary": "Filters whether to trigger an error for deprecated files.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to trigger the error for deprecated files. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "trigger"
                    }
                ]
            }
        },
        {
            "name": "deprecated_argument_run",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/functions.php",
            "line": 5677,
            "doc": {
                "summary": "Fires when a deprecated argument is called.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The function that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "function_name"
                    },
                    {
                        "name": "param",
                        "content": "A message regarding the change.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the argument used.",
                        "types": [
                            "string"
                        ],
                        "variable": "version"
                    }
                ]
            }
        },
        {
            "name": "deprecated_argument_trigger_error",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 5686,
            "doc": {
                "summary": "Filters whether to trigger an error for deprecated arguments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to trigger the error for deprecated arguments. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "trigger"
                    }
                ]
            }
        },
        {
            "name": "deprecated_hook_run",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/functions.php",
            "line": 5766,
            "doc": {
                "summary": "Fires when a deprecated hook is called.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The hook that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "hook"
                    },
                    {
                        "name": "param",
                        "content": "The hook that should be used as a replacement.",
                        "types": [
                            "string"
                        ],
                        "variable": "replacement"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the argument used.",
                        "types": [
                            "string"
                        ],
                        "variable": "version"
                    },
                    {
                        "name": "param",
                        "content": "A message regarding the change.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    }
                ]
            }
        },
        {
            "name": "deprecated_hook_trigger_error",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 5776,
            "doc": {
                "summary": "Filters whether to trigger deprecated hook errors.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to trigger deprecated hook errors. Requires <code>WP_DEBUG<\/code> to be defined true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "trigger"
                    }
                ]
            }
        },
        {
            "name": "doing_it_wrong_run",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/functions.php",
            "line": 5831,
            "doc": {
                "summary": "Fires when the given function is being used incorrectly.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The function that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "function_name"
                    },
                    {
                        "name": "param",
                        "content": "A message explaining what has been done incorrectly.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress where the message was added.",
                        "types": [
                            "string"
                        ],
                        "variable": "version"
                    }
                ]
            }
        },
        {
            "name": "doing_it_wrong_trigger_error",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/functions.php",
            "line": 5844,
            "doc": {
                "summary": "Filters whether to trigger an error for _doing_it_wrong() calls.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "Added the $function_name, $message and $version parameters."
                    },
                    {
                        "name": "param",
                        "content": "Whether to trigger the error for _doing_it_wrong() calls. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "trigger"
                    },
                    {
                        "name": "param",
                        "content": "The function that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "function_name"
                    },
                    {
                        "name": "param",
                        "content": "A message explaining what has been done incorrectly.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress where the message was added.",
                        "types": [
                            "string"
                        ],
                        "variable": "version"
                    }
                ]
            }
        },
        {
            "name": "iis7_supports_permalinks",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 5981,
            "doc": {
                "summary": "Filters whether IIS 7+ supports pretty permalinks.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether IIS7 supports permalinks. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "supports_permalinks"
                    }
                ]
            }
        },
        {
            "name": "get_main_network_id",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 6255,
            "doc": {
                "summary": "Filters the main network ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the main network.",
                        "types": [
                            "int"
                        ],
                        "variable": "main_network_id"
                    }
                ]
            }
        },
        {
            "name": "extra_{$context}_headers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 6670,
            "doc": {
                "summary": "Filters extra file headers by context.",
                "description": "<p>The dynamic portion of the hook name, <code>$context<\/code>, refers to the context where extra headers might be loaded.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Empty array by default.",
                        "types": [
                            "array"
                        ],
                        "variable": "extra_context_headers"
                    }
                ]
            }
        },
        {
            "name": "kses_allowed_protocols",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 6932,
            "doc": {
                "summary": "Filters the list of protocols allowed in HTML attributes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of allowed protocols e.g. 'http', 'ftp', 'tel', and more.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "protocols"
                    }
                ]
            }
        },
        {
            "name": "wp_checkdate",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/functions.php",
            "line": 7087,
            "doc": {
                "summary": "Filters whether the given date is valid for the Gregorian calendar.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the given date is valid.",
                        "types": [
                            "bool"
                        ],
                        "variable": "checkdate"
                    },
                    {
                        "name": "param",
                        "content": "Date to check.",
                        "types": [
                            "string"
                        ],
                        "variable": "source_date"
                    }
                ]
            }
        },
        {
            "name": "wp_auth_check_load",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/functions.php",
            "line": 7125,
            "doc": {
                "summary": "Filters whether to load the authentication check.",
                "description": "<p>Returning a falsey value from the filter will effectively short-circuit loading the authentication check.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to load the authentication check.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    },
                    {
                        "name": "param",
                        "content": "The current screen object.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "screen"
                    }
                ]
            }
        },
        {
            "name": "wp_auth_check_same_domain",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 7151,
            "doc": {
                "summary": "Filters whether the authentication check originated at the same domain.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the authentication check originated at the same domain.",
                        "types": [
                            "bool"
                        ],
                        "variable": "same_domain"
                    }
                ]
            }
        },
        {
            "name": "wp_delete_file",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 7358,
            "doc": {
                "summary": "Filters the path of the file to delete.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the file to delete.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "admin_memory_limit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 7503,
            "doc": {
                "summary": "Filters the maximum memory limit available for administration screens.",
                "description": "<p>This only applies to administrators, who may require more memory for tasks like updates. Memory limits when processing images (uploaded or edited by users of any role) are handled separately.<\/p> <p>The <code>WP_MAX_MEMORY_LIMIT<\/code> constant specifically defines the maximum memory limit available when in the administration back end. The default is 256M (256 megabytes of memory) or the original <code>memory_limit<\/code> php.ini value if this is higher.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "The default now takes the original <code>memory_limit<\/code> into account."
                    },
                    {
                        "name": "param",
                        "content": "The maximum WordPress memory limit. Accepts an integer (bytes), or a shorthand string notation, such as '256M'.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "filtered_limit"
                    }
                ]
            }
        },
        {
            "name": "image_memory_limit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 7519,
            "doc": {
                "summary": "Filters the memory limit allocated for image manipulation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "The default now takes the original <code>memory_limit<\/code> into account."
                    },
                    {
                        "name": "param",
                        "content": "Maximum memory limit to allocate for images.<br>Default <code>WP_MAX_MEMORY_LIMIT<\/code> or the original php.ini <code>memory_limit<\/code>, whichever is higher.<br>Accepts an integer (bytes), or a shorthand string notation, such as '256M'.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "filtered_limit"
                    }
                ]
            }
        },
        {
            "name": "{$context}_memory_limit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 7537,
            "doc": {
                "summary": "Filters the memory limit allocated for arbitrary contexts.",
                "description": "<p>The dynamic portion of the hook name, <code>$context<\/code>, refers to an arbitrary context passed on calling the function. This allows for plugins to define their own contexts for raising the memory limit.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Maximum memory limit to allocate for images.<br>Default '256M' or the original php.ini <code>memory_limit<\/code>, whichever is higher. Accepts an integer (bytes), or a shorthand string notation, such as '256M'.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "filtered_limit"
                    }
                ]
            }
        },
        {
            "name": "send_site_admin_email_change_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/functions.php",
            "line": 7673,
            "doc": {
                "summary": "Filters whether to send the site admin email change notification email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the email notification.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "The old site admin email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_email"
                    },
                    {
                        "name": "param",
                        "content": "The new site admin email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_email"
                    }
                ]
            }
        },
        {
            "name": "site_admin_email_change_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/functions.php",
            "line": 7726,
            "doc": {
                "summary": "Filters the contents of the email notification sent when the site admin email address is changed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The intended recipient.<br>    @type string $subject The subject of the email.<br>    @type string $message The content of the email.<br>        The following strings have a special meaning and will get replaced dynamically:<br>        - ###OLD_EMAIL### The old site admin email address.<br>        - ###NEW_EMAIL### The new site admin email address.<br>        - ###SITENAME###  The name of the site.<br>        - ###SITEURL###   The URL to the site.<br>    @type string $headers Headers.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_change_email"
                    },
                    {
                        "name": "param",
                        "content": "The old site admin email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_email"
                    },
                    {
                        "name": "param",
                        "content": "The new site admin email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_email"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_anonymize_data",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/functions.php",
            "line": 7864,
            "doc": {
                "summary": "Filters the anonymous data for each type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "Anonymized data.",
                        "types": [
                            "string"
                        ],
                        "variable": "anonymous"
                    },
                    {
                        "name": "param",
                        "content": "Type of the data.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "Original data.",
                        "types": [
                            "string"
                        ],
                        "variable": "data"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_exports_dir",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 7889,
            "doc": {
                "summary": "Filters the directory used to store personal data export files.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Exports now use relative paths, so changes to the directory via this filter should be reflected on the server."
                    },
                    {
                        "name": "param",
                        "content": "Exports directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "exports_dir"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_exports_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 7914,
            "doc": {
                "summary": "Filters the URL of the directory used to store personal data export files.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Exports now use relative paths, so changes to the directory URL via this filter should be reflected on the server."
                    },
                    {
                        "name": "param",
                        "content": "Exports directory URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "exports_url"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_export_expiration",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 7962,
            "doc": {
                "summary": "Filters the lifetime, in seconds, of a personal data export file.",
                "description": "<p>By default, the lifetime is 3 days. Once the file reaches that age, it will automatically be deleted by a cron job.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The expiration age of the export, in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    }
                ]
            }
        },
        {
            "name": "wp_update_php_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 8003,
            "doc": {
                "summary": "Filters the URL to learn more about updating the PHP version the site is running on.",
                "description": "<p>Providing an empty string is not allowed and will result in the default URL being used. Furthermore the page the URL links to should preferably be localized in the site language.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "URL to learn more about updating PHP.",
                        "types": [
                            "string"
                        ],
                        "variable": "update_url"
                    }
                ]
            }
        },
        {
            "name": "wp_direct_php_update_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 8100,
            "doc": {
                "summary": "Filters the URL for directly updating the PHP version the site is running on from the host.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.1"
                    },
                    {
                        "name": "param",
                        "content": "URL for directly updating PHP.",
                        "types": [
                            "string"
                        ],
                        "variable": "direct_update_url"
                    }
                ]
            }
        },
        {
            "name": "wp_update_https_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 8162,
            "doc": {
                "summary": "Filters the URL to learn more about updating the HTTPS version the site is running on.",
                "description": "<p>Providing an empty string is not allowed and will result in the default URL being used. Furthermore the page the URL links to should preferably be localized in the site language.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "URL to learn more about updating HTTPS.",
                        "types": [
                            "string"
                        ],
                        "variable": "update_url"
                    }
                ]
            }
        },
        {
            "name": "wp_direct_update_https_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/functions.php",
            "line": 8212,
            "doc": {
                "summary": "Filters the URL for directly updating the PHP version the site is running on from the host.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "URL for directly updating PHP.",
                        "types": [
                            "string"
                        ],
                        "variable": "direct_update_url"
                    }
                ]
            }
        },
        {
            "name": "pre_recurse_dirsize",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/functions.php",
            "line": 8320,
            "doc": {
                "summary": "Filters the amount of storage space used by one directory and all its children, in megabytes.",
                "description": "<p>Return the actual used space to short-circuit the recursive PHP file size calculation and use something else, like a CDN API or native operating system tools for better performance.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The amount of used space, in bytes. Default false.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "space_used"
                    },
                    {
                        "name": "param",
                        "content": "Full path of a directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "directory"
                    },
                    {
                        "name": "param",
                        "content": "Full path of a subdirectory to exclude from the total, or array of paths.",
                        "types": [
                            "string",
                            "string[]",
                            "null"
                        ],
                        "variable": "exclude"
                    },
                    {
                        "name": "param",
                        "content": "Maximum time to run before giving up. In seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "max_execution_time"
                    },
                    {
                        "name": "param",
                        "content": "Array of cached directory paths.",
                        "types": [
                            "array"
                        ],
                        "variable": "directory_cache"
                    }
                ]
            }
        },
        {
            "name": "wp_print_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/functions.wp-scripts.php",
            "line": 95,
            "doc": {
                "summary": "Fires before scripts in the $handles queue are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "wp_print_styles",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/functions.wp-styles.php",
            "line": 57,
            "doc": {
                "summary": "Fires before styles in the $handles queue are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "get_header",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 38,
            "doc": {
                "summary": "Fires before the header template file is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "2.8.0",
                        "description": "The <code>$name<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the specific header file to use. Null for the default header.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "name"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the header template.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_footer",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 82,
            "doc": {
                "summary": "Fires before the footer template file is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "2.8.0",
                        "description": "The <code>$name<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the specific footer file to use. Null for the default footer.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "name"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the footer template.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_sidebar",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 126,
            "doc": {
                "summary": "Fires before the sidebar template file is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "since",
                        "content": "2.8.0",
                        "description": "The <code>$name<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the specific sidebar file to use. Null for the default sidebar.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "name"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the sidebar template.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_template_part_{$slug}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 181,
            "doc": {
                "summary": "Fires before the specified template part file is loaded.",
                "description": "<p>The dynamic portion of the hook name, <code>$slug<\/code>, refers to the slug name for the generic template part.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The slug name for the generic template.",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    },
                    {
                        "name": "param",
                        "content": "The name of the specialized template.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "name"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the template.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_template_part",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/general-template.php",
            "line": 202,
            "doc": {
                "summary": "Fires before an attempt is made to locate and load a template part.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The slug name for the generic template.",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    },
                    {
                        "name": "param",
                        "content": "The name of the specialized template.",
                        "types": [
                            "string"
                        ],
                        "variable": "name"
                    },
                    {
                        "name": "param",
                        "content": "Array of template files to search for, in order.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "templates"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the template.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "pre_get_search_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 252,
            "doc": {
                "summary": "Fires before the search form is retrieved, at the start of get_search_form().",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0",
                        "description": "as 'get_search_form' action."
                    },
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/core.trac.wordpress.org\/ticket\/19321"
                    },
                    {
                        "name": "param",
                        "content": "The array of arguments for building the search form.<br>See get_search_form() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "search_form_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 284,
            "doc": {
                "summary": "Filters the array of arguments used when generating the search form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The array of arguments for building the search form.<br>See get_search_form() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "search_form_format",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 302,
            "doc": {
                "summary": "Filters the HTML format of the search form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The type of markup to use in the search form.<br>Accepts 'html5', 'xhtml'.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "The array of arguments for building the search form.<br>See get_search_form() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_search_form",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 357,
            "doc": {
                "summary": "Filters the HTML output of the search form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The search form HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "form"
                    },
                    {
                        "name": "param",
                        "content": "The array of arguments for building the search form.<br>See get_search_form() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "loginout",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 397,
            "doc": {
                "summary": "Filters the HTML output for the Log In\/Log Out link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML link content.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "logout_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 431,
            "doc": {
                "summary": "Filters the logout URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML-encoded logout URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "logout_url"
                    },
                    {
                        "name": "param",
                        "content": "Path to redirect to on logout.",
                        "types": [
                            "string"
                        ],
                        "variable": "redirect"
                    }
                ]
            }
        },
        {
            "name": "login_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 465,
            "doc": {
                "summary": "Filters the login URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.2.0",
                        "description": "The <code>$force_reauth<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The login URL. Not HTML-encoded.",
                        "types": [
                            "string"
                        ],
                        "variable": "login_url"
                    },
                    {
                        "name": "param",
                        "content": "The path to redirect to on login, if supplied.",
                        "types": [
                            "string"
                        ],
                        "variable": "redirect"
                    },
                    {
                        "name": "param",
                        "content": "Whether to force reauthorization, even if a cookie is present.",
                        "types": [
                            "bool"
                        ],
                        "variable": "force_reauth"
                    }
                ]
            }
        },
        {
            "name": "register_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 483,
            "doc": {
                "summary": "Filters the user registration URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user registration URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "register"
                    }
                ]
            }
        },
        {
            "name": "login_form_defaults",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 546,
            "doc": {
                "summary": "Filters the default login form output arguments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_login_form()"
                    },
                    {
                        "name": "param",
                        "content": "An array of default login form arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "defaults"
                    }
                ]
            }
        },
        {
            "name": "login_form_top",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 558,
            "doc": {
                "summary": "Filters content to display at the top of the login form.",
                "description": "<p>The filter evaluates just following the opening form tag element.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Content to display. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Array of login form arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "login_form_middle",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 571,
            "doc": {
                "summary": "Filters content to display in the middle of the login form.",
                "description": "<p>The filter evaluates just following the location where the 'login-password' field is displayed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Content to display. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Array of login form arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "login_form_bottom",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 583,
            "doc": {
                "summary": "Filters content to display at the bottom of the login form.",
                "description": "<p>The filter evaluates just preceding the closing form tag element.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Content to display. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Array of login form arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "lostpassword_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 671,
            "doc": {
                "summary": "Filters the Lost Password URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The lost password page URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "lostpassword_url"
                    },
                    {
                        "name": "param",
                        "content": "The path to redirect to on login.",
                        "types": [
                            "string"
                        ],
                        "variable": "redirect"
                    }
                ]
            }
        },
        {
            "name": "register",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 711,
            "doc": {
                "summary": "Filters the HTML link to the Registration or Admin page.",
                "description": "<p>Users are sent to the admin page if logged-in, or the registration page if enabled and logged-out.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML code for the link to the Registration or Admin page.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "wp_meta",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/general-template.php",
            "line": 736,
            "doc": {
                "summary": "Fires before displaying echoed content in the sidebar.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ]
            }
        },
        {
            "name": "bloginfo_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 924,
            "doc": {
                "summary": "Filters the URL returned by get_bloginfo().",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.5"
                    },
                    {
                        "name": "param",
                        "content": "The URL returned by bloginfo().",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Type of information requested.",
                        "types": [
                            "string"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "bloginfo",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 934,
            "doc": {
                "summary": "Filters the site information returned by get_bloginfo().",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "The requested non-URL site information.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Type of information requested.",
                        "types": [
                            "string"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "get_site_icon_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 983,
            "doc": {
                "summary": "Filters the site icon URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Site icon URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Size of the site icon.",
                        "types": [
                            "int"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "ID of the blog to get the site icon for.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "get_custom_logo_image_attributes",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 1093,
            "doc": {
                "summary": "Filters the list of custom logo image attributes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Custom logo image attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "custom_logo_attr"
                    },
                    {
                        "name": "param",
                        "content": "Custom logo attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "custom_logo_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the blog to get the custom logo for.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "get_custom_logo",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 1138,
            "doc": {
                "summary": "Filters the custom logo output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Added the <code>$blog_id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Custom logo HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "ID of the blog to get the custom logo for.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "pre_get_document_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1174,
            "doc": {
                "summary": "Filters the document title before it is generated.",
                "description": "<p>Passing a non-empty value will short-circuit wp_get_document_title(), returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The document title. Default empty string.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "document_title_separator",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1253,
            "doc": {
                "summary": "Filters the separator for the document title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Document title separator. Default '-'.",
                        "types": [
                            "string"
                        ],
                        "variable": "sep"
                    }
                ]
            }
        },
        {
            "name": "document_title_parts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1269,
            "doc": {
                "summary": "Filters the parts of the document title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "{     The document title parts.<br>    @type string $title   Title of the viewed page.<br>    @type string $page    Optional. Page number if paginated.<br>    @type string $tagline Optional. Site description when on home page.<br>    @type string $site    Optional. Site title when not on home page.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "document_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1280,
            "doc": {
                "summary": "Filters the document title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Document title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "wp_title_parts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1426,
            "doc": {
                "summary": "Filters the parts of the page title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of parts of the page title.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "title_array"
                    }
                ]
            }
        },
        {
            "name": "wp_title",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 1445,
            "doc": {
                "summary": "Filters the text of the page title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Page title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Title separator.",
                        "types": [
                            "string"
                        ],
                        "variable": "sep"
                    },
                    {
                        "name": "param",
                        "content": "Location of the separator ('left' or 'right').",
                        "types": [
                            "string"
                        ],
                        "variable": "seplocation"
                    }
                ]
            }
        },
        {
            "name": "single_post_title",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 1486,
            "doc": {
                "summary": "Filters the page title for a single post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "The single post page title.",
                        "types": [
                            "string"
                        ],
                        "variable": "_post_title"
                    },
                    {
                        "name": "param",
                        "content": "The current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "_post"
                    }
                ]
            }
        },
        {
            "name": "post_type_archive_title",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 1526,
            "doc": {
                "summary": "Filters the post type archive title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post type 'name' label.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type_name"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "single_cat_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1597,
            "doc": {
                "summary": "Filters the category archive page title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.10"
                    },
                    {
                        "name": "param",
                        "content": "Category name for archive being displayed.",
                        "types": [
                            "string"
                        ],
                        "variable": "term_name"
                    }
                ]
            }
        },
        {
            "name": "single_tag_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1606,
            "doc": {
                "summary": "Filters the tag archive page title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Tag name for archive being displayed.",
                        "types": [
                            "string"
                        ],
                        "variable": "term_name"
                    }
                ]
            }
        },
        {
            "name": "single_term_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1615,
            "doc": {
                "summary": "Filters the custom taxonomy archive page title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Term name for archive being displayed.",
                        "types": [
                            "string"
                        ],
                        "variable": "term_name"
                    }
                ]
            }
        },
        {
            "name": "get_the_archive_title_prefix",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1767,
            "doc": {
                "summary": "Filters the archive title prefix.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Archive title prefix.",
                        "types": [
                            "string"
                        ],
                        "variable": "prefix"
                    }
                ]
            }
        },
        {
            "name": "get_the_archive_title",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 1787,
            "doc": {
                "summary": "Filters the archive title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$prefix<\/code> and <code>$original_title<\/code> parameters."
                    },
                    {
                        "name": "param",
                        "content": "Archive title to be displayed.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Archive title without prefix.",
                        "types": [
                            "string"
                        ],
                        "variable": "original_title"
                    },
                    {
                        "name": "param",
                        "content": "Archive title prefix.",
                        "types": [
                            "string"
                        ],
                        "variable": "prefix"
                    }
                ]
            }
        },
        {
            "name": "get_the_archive_description",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 1834,
            "doc": {
                "summary": "Filters the archive description.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Archive description to be displayed.",
                        "types": [
                            "string"
                        ],
                        "variable": "description"
                    }
                ]
            }
        },
        {
            "name": "get_the_post_type_description",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 1868,
            "doc": {
                "summary": "Filters the description for a post type archive.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The post type description.",
                        "types": [
                            "string"
                        ],
                        "variable": "description"
                    },
                    {
                        "name": "param",
                        "content": "The post type object.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type_obj"
                    }
                ]
            }
        },
        {
            "name": "get_archives_link",
            "type": "filter",
            "numArgs": 7,
            "path": "\/wp-includes\/general-template.php",
            "line": 1937,
            "doc": {
                "summary": "Filters the archive link content.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Added the <code>$url<\/code>, <code>$text<\/code>, <code>$format<\/code>, <code>$before<\/code>, and <code>$after<\/code> parameters."
                    },
                    {
                        "name": "since",
                        "content": "5.2.0",
                        "description": "Added the <code>$selected<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The archive HTML link content.",
                        "types": [
                            "string"
                        ],
                        "variable": "link_html"
                    },
                    {
                        "name": "param",
                        "content": "URL to archive.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Archive text description.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Link format. Can be 'link', 'option', 'html', or custom.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "Content to prepend to the description.",
                        "types": [
                            "string"
                        ],
                        "variable": "before"
                    },
                    {
                        "name": "param",
                        "content": "Content to append to the description.",
                        "types": [
                            "string"
                        ],
                        "variable": "after"
                    },
                    {
                        "name": "param",
                        "content": "True if the current page is the selected archive.",
                        "types": [
                            "bool"
                        ],
                        "variable": "selected"
                    }
                ]
            }
        },
        {
            "name": "getarchives_where",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 2035,
            "doc": {
                "summary": "Filters the SQL WHERE clause for retrieving archives.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Portion of SQL query containing the WHERE clause.",
                        "types": [
                            "string"
                        ],
                        "variable": "sql_where"
                    },
                    {
                        "name": "param",
                        "content": "An array of default arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "getarchives_join",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 2045,
            "doc": {
                "summary": "Filters the SQL JOIN clause for retrieving archives.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Portion of SQL query containing JOIN clause.",
                        "types": [
                            "string"
                        ],
                        "variable": "sql_join"
                    },
                    {
                        "name": "param",
                        "content": "An array of default arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "get_calendar",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 2447,
            "doc": {
                "summary": "Filters the HTML calendar output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML output of the calendar.",
                        "types": [
                            "string"
                        ],
                        "variable": "calendar_output"
                    }
                ]
            }
        },
        {
            "name": "the_date",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/general-template.php",
            "line": 2546,
            "doc": {
                "summary": "Filters the date a post was published for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "The formatted date string.",
                        "types": [
                            "string"
                        ],
                        "variable": "the_date"
                    },
                    {
                        "name": "param",
                        "content": "PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "HTML output before the date.",
                        "types": [
                            "string"
                        ],
                        "variable": "before"
                    },
                    {
                        "name": "param",
                        "content": "HTML output after the date.",
                        "types": [
                            "string"
                        ],
                        "variable": "after"
                    }
                ]
            }
        },
        {
            "name": "get_the_date",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 2587,
            "doc": {
                "summary": "Filters the date a post was published.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Formatted date string or Unix timestamp if <code>$format<\/code> is 'U' or 'G'.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "the_date"
                    },
                    {
                        "name": "param",
                        "content": "PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "The post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "the_modified_date",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/general-template.php",
            "line": 2614,
            "doc": {
                "summary": "Filters the date a post was last modified for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The last modified date or false if no post is found.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "the_modified_date"
                    },
                    {
                        "name": "param",
                        "content": "PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "HTML output before the date.",
                        "types": [
                            "string"
                        ],
                        "variable": "before"
                    },
                    {
                        "name": "param",
                        "content": "HTML output after the date.",
                        "types": [
                            "string"
                        ],
                        "variable": "after"
                    }
                ]
            }
        },
        {
            "name": "get_the_modified_date",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 2656,
            "doc": {
                "summary": "Filters the date a post was last modified.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The formatted date or false if no post is found.",
                        "types": [
                            "string",
                            "int",
                            "false"
                        ],
                        "variable": "the_time"
                    },
                    {
                        "name": "param",
                        "content": "PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object or null if no post is found.",
                        "types": [
                            "\\WP_Post",
                            "null"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "the_time",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 2678,
            "doc": {
                "summary": "Filters the time a post was written for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "The formatted time.",
                        "types": [
                            "string"
                        ],
                        "variable": "get_the_time"
                    },
                    {
                        "name": "param",
                        "content": "Format to use for retrieving the time the post was written. Accepts 'G', 'U', or PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    }
                ]
            }
        },
        {
            "name": "get_the_time",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 2714,
            "doc": {
                "summary": "Filters the time a post was written.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Formatted date string or Unix timestamp if <code>$format<\/code> is 'U' or 'G'.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "the_time"
                    },
                    {
                        "name": "param",
                        "content": "Format to use for retrieving the time the post was written. Accepts 'G', 'U', or PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_post_time",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 2771,
            "doc": {
                "summary": "Filters the localized time a post was written.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Formatted date string or Unix timestamp if <code>$format<\/code> is 'U' or 'G'.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "time"
                    },
                    {
                        "name": "param",
                        "content": "Format to use for retrieving the time the post was written.<br>Accepts 'G', 'U', or PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "Whether to retrieve the GMT time.",
                        "types": [
                            "bool"
                        ],
                        "variable": "gmt"
                    }
                ]
            }
        },
        {
            "name": "the_modified_time",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 2865,
            "doc": {
                "summary": "Filters the localized time a post was last modified, for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The formatted time or false if no post is found.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "get_the_modified_time"
                    },
                    {
                        "name": "param",
                        "content": "Format to use for retrieving the time the post was modified. Accepts 'G', 'U', or PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    }
                ]
            }
        },
        {
            "name": "get_the_modified_time",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 2903,
            "doc": {
                "summary": "Filters the localized time a post was last modified.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The formatted time or false if no post is found.",
                        "types": [
                            "string",
                            "int",
                            "false"
                        ],
                        "variable": "the_time"
                    },
                    {
                        "name": "param",
                        "content": "Format to use for retrieving the time the post was modified. Accepts 'G', 'U', or PHP date format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object or null if no post is found.",
                        "types": [
                            "\\WP_Post",
                            "null"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_post_modified_time",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 2960,
            "doc": {
                "summary": "Filters the localized time a post was last modified.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Formatted date string or Unix timestamp if <code>$format<\/code> is 'U' or 'G'.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "time"
                    },
                    {
                        "name": "param",
                        "content": "Format to use for retrieving the time the post was modified.<br>Accepts 'G', 'U', or PHP date format. Default 'U'.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "Whether to retrieve the GMT time. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "gmt"
                    }
                ]
            }
        },
        {
            "name": "the_weekday",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 2988,
            "doc": {
                "summary": "Filters the weekday on which the post was written, for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "",
                        "types": [
                            "string"
                        ],
                        "variable": "the_weekday"
                    }
                ]
            }
        },
        {
            "name": "the_weekday_date",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/general-template.php",
            "line": 3033,
            "doc": {
                "summary": "Filters the localized date on which the post was written, for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "The weekday on which the post was written.",
                        "types": [
                            "string"
                        ],
                        "variable": "the_weekday_date"
                    },
                    {
                        "name": "param",
                        "content": "The HTML to output before the date.",
                        "types": [
                            "string"
                        ],
                        "variable": "before"
                    },
                    {
                        "name": "param",
                        "content": "The HTML to output after the date.",
                        "types": [
                            "string"
                        ],
                        "variable": "after"
                    }
                ]
            }
        },
        {
            "name": "wp_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/general-template.php",
            "line": 3049,
            "doc": {
                "summary": "Prints scripts or data in the head tag on the front end.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ]
            }
        },
        {
            "name": "wp_footer",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/general-template.php",
            "line": 3065,
            "doc": {
                "summary": "Prints scripts or data before the closing body tag on the front end.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    }
                ]
            }
        },
        {
            "name": "wp_body_open",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/general-template.php",
            "line": 3081,
            "doc": {
                "summary": "Triggered after the opening body tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    }
                ]
            }
        },
        {
            "name": "feed_links_show_posts_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3114,
            "doc": {
                "summary": "Filters whether to display the posts feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the posts feed link. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "feed_links_show_comments_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3130,
            "doc": {
                "summary": "Filters whether to display the comments feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the comments feed link. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "feed_links_extra_show_post_comments_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3189,
            "doc": {
                "summary": "Filters whether to display the post comments feed link.",
                "description": "<p>This filter allows to enable or disable the feed link for a singular post in a way that is independent of {@see 'feed_links_show_comments_feed'} (which controls the global comments feed). The result of that filter is accepted as a parameter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the post comments feed link. Defaults to the {@see 'feed_links_show_comments_feed'} filter result.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show_comments_feed"
                    }
                ]
            }
        },
        {
            "name": "feed_links_extra_show_post_type_archive_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3213,
            "doc": {
                "summary": "Filters whether to display the post type archive feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the post type archive feed link. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "feed_links_extra_show_category_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3241,
            "doc": {
                "summary": "Filters whether to display the category feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the category feed link. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "feed_links_extra_show_tag_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3265,
            "doc": {
                "summary": "Filters whether to display the tag feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the tag feed link. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "feed_links_extra_show_tax_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3289,
            "doc": {
                "summary": "Filters whether to display the custom taxonomy feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the custom taxonomy feed link. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "feed_links_extra_show_author_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3316,
            "doc": {
                "summary": "Filters whether to display the author feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the author feed link. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "feed_links_extra_show_search_feed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3338,
            "doc": {
                "summary": "Filters whether to display the search results feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the search results feed link. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "site_icon_meta_tags",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3446,
            "doc": {
                "summary": "Filters the site icon meta tags, so plugins can add their own.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of Site Icon meta tags.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "meta_tags"
                    }
                ]
            }
        },
        {
            "name": "wp_resource_hints",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 3501,
            "doc": {
                "summary": "Filters domains and URLs for resource hints of relation type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$urls<\/code> parameter accepts arrays of specific HTML attributes as its child elements."
                    },
                    {
                        "name": "param",
                        "content": "{     Array of resources and their attributes, or URLs to print for resource hints.<br>    @type array|string ...$0 {         Array of resource attributes, or a URL string.<br>        @type string $href        URL to include in resource hints. Required.<br>        @type string $as          How the browser should treat the resource                                   (<code>script<\/code>, <code>style<\/code>, <code>image<\/code>, <code>document<\/code>, etc).<br>        @type string $crossorigin Indicates the CORS policy of the specified resource.<br>        @type float  $pr          Expected probability that the resource hint will be used.<br>        @type string $type        Type of the resource (<code>text\/html<\/code>, <code>text\/css<\/code>, etc).<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "urls"
                    },
                    {
                        "name": "param",
                        "content": "The relation type the URLs are printed for, e.g. 'preconnect' or 'prerender'.",
                        "types": [
                            "string"
                        ],
                        "variable": "relation_type"
                    }
                ]
            }
        },
        {
            "name": "wp_preload_resources",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3612,
            "doc": {
                "summary": "Filters domains and URLs for resource preloads.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of resources and their attributes, or URLs to print for resource preloads.<br>    @type array ...$0 {         Array of resource attributes.<br>        @type string $href        URL to include in resource preloads. Required.<br>        @type string $as          How the browser should treat the resource                                   (<code>script<\/code>, <code>style<\/code>, <code>image<\/code>, <code>document<\/code>, etc).<br>        @type string $crossorigin Indicates the CORS policy of the specified resource.<br>        @type string $type        Type of the resource (<code>text\/html<\/code>, <code>text\/css<\/code>, etc).<br>        @type string $media       Accepts media types or media queries. Allows responsive preloading.<br>        @type string $imagesizes  Responsive source size to the source Set.<br>        @type string $imagesrcset Responsive image sources to the source set.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "preload_resources"
                    }
                ]
            }
        },
        {
            "name": "user_can_richedit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3766,
            "doc": {
                "summary": "Filters whether the user can access the visual editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the user can access the visual editor.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_rich_edit"
                    }
                ]
            }
        },
        {
            "name": "wp_default_editor",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3793,
            "doc": {
                "summary": "Filters which editor should be displayed by default.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Which editor should be displayed by default. Either 'tinymce', 'html', or 'test'.",
                        "types": [
                            "string"
                        ],
                        "variable": "r"
                    }
                ]
            }
        },
        {
            "name": "wp_enqueue_code_editor",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 3929,
            "doc": {
                "summary": "Fires when scripts and styles are enqueued for the code editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Settings for the enqueued code editor.",
                        "types": [
                            "array"
                        ],
                        "variable": "settings"
                    }
                ]
            }
        },
        {
            "name": "wp_code_editor_settings",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 4291,
            "doc": {
                "summary": "Filters settings that are passed into the code editor.",
                "description": "<p>Returning a falsey value will disable the syntax-highlighting code editor.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The array of settings passed to the code editor.<br>A falsey value disables the editor.",
                        "types": [
                            "array"
                        ],
                        "variable": "settings"
                    },
                    {
                        "name": "param",
                        "content": "{     Args passed when calling <code>get_code_editor_settings()<\/code>.<br>    @type string   $type       The MIME type of the file to be edited.<br>    @type string   $file       Filename being edited.<br>    @type WP_Theme $theme      Theme being edited when on the theme file editor.<br>    @type string   $plugin     Plugin being edited when on the plugin file editor.<br>    @type array    $codemirror Additional CodeMirror setting overrides.<br>    @type array    $csslint    CSSLint rule overrides.<br>    @type array    $jshint     JSHint rule overrides.<br>    @type array    $htmlhint   HTMLHint rule overrides.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_search_query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 4314,
            "doc": {
                "summary": "Filters the contents of the search query variable.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Contents of the search query variable.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "search"
                    }
                ]
            }
        },
        {
            "name": "the_search_query",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 4338,
            "doc": {
                "summary": "Filters the contents of the search query variable for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Contents of the search query variable.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "search"
                    }
                ]
            }
        },
        {
            "name": "language_attributes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 4381,
            "doc": {
                "summary": "Filters the language attributes for display in the 'html' tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.3.0",
                        "description": "Added the <code>$doctype<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "A space-separated list of language attributes.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "The type of HTML document (xhtml|html).",
                        "types": [
                            "string"
                        ],
                        "variable": "doctype"
                    }
                ]
            }
        },
        {
            "name": "paginate_links",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 4576,
            "doc": {
                "summary": "Filters the paginated links for the given archive pages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The paginated link URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "paginate_links_output",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 4655,
            "doc": {
                "summary": "Filters the HTML output of paginated links for archives.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "r"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments. See paginate_links() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_admin_css_uri",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 4851,
            "doc": {
                "summary": "Filters the URI of a WordPress admin CSS file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Relative path to the file with query arguments attached.",
                        "types": [
                            "string"
                        ],
                        "variable": "_file"
                    },
                    {
                        "name": "param",
                        "content": "Relative path to the file, minus its &quot;.css&quot; extension.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "wp_admin_css",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 4905,
            "doc": {
                "summary": "Filters the stylesheet link to the specified CSS file.",
                "description": "<p>If the site is set to display right-to-left, the RTL stylesheet link will be used instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML link element for the stylesheet.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet_link"
                    },
                    {
                        "name": "param",
                        "content": "Style handle name or filename (without &quot;.css&quot; extension) relative to wp-admin\/. Defaults to 'wp-admin'.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "wp_generator_type",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 4951,
            "doc": {
                "summary": "Filters the output of the XHTML generator tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The XHTML generator.",
                        "types": [
                            "string"
                        ],
                        "variable": "generator_type"
                    }
                ]
            }
        },
        {
            "name": "the_generator",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 4974,
            "doc": {
                "summary": "Filters the output of the XHTML generator tag for display.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The generator output.",
                        "types": [
                            "string"
                        ],
                        "variable": "generator_type"
                    },
                    {
                        "name": "param",
                        "content": "The type of generator to output. Accepts 'html', 'xhtml', 'atom', 'rss2', 'rdf', 'comment', 'export'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "get_the_generator_{$type}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/general-template.php",
            "line": 5062,
            "doc": {
                "summary": "Filters the HTML for the retrieved generator type.",
                "description": "<p>The dynamic portion of the hook name, <code>$type<\/code>, refers to the generator type.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>get_the_generator_atom<\/code><\/li> <li><code>get_the_generator_comment<\/code><\/li> <li><code>get_the_generator_export<\/code><\/li> <li><code>get_the_generator_html<\/code><\/li> <li><code>get_the_generator_rdf<\/code><\/li> <li><code>get_the_generator_rss2<\/code><\/li> <li><code>get_the_generator_xhtml<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML markup output to wp_head().",
                        "types": [
                            "string"
                        ],
                        "variable": "gen"
                    },
                    {
                        "name": "param",
                        "content": "The type of generator. Accepts 'html', 'xhtml', 'atom', 'rss2', 'rdf', 'comment', 'export'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "wp_required_field_indicator",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 5194,
            "doc": {
                "summary": "Filters the markup for a visual indicator of required form fields.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Markup for the indicator element.",
                        "types": [
                            "string"
                        ],
                        "variable": "indicator"
                    }
                ]
            }
        },
        {
            "name": "wp_required_field_message",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/general-template.php",
            "line": 5218,
            "doc": {
                "summary": "Filters the message to explain required form fields.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Message text and glyph wrapped in a <code>span<\/code> tag.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    }
                ]
            }
        },
        {
            "name": "http_origin",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/http.php",
            "line": 409,
            "doc": {
                "summary": "Change the origin of an HTTP request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The original origin for the request.",
                        "types": [
                            "string"
                        ],
                        "variable": "origin"
                    }
                ]
            }
        },
        {
            "name": "allowed_http_origins",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/http.php",
            "line": 447,
            "doc": {
                "summary": "Change the origin types allowed for HTTP requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of default allowed HTTP origins.<br>    @type string $0 Non-secure URL for admin origin.<br>    @type string $1 Secure URL for admin origin.<br>    @type string $2 Non-secure URL for home origin.<br>    @type string $3 Secure URL for home origin.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_origins"
                    }
                ]
            }
        },
        {
            "name": "allowed_http_origin",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/http.php",
            "line": 477,
            "doc": {
                "summary": "Change the allowed HTTP origin result.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Origin URL if allowed, empty string if not.",
                        "types": [
                            "string"
                        ],
                        "variable": "origin"
                    },
                    {
                        "name": "param",
                        "content": "Original origin string passed into is_allowed_http_origin function.",
                        "types": [
                            "string"
                        ],
                        "variable": "origin_arg"
                    }
                ]
            }
        },
        {
            "name": "http_request_host_is_external",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/http.php",
            "line": 576,
            "doc": {
                "summary": "Check if HTTP request is external or not.",
                "description": "<p>Allows to change and allow external requests for the HTTP request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether HTTP request is external or not.",
                        "types": [
                            "bool"
                        ],
                        "variable": "external"
                    },
                    {
                        "name": "param",
                        "content": "Host name of the requested URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "host"
                    },
                    {
                        "name": "param",
                        "content": "Requested URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "http_allowed_safe_ports",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/http.php",
            "line": 600,
            "doc": {
                "summary": "Controls the list of ports considered safe in HTTP API.",
                "description": "<p>Allows to change and allow external requests for the HTTP request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of integers for valid ports.",
                        "types": [
                            "array"
                        ],
                        "variable": "allowed_ports"
                    },
                    {
                        "name": "param",
                        "content": "Host name of the requested URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "host"
                    },
                    {
                        "name": "param",
                        "content": "Requested URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_update_https_detection_errors",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/https-detection.php",
            "line": 102,
            "doc": {
                "summary": "Short-circuits the process of detecting errors related to HTTPS support.",
                "description": "<p>Returning a <code>WP_Error<\/code> from the filter will effectively short-circuit the default logic of trying a remote request to the site over HTTPS, storing the errors array from the returned <code>WP_Error<\/code> instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Error object to short-circuit detection, or null to continue with the default behavior.",
                        "types": [
                            "null",
                            "\\WP_Error"
                        ],
                        "variable": "pre"
                    }
                ]
            }
        },
        {
            "name": "wp_should_replace_insecure_home_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/https-migration.php",
            "line": 37,
            "doc": {
                "summary": "Filters whether WordPress should replace old HTTP URLs to the site with their HTTPS counterpart.",
                "description": "<p>If a WordPress site had its URL changed from HTTP to HTTPS, by default this will return <code>true<\/code>. This filter can be used to disable that behavior, e.g. after having replaced URLs manually in the database.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether insecure HTTP URLs to the site should be replaced.",
                        "types": [
                            "bool"
                        ],
                        "variable": "should_replace_insecure_home_url"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_element_limit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/IXR\/class-IXR-message.php",
            "line": 86,
            "doc": {
                "summary": "Filters the number of elements to parse in an XML-RPC response.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Default elements limit.",
                        "types": [
                            "int"
                        ],
                        "variable": "element_limit"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_chunk_parsing_size",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/IXR\/class-IXR-message.php",
            "line": 110,
            "doc": {
                "summary": "Filters the chunk size that can be used to parse an XML-RPC response message.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Chunk size to parse in bytes.",
                        "types": [
                            "int"
                        ],
                        "variable": "chunk_size"
                    }
                ]
            }
        },
        {
            "name": "wp_kses_allowed_html",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/kses.php",
            "line": 867,
            "doc": {
                "summary": "Filters the HTML tags that are allowed for a given context.",
                "description": "<p>HTML tags and attribute names are case-insensitive in HTML but must be added to the KSES allow list in lowercase. An item added to the allow list in upper or mixed case will not recognized as permitted by KSES.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Allowed HTML tags.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Context name.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "pre_kses",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/kses.php",
            "line": 944,
            "doc": {
                "summary": "Filters content to be run through KSES.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Content to filter through KSES.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "An array of allowed HTML elements and attributes, or a context name such as 'post'. See wp_kses_allowed_html() for the list of accepted context names.",
                        "types": [
                            "array[]",
                            "string"
                        ],
                        "variable": "allowed_html"
                    },
                    {
                        "name": "param",
                        "content": "Array of allowed URL protocols.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_protocols"
                    }
                ]
            }
        },
        {
            "name": "wp_kses_uri_attributes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/kses.php",
            "line": 1030,
            "doc": {
                "summary": "Filters the list of attributes that are required to contain a URL.",
                "description": "<p>Use this filter to add any <code>data-<\/code> attributes that are required to be validated as a URL.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.1"
                    },
                    {
                        "name": "param",
                        "content": "HTML attribute names whose value contains a URL.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "uri_attributes"
                    }
                ]
            }
        },
        {
            "name": "safe_style_css",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/kses.php",
            "line": 2306,
            "endLine": 2454,
            "doc": {
                "summary": "Filters the list of allowed CSS attributes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.1"
                    },
                    {
                        "name": "param",
                        "content": "Array of allowed CSS attributes.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "attr"
                    }
                ]
            }
        },
        {
            "name": "safecss_filter_attr_allow_css",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/kses.php",
            "line": 2587,
            "doc": {
                "summary": "Filters the check for unsafe CSS in `safecss_filter_attr`.",
                "description": "<p>Enables developers to determine whether a section of CSS should be allowed or discarded.<br>By default, the value will be false if the part contains \\ ( &amp; } = or comments.<br>Return true to allow the CSS part to be included in the output.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the CSS in the test string is considered safe.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow_css"
                    },
                    {
                        "name": "param",
                        "content": "The CSS string to test.",
                        "types": [
                            "string"
                        ],
                        "variable": "css_test_string"
                    }
                ]
            }
        },
        {
            "name": "locale",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/l10n.php",
            "line": 80,
            "doc": {
                "summary": "Filters the locale ID of the WordPress installation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The locale ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "locale"
                    }
                ]
            }
        },
        {
            "name": "pre_determine_locale",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/l10n.php",
            "line": 133,
            "doc": {
                "summary": "Filters the locale for the current request prior to the default determination process.",
                "description": "<p>Using this filter allows to override the default logic, effectively short-circuiting the function.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The locale to return and short-circuit. Default null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "locale"
                    }
                ]
            }
        },
        {
            "name": "determine_locale",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/l10n.php",
            "line": 168,
            "doc": {
                "summary": "Filters the locale for the current request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "locale"
                    }
                ]
            }
        },
        {
            "name": "gettext",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/l10n.php",
            "line": 199,
            "doc": {
                "summary": "Filters text with its translation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.11"
                    },
                    {
                        "name": "param",
                        "content": "Translated text.",
                        "types": [
                            "string"
                        ],
                        "variable": "translation"
                    },
                    {
                        "name": "param",
                        "content": "Text to translate.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "gettext_{$domain}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/l10n.php",
            "line": 212,
            "doc": {
                "summary": "Filters text with its translation for a domain.",
                "description": "<p>The dynamic portion of the hook name, <code>$domain<\/code>, refers to the text domain.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Translated text.",
                        "types": [
                            "string"
                        ],
                        "variable": "translation"
                    },
                    {
                        "name": "param",
                        "content": "Text to translate.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "gettext_with_context",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/l10n.php",
            "line": 267,
            "doc": {
                "summary": "Filters text with its translation based on context information.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Translated text.",
                        "types": [
                            "string"
                        ],
                        "variable": "translation"
                    },
                    {
                        "name": "param",
                        "content": "Text to translate.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Context information for the translators.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "gettext_with_context_{$domain}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/l10n.php",
            "line": 281,
            "doc": {
                "summary": "Filters text with its translation based on context information for a domain.",
                "description": "<p>The dynamic portion of the hook name, <code>$domain<\/code>, refers to the text domain.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Translated text.",
                        "types": [
                            "string"
                        ],
                        "variable": "translation"
                    },
                    {
                        "name": "param",
                        "content": "Text to translate.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Context information for the translators.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "ngettext",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/l10n.php",
            "line": 490,
            "doc": {
                "summary": "Filters the singular or plural form of a string.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Translated text.",
                        "types": [
                            "string"
                        ],
                        "variable": "translation"
                    },
                    {
                        "name": "param",
                        "content": "The text to be used if the number is singular.",
                        "types": [
                            "string"
                        ],
                        "variable": "single"
                    },
                    {
                        "name": "param",
                        "content": "The text to be used if the number is plural.",
                        "types": [
                            "string"
                        ],
                        "variable": "plural"
                    },
                    {
                        "name": "param",
                        "content": "The number to compare against to use either the singular or plural form.",
                        "types": [
                            "int"
                        ],
                        "variable": "number"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "ngettext_{$domain}",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/l10n.php",
            "line": 505,
            "doc": {
                "summary": "Filters the singular or plural form of a string for a domain.",
                "description": "<p>The dynamic portion of the hook name, <code>$domain<\/code>, refers to the text domain.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Translated text.",
                        "types": [
                            "string"
                        ],
                        "variable": "translation"
                    },
                    {
                        "name": "param",
                        "content": "The text to be used if the number is singular.",
                        "types": [
                            "string"
                        ],
                        "variable": "single"
                    },
                    {
                        "name": "param",
                        "content": "The text to be used if the number is plural.",
                        "types": [
                            "string"
                        ],
                        "variable": "plural"
                    },
                    {
                        "name": "param",
                        "content": "The number to compare against to use either the singular or plural form.",
                        "types": [
                            "int"
                        ],
                        "variable": "number"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "ngettext_with_context",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/l10n.php",
            "line": 550,
            "doc": {
                "summary": "Filters the singular or plural form of a string with gettext context.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Translated text.",
                        "types": [
                            "string"
                        ],
                        "variable": "translation"
                    },
                    {
                        "name": "param",
                        "content": "The text to be used if the number is singular.",
                        "types": [
                            "string"
                        ],
                        "variable": "single"
                    },
                    {
                        "name": "param",
                        "content": "The text to be used if the number is plural.",
                        "types": [
                            "string"
                        ],
                        "variable": "plural"
                    },
                    {
                        "name": "param",
                        "content": "The number to compare against to use either the singular or plural form.",
                        "types": [
                            "int"
                        ],
                        "variable": "number"
                    },
                    {
                        "name": "param",
                        "content": "Context information for the translators.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "ngettext_with_context_{$domain}",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/l10n.php",
            "line": 566,
            "doc": {
                "summary": "Filters the singular or plural form of a string with gettext context for a domain.",
                "description": "<p>The dynamic portion of the hook name, <code>$domain<\/code>, refers to the text domain.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Translated text.",
                        "types": [
                            "string"
                        ],
                        "variable": "translation"
                    },
                    {
                        "name": "param",
                        "content": "The text to be used if the number is singular.",
                        "types": [
                            "string"
                        ],
                        "variable": "single"
                    },
                    {
                        "name": "param",
                        "content": "The text to be used if the number is plural.",
                        "types": [
                            "string"
                        ],
                        "variable": "plural"
                    },
                    {
                        "name": "param",
                        "content": "The number to compare against to use either the singular or plural form.",
                        "types": [
                            "int"
                        ],
                        "variable": "number"
                    },
                    {
                        "name": "param",
                        "content": "Context information for the translators.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "override_load_textdomain",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/l10n.php",
            "line": 735,
            "doc": {
                "summary": "Filters whether to override the .mo file loading.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.2.0",
                        "description": "Added the <code>$locale<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Whether to override the .mo file loading. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "override"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "Path to the MO file.",
                        "types": [
                            "string"
                        ],
                        "variable": "mofile"
                    },
                    {
                        "name": "param",
                        "content": "Locale.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "locale"
                    }
                ]
            }
        },
        {
            "name": "load_textdomain",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/l10n.php",
            "line": 751,
            "doc": {
                "summary": "Fires before the MO translation file is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "Path to the .mo file.",
                        "types": [
                            "string"
                        ],
                        "variable": "mofile"
                    }
                ]
            }
        },
        {
            "name": "load_textdomain_mofile",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/l10n.php",
            "line": 761,
            "doc": {
                "summary": "Filters MO file path for loading translations for a specific text domain.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the MO file.",
                        "types": [
                            "string"
                        ],
                        "variable": "mofile"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "override_unload_textdomain",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/l10n.php",
            "line": 819,
            "doc": {
                "summary": "Filters whether to override the text domain unloading.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "Added the <code>$reloadable<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Whether to override the text domain unloading. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "override"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "Whether the text domain can be loaded just-in-time again.",
                        "types": [
                            "bool"
                        ],
                        "variable": "reloadable"
                    }
                ]
            }
        },
        {
            "name": "unload_textdomain",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/l10n.php",
            "line": 838,
            "doc": {
                "summary": "Fires before the text domain is unloaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "Added the <code>$reloadable<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "Whether the text domain can be loaded just-in-time again.",
                        "types": [
                            "bool"
                        ],
                        "variable": "reloadable"
                    }
                ]
            }
        },
        {
            "name": "plugin_locale",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/l10n.php",
            "line": 921,
            "doc": {
                "summary": "Filters a plugin's locale.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The plugin's current locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "locale"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "theme_locale",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/l10n.php",
            "line": 1008,
            "doc": {
                "summary": "Filters a theme's locale.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The theme's current locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "locale"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "load_script_textdomain_relative_path",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/l10n.php",
            "line": 1152,
            "doc": {
                "summary": "Filters the relative path of scripts used for finding translation files.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.2"
                    },
                    {
                        "name": "param",
                        "content": "The relative path of the script. False if it could not be determined.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "relative"
                    },
                    {
                        "name": "param",
                        "content": "The full source URL of the script.",
                        "types": [
                            "string"
                        ],
                        "variable": "src"
                    }
                ]
            }
        },
        {
            "name": "pre_load_script_translations",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/l10n.php",
            "line": 1207,
            "doc": {
                "summary": "Pre-filters script translations for the given file, script handle and text domain.",
                "description": "<p>Returning a non-null value allows to override the default logic, effectively short-circuiting the function.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.2"
                    },
                    {
                        "name": "param",
                        "content": "JSON-encoded translation data. Default null.",
                        "types": [
                            "string",
                            "false",
                            "null"
                        ],
                        "variable": "translations"
                    },
                    {
                        "name": "param",
                        "content": "Path to the translation file to load. False if there isn't one.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "Name of the script to register a translation domain to.",
                        "types": [
                            "string"
                        ],
                        "variable": "handle"
                    },
                    {
                        "name": "param",
                        "content": "The text domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "load_script_translation_file",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/l10n.php",
            "line": 1222,
            "doc": {
                "summary": "Filters the file path for loading script translations for the given script handle and text domain.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.2"
                    },
                    {
                        "name": "param",
                        "content": "Path to the translation file to load. False if there isn't one.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "Name of the script to register a translation domain to.",
                        "types": [
                            "string"
                        ],
                        "variable": "handle"
                    },
                    {
                        "name": "param",
                        "content": "The text domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "load_script_translations",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/l10n.php",
            "line": 1240,
            "doc": {
                "summary": "Filters script translations for the given file, script handle and text domain.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.2"
                    },
                    {
                        "name": "param",
                        "content": "JSON-encoded translation data.",
                        "types": [
                            "string"
                        ],
                        "variable": "translations"
                    },
                    {
                        "name": "param",
                        "content": "Path to the translation file that was loaded.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "Name of the script to register a translation domain to.",
                        "types": [
                            "string"
                        ],
                        "variable": "handle"
                    },
                    {
                        "name": "param",
                        "content": "The text domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    }
                ]
            }
        },
        {
            "name": "get_available_languages",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/l10n.php",
            "line": 1391,
            "doc": {
                "summary": "Filters the list of available language codes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of available language codes.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "languages"
                    },
                    {
                        "name": "param",
                        "content": "The directory where the language files were found.",
                        "types": [
                            "string"
                        ],
                        "variable": "dir"
                    }
                ]
            }
        },
        {
            "name": "the_permalink",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 27,
            "doc": {
                "summary": "Filters the display of the permalink for the current post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The permalink for the current post.",
                        "types": [
                            "string"
                        ],
                        "variable": "permalink"
                    },
                    {
                        "name": "param",
                        "content": "Post ID, WP_Post object, or 0. Default 0.",
                        "types": [
                            "int",
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "user_trailingslashit",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 65,
            "doc": {
                "summary": "Filters the trailing-slashed string, depending on whether the site is set to use trailing slashes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "URL with or without a trailing slash.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The type of URL being considered. Accepts 'single', 'single_trackback', 'single_feed', 'single_paged', 'commentpaged', 'paged', 'home', 'feed', 'category', 'page', 'year', 'month', 'day', 'post_type_archive'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type_of_url"
                    }
                ]
            }
        },
        {
            "name": "pre_post_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 217,
            "doc": {
                "summary": "Filters the permalink structure for a post before token replacement occurs.",
                "description": "<p>Only applies to posts with post_type of 'post'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The site's permalink structure.",
                        "types": [
                            "string"
                        ],
                        "variable": "permalink"
                    },
                    {
                        "name": "param",
                        "content": "The post in question.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether to keep the post name.",
                        "types": [
                            "bool"
                        ],
                        "variable": "leavename"
                    }
                ]
            }
        },
        {
            "name": "post_link_category",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 244,
            "doc": {
                "summary": "Filters the category that gets used in the %category% permalink token.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The category to use in the permalink.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "cat"
                    },
                    {
                        "name": "param",
                        "content": "Array of all categories (WP_Term objects) associated with the post.",
                        "types": [
                            "array"
                        ],
                        "variable": "cats"
                    },
                    {
                        "name": "param",
                        "content": "The post in question.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 304,
            "doc": {
                "summary": "Filters the permalink for a post.",
                "description": "<p>Only applies to posts with post_type of 'post'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The post's permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "permalink"
                    },
                    {
                        "name": "param",
                        "content": "The post in question.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether to keep the post name.",
                        "types": [
                            "bool"
                        ],
                        "variable": "leavename"
                    }
                ]
            }
        },
        {
            "name": "post_type_link",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 371,
            "doc": {
                "summary": "Filters the permalink for a post of a custom post type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The post's permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_link"
                    },
                    {
                        "name": "param",
                        "content": "The post in question.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether to keep the post name.",
                        "types": [
                            "bool"
                        ],
                        "variable": "leavename"
                    },
                    {
                        "name": "param",
                        "content": "Is it a sample permalink.",
                        "types": [
                            "bool"
                        ],
                        "variable": "sample"
                    }
                ]
            }
        },
        {
            "name": "page_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 405,
            "doc": {
                "summary": "Filters the permalink for a page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The page's permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the page.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Is it a sample permalink.",
                        "types": [
                            "bool"
                        ],
                        "variable": "sample"
                    }
                ]
            }
        },
        {
            "name": "_get_page_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 452,
            "doc": {
                "summary": "Filters the permalink for a non-page_on_front page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The page's permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the page.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "attachment_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 530,
            "doc": {
                "summary": "Filters the permalink for an attachment.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "Providing an empty string will now disable the view attachment page link on the media modal."
                    },
                    {
                        "name": "param",
                        "content": "The attachment's permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "year_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 564,
            "doc": {
                "summary": "Filters the year archive permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Permalink for the year archive.",
                        "types": [
                            "string"
                        ],
                        "variable": "yearlink"
                    },
                    {
                        "name": "param",
                        "content": "Year for the archive.",
                        "types": [
                            "int"
                        ],
                        "variable": "year"
                    }
                ]
            }
        },
        {
            "name": "month_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 604,
            "doc": {
                "summary": "Filters the month archive permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Permalink for the month archive.",
                        "types": [
                            "string"
                        ],
                        "variable": "monthlink"
                    },
                    {
                        "name": "param",
                        "content": "Year for the archive.",
                        "types": [
                            "int"
                        ],
                        "variable": "year"
                    },
                    {
                        "name": "param",
                        "content": "The month for the archive.",
                        "types": [
                            "int"
                        ],
                        "variable": "month"
                    }
                ]
            }
        },
        {
            "name": "day_link",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 651,
            "doc": {
                "summary": "Filters the day archive permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Permalink for the day archive.",
                        "types": [
                            "string"
                        ],
                        "variable": "daylink"
                    },
                    {
                        "name": "param",
                        "content": "Year for the archive.",
                        "types": [
                            "int"
                        ],
                        "variable": "year"
                    },
                    {
                        "name": "param",
                        "content": "Month for the archive.",
                        "types": [
                            "int"
                        ],
                        "variable": "month"
                    },
                    {
                        "name": "param",
                        "content": "The day for the archive.",
                        "types": [
                            "int"
                        ],
                        "variable": "day"
                    }
                ]
            }
        },
        {
            "name": "the_feed_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 675,
            "doc": {
                "summary": "Filters the feed link anchor tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete anchor tag for a feed link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "The feed type. Possible values include 'rss2', 'atom', or an empty string for the default feed type.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    }
                ]
            }
        },
        {
            "name": "feed_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 728,
            "doc": {
                "summary": "Filters the feed type permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The feed permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "The feed type. Possible values include 'rss2', 'atom', or an empty string for the default feed type.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    }
                ]
            }
        },
        {
            "name": "post_comments_feed_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 816,
            "doc": {
                "summary": "Filters the post comments feed permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "Post comments feed permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "post_comments_feed_link_html",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 850,
            "doc": {
                "summary": "Filters the post comment feed link anchor tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete anchor tag for the comment feed link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The feed type. Possible values include 'rss2', 'atom', or an empty string for the default feed type.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    }
                ]
            }
        },
        {
            "name": "author_feed_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 895,
            "doc": {
                "summary": "Filters the feed link for a given author.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The author feed link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Feed type. Possible values include 'rss2', 'atom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    }
                ]
            }
        },
        {
            "name": "category_feed_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 979,
            "doc": {
                "summary": "Filters the category feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The category feed link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Feed type. Possible values include 'rss2', 'atom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    }
                ]
            }
        },
        {
            "name": "tag_feed_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 989,
            "doc": {
                "summary": "Filters the post tag feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The tag feed link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Feed type. Possible values include 'rss2', 'atom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    }
                ]
            }
        },
        {
            "name": "taxonomy_feed_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 1000,
            "doc": {
                "summary": "Filters the feed link for a taxonomy other than 'category' or 'post_tag'.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy feed link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Feed type. Possible values include 'rss2', 'atom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "get_edit_tag_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 1037,
            "doc": {
                "summary": "Filters the edit link for a tag (or term in another taxonomy).",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The term edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "edit_tag_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 1061,
            "doc": {
                "summary": "Filters the anchor tag for the edit link for a tag (or term in another taxonomy).",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The anchor tag for the edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "get_edit_term_link",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 1117,
            "doc": {
                "summary": "Filters the edit link for a term.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "The object type.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    }
                ]
            }
        },
        {
            "name": "edit_term_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 1162,
            "doc": {
                "summary": "Filters the anchor tag for the edit link of a term.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The anchor tag for the edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    }
                ]
            }
        },
        {
            "name": "search_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 1209,
            "doc": {
                "summary": "Filters the search permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Search permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "The URL-encoded search term.",
                        "types": [
                            "string"
                        ],
                        "variable": "search"
                    }
                ]
            }
        },
        {
            "name": "search_feed_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 1250,
            "doc": {
                "summary": "Filters the search feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Search feed link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Feed type. Possible values include 'rss2', 'atom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    },
                    {
                        "name": "param",
                        "content": "The search type. One of 'posts' or 'comments'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    }
                ]
            }
        },
        {
            "name": "post_type_archive_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 1344,
            "doc": {
                "summary": "Filters the post type archive permalink.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The post type archive permalink.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Post type name.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "post_type_archive_feed_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 1388,
            "doc": {
                "summary": "Filters the post type archive feed link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The post type archive feed link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Feed type. Possible values include 'rss2', 'atom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "feed"
                    }
                ]
            }
        },
        {
            "name": "preview_post_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 1431,
            "doc": {
                "summary": "Filters the URL used for a post preview.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.5"
                    },
                    {
                        "name": "since",
                        "content": "4.0.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "URL used for the post preview.",
                        "types": [
                            "string"
                        ],
                        "variable": "preview_link"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_edit_post_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 1488,
            "doc": {
                "summary": "Filters the post edit link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The link context. If set to 'display' then ampersands are encoded.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "edit_post_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 1531,
            "doc": {
                "summary": "Filters the post edit link anchor tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Anchor tag for the edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Anchor text.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "get_delete_post_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 1580,
            "doc": {
                "summary": "Filters the post delete link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The delete link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether to bypass the Trash and force deletion. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "force_delete"
                    }
                ]
            }
        },
        {
            "name": "get_edit_comment_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 1607,
            "doc": {
                "summary": "Filters the comment edit link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    }
                ]
            }
        },
        {
            "name": "edit_comment_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 1641,
            "doc": {
                "summary": "Filters the comment edit link anchor tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Anchor tag for the edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    },
                    {
                        "name": "param",
                        "content": "Anchor text.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "get_edit_bookmark_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 1669,
            "doc": {
                "summary": "Filters the bookmark edit link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    },
                    {
                        "name": "param",
                        "content": "Bookmark ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "link_id"
                    }
                ]
            }
        },
        {
            "name": "edit_bookmark_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 1703,
            "doc": {
                "summary": "Filters the bookmark edit link anchor tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Anchor tag for the edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Bookmark ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "link_id"
                    }
                ]
            }
        },
        {
            "name": "get_edit_user_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 1743,
            "doc": {
                "summary": "Filters the user edit link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The edit link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "get_{$adjacent}_post_excluded_terms",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 1853,
            "doc": {
                "summary": "Filters the IDs of terms excluded from adjacent post queries.",
                "description": "<p>The dynamic portion of the hook name, <code>$adjacent<\/code>, refers to the type of adjacency, 'next' or 'previous'.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>get_next_post_excluded_terms<\/code><\/li> <li><code>get_previous_post_excluded_terms<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of excluded term IDs. Empty string if none were provided.",
                        "types": [
                            "int[]",
                            "string"
                        ],
                        "variable": "excluded_terms"
                    }
                ]
            }
        },
        {
            "name": "get_{$adjacent}_post_join",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/link-template.php",
            "line": 1934,
            "doc": {
                "summary": "Filters the JOIN clause in the SQL for an adjacent post query.",
                "description": "<p>The dynamic portion of the hook name, <code>$adjacent<\/code>, refers to the type of adjacency, 'next' or 'previous'.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>get_next_post_join<\/code><\/li> <li><code>get_previous_post_join<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$taxonomy<\/code> and <code>$post<\/code> parameters."
                    },
                    {
                        "name": "param",
                        "content": "The JOIN clause in the SQL.",
                        "types": [
                            "string"
                        ],
                        "variable": "join"
                    },
                    {
                        "name": "param",
                        "content": "Whether post should be in the same taxonomy term.",
                        "types": [
                            "bool"
                        ],
                        "variable": "in_same_term"
                    },
                    {
                        "name": "param",
                        "content": "Array of excluded term IDs. Empty string if none were provided.",
                        "types": [
                            "int[]",
                            "string"
                        ],
                        "variable": "excluded_terms"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy. Used to identify the term used when <code>$in_same_term<\/code> is true.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_{$adjacent}_post_where",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/link-template.php",
            "line": 1956,
            "doc": {
                "summary": "Filters the WHERE clause in the SQL for an adjacent post query.",
                "description": "<p>The dynamic portion of the hook name, <code>$adjacent<\/code>, refers to the type of adjacency, 'next' or 'previous'.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>get_next_post_where<\/code><\/li> <li><code>get_previous_post_where<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$taxonomy<\/code> and <code>$post<\/code> parameters."
                    },
                    {
                        "name": "param",
                        "content": "The <code>WHERE<\/code> clause in the SQL.",
                        "types": [
                            "string"
                        ],
                        "variable": "where"
                    },
                    {
                        "name": "param",
                        "content": "Whether post should be in the same taxonomy term.",
                        "types": [
                            "bool"
                        ],
                        "variable": "in_same_term"
                    },
                    {
                        "name": "param",
                        "content": "Array of excluded term IDs. Empty string if none were provided.",
                        "types": [
                            "int[]",
                            "string"
                        ],
                        "variable": "excluded_terms"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy. Used to identify the term used when <code>$in_same_term<\/code> is true.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_{$adjacent}_post_sort",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 1977,
            "doc": {
                "summary": "Filters the ORDER BY clause in the SQL for an adjacent post query.",
                "description": "<p>The dynamic portion of the hook name, <code>$adjacent<\/code>, refers to the type of adjacency, 'next' or 'previous'.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>get_next_post_sort<\/code><\/li> <li><code>get_previous_post_sort<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$order<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The <code>ORDER BY<\/code> clause in the SQL.",
                        "types": [
                            "string"
                        ],
                        "variable": "order_by"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Sort order. 'DESC' for previous post, 'ASC' for next.",
                        "types": [
                            "string"
                        ],
                        "variable": "order"
                    }
                ]
            }
        },
        {
            "name": "{$adjacent}_post_rel_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 2075,
            "doc": {
                "summary": "Filters the adjacent post relational link.",
                "description": "<p>The dynamic portion of the hook name, <code>$adjacent<\/code>, refers to the type of adjacency, 'next' or 'previous'.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>next_post_rel_link<\/code><\/li> <li><code>previous_post_rel_link<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The relational link.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "{$adjacent}_post_link",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/link-template.php",
            "line": 2361,
            "doc": {
                "summary": "Filters the adjacent post link.",
                "description": "<p>The dynamic portion of the hook name, <code>$adjacent<\/code>, refers to the type of adjacency, 'next' or 'previous'.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>next_post_link<\/code><\/li> <li><code>previous_post_link<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.2.0",
                        "description": "Added the <code>$adjacent<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The adjacent post link.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Link anchor format.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    },
                    {
                        "name": "param",
                        "content": "Link permalink format.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "The adjacent post. Empty string if no corresponding post exists.",
                        "types": [
                            "\\WP_Post",
                            "string"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post is previous or next.",
                        "types": [
                            "string"
                        ],
                        "variable": "adjacent"
                    }
                ]
            }
        },
        {
            "name": "get_pagenum_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 2456,
            "doc": {
                "summary": "Filters the page number link for the current request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.2.0",
                        "description": "Added the <code>$pagenum<\/code> argument."
                    },
                    {
                        "name": "param",
                        "content": "The page number link.",
                        "types": [
                            "string"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "The page number.",
                        "types": [
                            "int"
                        ],
                        "variable": "pagenum"
                    }
                ]
            }
        },
        {
            "name": "next_posts_link_attributes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 2549,
            "doc": {
                "summary": "Filters the anchor tag attributes for the next posts page link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Attributes for the anchor tag.",
                        "types": [
                            "string"
                        ],
                        "variable": "attributes"
                    }
                ]
            }
        },
        {
            "name": "previous_posts_link_attributes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 2642,
            "doc": {
                "summary": "Filters the anchor tag attributes for the previous posts page link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Attributes for the anchor tag.",
                        "types": [
                            "string"
                        ],
                        "variable": "attributes"
                    }
                ]
            }
        },
        {
            "name": "the_posts_pagination_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 2944,
            "doc": {
                "summary": "Filters the arguments for posts pagination links.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Optional. Default pagination arguments, see paginate_links().<br>    @type string $screen_reader_text Screen reader text for navigation element.<br>                                     Default 'Posts navigation'.<br>    @type string $aria_label         ARIA label text for the nav element. Default 'Posts'.<br>    @type string $class              Custom class for the nav element. Default 'pagination'.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "navigation_markup_template",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 3022,
            "doc": {
                "summary": "Filters the navigation markup template.",
                "description": "<p>Note: The filtered template HTML must contain specifiers for the navigation class (%1$s), the screen-reader-text value (%2$s), placement of the navigation links (%3$s), and ARIA label text if screen-reader-text does not fit that (%4$s):<\/p> <pre><code>&lt;nav class=\"navigation %1$s\" aria-label=\"%4$s\"&gt;\n    &lt;h2 class=\"screen-reader-text\"&gt;%2$s&lt;\/h2&gt;\n    &lt;div class=\"nav-links\"&gt;%3$s&lt;\/div&gt;\n&lt;\/nav&gt;<\/code><\/pre>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The default template.",
                        "types": [
                            "string"
                        ],
                        "variable": "template"
                    },
                    {
                        "name": "param",
                        "content": "The class passed by the calling function.",
                        "types": [
                            "string"
                        ],
                        "variable": "css_class"
                    },
                    {
                        "name": "return",
                        "content": "Navigation template.",
                        "types": [
                            "string"
                        ]
                    }
                ]
            }
        },
        {
            "name": "get_comments_pagenum_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 3070,
            "doc": {
                "summary": "Filters the comments page number link for the current request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The comments page number link.",
                        "types": [
                            "string"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "next_comments_link_attributes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 3122,
            "doc": {
                "summary": "Filters the anchor tag attributes for the next comments page link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Attributes for the anchor tag.",
                        "types": [
                            "string"
                        ],
                        "variable": "attributes"
                    }
                ]
            }
        },
        {
            "name": "previous_comments_link_attributes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 3176,
            "doc": {
                "summary": "Filters the anchor tag attributes for the previous comments page link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Attributes for the anchor tag.",
                        "types": [
                            "string"
                        ],
                        "variable": "attributes"
                    }
                ]
            }
        },
        {
            "name": "home_url",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 3445,
            "doc": {
                "summary": "Filters the home URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete home URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the home URL. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Scheme to give the home URL context. Accepts 'http', 'https', 'relative', 'rest', or null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "orig_scheme"
                    },
                    {
                        "name": "param",
                        "content": "Site ID, or null for the current site.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "site_url",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 3509,
            "doc": {
                "summary": "Filters the site URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete site URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the site URL. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Scheme to give the site URL context. Accepts 'http', 'https', 'login', 'login_post', 'admin', 'relative' or null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "scheme"
                    },
                    {
                        "name": "param",
                        "content": "Site ID, or null for the current site.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "admin_url",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 3557,
            "doc": {
                "summary": "Filters the admin area URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$scheme<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The complete admin area URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the admin area URL. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Site ID, or null for the current site.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "blog_id"
                    },
                    {
                        "name": "param",
                        "content": "The scheme to use. Accepts 'http', 'https', 'admin', or null. Default 'admin', which obeys force_ssl_admin() and is_ssl().",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "includes_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 3589,
            "doc": {
                "summary": "Filters the URL to the includes directory.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$scheme<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The complete URL to the includes directory including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the URL to the wp-includes directory. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Scheme to give the includes URL context. Accepts 'http', 'https', 'relative', or null. Default null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "content_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 3616,
            "doc": {
                "summary": "Filters the URL to the content directory.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete URL to the content directory including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the URL to the content directory. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "plugins_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 3669,
            "doc": {
                "summary": "Filters the URL to the plugins directory.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete URL to the plugins directory including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the URL to the plugins directory. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The plugin file path to be relative to. Blank string if no plugin is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin"
                    }
                ]
            }
        },
        {
            "name": "network_site_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 3716,
            "doc": {
                "summary": "Filters the network site URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete network site URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the network site URL. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Scheme to give the URL context. Accepts 'http', 'https', 'relative' or null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "network_home_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 3766,
            "doc": {
                "summary": "Filters the network home URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete network home URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the network home URL. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Scheme to give the URL context. Accepts 'http', 'https', 'relative' or null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "orig_scheme"
                    }
                ]
            }
        },
        {
            "name": "network_admin_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 3802,
            "doc": {
                "summary": "Filters the network admin URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$scheme<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The complete network admin URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the network admin URL. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The scheme to use. Accepts 'http', 'https', 'admin', or null. Default is 'admin', which obeys force_ssl_admin() and is_ssl().",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "user_admin_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 3834,
            "doc": {
                "summary": "Filters the user admin URL for the current user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$scheme<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The complete URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the URL. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The scheme to use. Accepts 'http', 'https', 'admin', or null. Default is 'admin', which obeys force_ssl_admin() and is_ssl().",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "self_admin_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 3865,
            "doc": {
                "summary": "Filters the admin URL for the current site or network depending on context.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the URL. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The scheme to use.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "set_url_scheme",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 3914,
            "doc": {
                "summary": "Filters the resulting URL after setting the scheme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Scheme applied to the URL. One of 'http', 'https', or 'relative'.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    },
                    {
                        "name": "param",
                        "content": "Scheme requested for the URL. One of 'http', 'https', 'login', 'login_post', 'admin', 'relative', 'rest', 'rpc', or null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "orig_scheme"
                    }
                ]
            }
        },
        {
            "name": "user_dashboard_url",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 3968,
            "doc": {
                "summary": "Filters the dashboard URL for a user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Path relative to the URL. Blank string if no path is specified.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Scheme to give the URL context. Accepts 'http', 'https', 'login', 'login_post', 'admin', 'relative' or null.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "edit_profile_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 4002,
            "doc": {
                "summary": "Filters the URL for a user's profile editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The complete URL including scheme and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Scheme to give the URL context. Accepts 'http', 'https', 'login', 'login_post', 'admin', 'relative' or null.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "get_canonical_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 4055,
            "doc": {
                "summary": "Filters the canonical URL for a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The post's canonical URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "canonical_url"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "pre_get_shortlink",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 4116,
            "doc": {
                "summary": "Filters whether to preempt generating a shortlink for the given post.",
                "description": "<p>Returning a value other than false from the filter will short-circuit the shortlink generation process, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Short-circuit return value. Either false or a URL string.",
                        "types": [
                            "false",
                            "string"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "Post ID, or 0 for the current post.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "The context for the link. One of 'post' or 'query',",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow post slugs in the shortlink.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow_slugs"
                    }
                ]
            }
        },
        {
            "name": "get_shortlink",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 4156,
            "doc": {
                "summary": "Filters the shortlink for a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Shortlink URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "shortlink"
                    },
                    {
                        "name": "param",
                        "content": "Post ID, or 0 for the current post.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "The context for the link. One of 'post' or 'query',",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow post slugs in the shortlink. Not used by default.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow_slugs"
                    }
                ]
            }
        },
        {
            "name": "the_shortlink",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/link-template.php",
            "line": 4237,
            "doc": {
                "summary": "Filters the short link anchor tag for a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Shortlink anchor tag.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Shortlink URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "shortlink"
                    },
                    {
                        "name": "param",
                        "content": "Shortlink's text.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Shortlink's title attribute.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "get_avatar_comment_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 4292,
            "doc": {
                "summary": "Filters the list of allowed comment types for retrieving avatars.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of content types. Default only contains 'comment'.",
                        "types": [
                            "array"
                        ],
                        "variable": "types"
                    }
                ]
            }
        },
        {
            "name": "pre_get_avatar_data",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 4411,
            "doc": {
                "summary": "Filters whether to retrieve the avatar URL early.",
                "description": "<p>Passing a non-null value in the 'url' member of the return array will effectively short circuit get_avatar_data(), passing the value through the {@see 'get_avatar_data'} filter and returning early.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to get_avatar_data(), after processing.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The avatar to retrieve. Accepts a user ID, Gravatar MD5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "id_or_email"
                    }
                ]
            }
        },
        {
            "name": "get_avatar_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/link-template.php",
            "line": 4503,
            "doc": {
                "summary": "Filters the avatar URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The URL of the avatar.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The avatar to retrieve. Accepts a user ID, Gravatar MD5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "id_or_email"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to get_avatar_data(), after processing.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_avatar_data",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 4514,
            "doc": {
                "summary": "Filters the avatar data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to get_avatar_data(), after processing.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The avatar to retrieve. Accepts a user ID, Gravatar MD5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "id_or_email"
                    }
                ]
            }
        },
        {
            "name": "theme_file_uri",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 4547,
            "doc": {
                "summary": "Filters the URL to a file in the theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The file URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The requested file to search for.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "parent_theme_file_uri",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 4575,
            "doc": {
                "summary": "Filters the URL to a file in the parent theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The file URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The requested file to search for.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "theme_file_path",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 4608,
            "doc": {
                "summary": "Filters the path to a file in the theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The file path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The requested file to search for.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "parent_theme_file_path",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 4636,
            "doc": {
                "summary": "Filters the path to a file in the parent theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The file path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The requested file to search for.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    }
                ]
            }
        },
        {
            "name": "privacy_policy_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 4663,
            "doc": {
                "summary": "Filters the URL of the privacy policy page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The URL to the privacy policy page. Empty string if it doesn't exist.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "The ID of privacy policy page.",
                        "types": [
                            "int"
                        ],
                        "variable": "policy_page_id"
                    }
                ]
            }
        },
        {
            "name": "the_privacy_policy_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/link-template.php",
            "line": 4713,
            "doc": {
                "summary": "Filters the privacy policy link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The privacy policy link. Empty string if it doesn't exist.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "The URL of the privacy policy. Empty string if it doesn't exist.",
                        "types": [
                            "string"
                        ],
                        "variable": "privacy_policy_url"
                    }
                ]
            }
        },
        {
            "name": "wp_internal_hosts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/link-template.php",
            "line": 4750,
            "endLine": 4755,
            "doc": {
                "summary": "Filters the array of URL hosts which are considered internal.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of internal URL hostnames.",
                        "types": [
                            "array"
                        ],
                        "variable": "internal_hosts"
                    }
                ]
            }
        },
        {
            "name": "enable_maintenance_mode",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/load.php",
            "line": 349,
            "doc": {
                "summary": "Filters whether to enable maintenance mode.",
                "description": "<p>This filter runs before it can be used by plugins. It is designed for non-web runtimes. If this filter returns true, maintenance mode will be active and the request will end. If false, the request will be allowed to continue processing even if maintenance mode should be active.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable maintenance mode. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enable_checks"
                    },
                    {
                        "name": "param",
                        "content": "The timestamp set in the .maintenance file.",
                        "types": [
                            "int"
                        ],
                        "variable": "upgrading"
                    }
                ]
            }
        },
        {
            "name": "enable_wp_debug_mode_checks",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/load.php",
            "line": 475,
            "doc": {
                "summary": "Filters whether to allow the debug mode check to occur.",
                "description": "<p>This filter runs before it can be used by plugins. It is designed for non-web runtimes. Returning false causes the <code>WP_DEBUG<\/code> and related constants to not be checked and the default PHP values for errors will be used unless you take care to update them yourself.<\/p> <p>To use this filter you must define a <code>$wp_filter<\/code> global before WordPress loads, usually in <code>wp-config.php<\/code>.<\/p> <p>Example:<\/p> <pre><code>$GLOBALS['wp_filter'] = array(\n    'enable_wp_debug_mode_checks' =&gt; array(\n        10 =&gt; array(\n            array(\n                'accepted_args' =&gt; 0,\n                'function'      =&gt; function() {\n                    return false;\n                },\n            ),\n        ),\n    ),\n);<\/code><\/pre>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable debug mode checks to occur. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enable_debug_mode"
                    }
                ]
            }
        },
        {
            "name": "enable_loading_object_cache_dropin",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/load.php",
            "line": 704,
            "doc": {
                "summary": "Filters whether to enable loading of the object-cache.php drop-in.",
                "description": "<p>This filter runs before it can be used by plugins. It is designed for non-web runtimes. If false is returned, object-cache.php will never be loaded.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable loading object-cache.php (if present).<br>Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enable_object_cache"
                    }
                ]
            }
        },
        {
            "name": "is_protected_endpoint",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/load.php",
            "line": 1045,
            "doc": {
                "summary": "Filters whether the current request is against a protected endpoint.",
                "description": "<p>This filter is only fired when an endpoint is requested which is not already protected by WordPress core. As such, it exclusively allows providing further protected endpoints in addition to the admin backend, login pages and protected Ajax actions.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the currently requested endpoint is protected.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_protected_endpoint"
                    }
                ]
            }
        },
        {
            "name": "wp_protected_ajax_actions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/load.php",
            "line": 1084,
            "doc": {
                "summary": "Filters the array of protected Ajax actions.",
                "description": "<p>This filter is only fired when doing Ajax and the Ajax request has an 'action' property.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of strings with Ajax actions to protect.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "actions_to_protect"
                    }
                ]
            }
        },
        {
            "name": "shutdown",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/load.php",
            "line": 1144,
            "doc": {
                "summary": "Fires just before PHP shuts down execution.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    }
                ]
            }
        },
        {
            "name": "wp_doing_ajax",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/load.php",
            "line": 1565,
            "doc": {
                "summary": "Filters whether the current request is a WordPress Ajax request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the current request is a WordPress Ajax request.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_doing_ajax"
                    }
                ]
            }
        },
        {
            "name": "wp_using_themes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/load.php",
            "line": 1583,
            "doc": {
                "summary": "Filters whether the current request should use themes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the current request should use themes.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_using_themes"
                    }
                ]
            }
        },
        {
            "name": "wp_doing_cron",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/load.php",
            "line": 1601,
            "doc": {
                "summary": "Filters whether the current request is a WordPress cron request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the current request is a WordPress cron request.",
                        "types": [
                            "bool"
                        ],
                        "variable": "wp_doing_cron"
                    }
                ]
            }
        },
        {
            "name": "is_wp_error_instance",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/load.php",
            "line": 1625,
            "doc": {
                "summary": "Fires when `is_wp_error()` is called and its parameter is an instance of `WP_Error`.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The error object passed to <code>is_wp_error()<\/code>.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "thing"
                    }
                ]
            }
        },
        {
            "name": "file_mod_allowed",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/load.php",
            "line": 1648,
            "doc": {
                "summary": "Filters whether file modifications are allowed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether file modifications are allowed.",
                        "types": [
                            "bool"
                        ],
                        "variable": "file_mod_allowed"
                    },
                    {
                        "name": "param",
                        "content": "The usage context.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "wp_is_site_protected_by_basic_auth",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/load.php",
            "line": 1841,
            "doc": {
                "summary": "Filters whether a site is protected by HTTP Basic Auth.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.1"
                    },
                    {
                        "name": "param",
                        "content": "Whether the site is protected by Basic Auth.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_protected"
                    },
                    {
                        "name": "param",
                        "content": "The context to check for protection. One of 'login', 'admin', or 'front'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "print_media_templates",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/media-template.php",
            "line": 1555,
            "doc": {
                "summary": "Fires when the custom Backbone media templates are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ]
            }
        },
        {
            "name": "editor_max_image_size",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 133,
            "doc": {
                "summary": "Filters the maximum image size dimensions for the editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of width and height values.<br>    @type int $0 The maximum width in pixels.<br>    @type int $1 The maximum height in pixels.<br>}",
                        "types": [
                            "int[]"
                        ],
                        "variable": "max_image_size"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "The context the image is being resized for.<br>Possible values are 'display' (like in a theme) or 'edit' (like inserting into an editor).",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "image_downsize",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 207,
            "doc": {
                "summary": "Filters whether to preempt the output of image_downsize().",
                "description": "<p>Returning a truthy value from the filter will effectively short-circuit down-sizing the image, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to short-circuit the image downsize.",
                        "types": [
                            "bool",
                            "array"
                        ],
                        "variable": "downsize"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID for image.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "get_image_tag_class",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 394,
            "doc": {
                "summary": "Filters the value of the attachment's image tag class attribute.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "CSS class name or space-separated list of classes.",
                        "types": [
                            "string"
                        ],
                        "variable": "class"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "Part of the class name for aligning the image.",
                        "types": [
                            "string"
                        ],
                        "variable": "align"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "get_image_tag",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/media.php",
            "line": 411,
            "doc": {
                "summary": "Filters the HTML content for the image tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML content for the image.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "Image description for the alt attribute.",
                        "types": [
                            "string"
                        ],
                        "variable": "alt"
                    },
                    {
                        "name": "param",
                        "content": "Image description for the title attribute.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Part of the class name for aligning the image.",
                        "types": [
                            "string"
                        ],
                        "variable": "align"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "wp_constrain_dimensions",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/media.php",
            "line": 503,
            "doc": {
                "summary": "Filters dimensions to constrain down-sampled images to.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of width and height values.<br>    @type int $0 The width in pixels.<br>    @type int $1 The height in pixels.<br>}",
                        "types": [
                            "int[]"
                        ],
                        "variable": "dimensions"
                    },
                    {
                        "name": "param",
                        "content": "The current width of the image.",
                        "types": [
                            "int"
                        ],
                        "variable": "current_width"
                    },
                    {
                        "name": "param",
                        "content": "The current height of the image.",
                        "types": [
                            "int"
                        ],
                        "variable": "current_height"
                    },
                    {
                        "name": "param",
                        "content": "The maximum width permitted.",
                        "types": [
                            "int"
                        ],
                        "variable": "max_width"
                    },
                    {
                        "name": "param",
                        "content": "The maximum height permitted.",
                        "types": [
                            "int"
                        ],
                        "variable": "max_height"
                    }
                ]
            }
        },
        {
            "name": "image_resize_dimensions",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/media.php",
            "line": 556,
            "doc": {
                "summary": "Filters whether to preempt calculating the image resize dimensions.",
                "description": "<p>Returning a non-null value from the filter will effectively short-circuit image_resize_dimensions(), returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to preempt output of the resize dimensions.",
                        "types": [
                            "null",
                            "mixed"
                        ],
                        "variable": "null"
                    },
                    {
                        "name": "param",
                        "content": "Original width in pixels.",
                        "types": [
                            "int"
                        ],
                        "variable": "orig_w"
                    },
                    {
                        "name": "param",
                        "content": "Original height in pixels.",
                        "types": [
                            "int"
                        ],
                        "variable": "orig_h"
                    },
                    {
                        "name": "param",
                        "content": "New width in pixels.",
                        "types": [
                            "int"
                        ],
                        "variable": "dest_w"
                    },
                    {
                        "name": "param",
                        "content": "New height in pixels.",
                        "types": [
                            "int"
                        ],
                        "variable": "dest_h"
                    },
                    {
                        "name": "param",
                        "content": "Whether to crop image to specified width and height or resize.<br>An array can specify positioning of the crop area. Default false.",
                        "types": [
                            "bool",
                            "array"
                        ],
                        "variable": "crop"
                    }
                ]
            }
        },
        {
            "name": "wp_image_resize_identical_dimensions",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 648,
            "doc": {
                "summary": "Filters whether to proceed with making an image sub-size with identical dimensions with the original\/source image. Differences of 1px may be due to rounding and are ignored.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The filtered value.",
                        "types": [
                            "bool"
                        ],
                        "variable": "proceed"
                    },
                    {
                        "name": "param",
                        "content": "Original image width.",
                        "types": [
                            "int"
                        ],
                        "variable": "orig_w"
                    },
                    {
                        "name": "param",
                        "content": "Original image height.",
                        "types": [
                            "int"
                        ],
                        "variable": "orig_h"
                    }
                ]
            }
        },
        {
            "name": "image_get_intermediate_size",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 849,
            "doc": {
                "summary": "Filters the output of image_get_intermediate_size()",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\image_get_intermediate_size()"
                    },
                    {
                        "name": "param",
                        "content": "Array of file relative path, width, and height on success. May also include file absolute path and URL.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the image attachment.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "intermediate_image_sizes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 875,
            "doc": {
                "summary": "Filters the list of intermediate image sizes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of intermediate image size names. Defaults are 'thumbnail', 'medium', 'medium_large', 'large'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "default_sizes"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_image_src",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 992,
            "doc": {
                "summary": "Filters the attachment image source result.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of image data, or boolean false if no image is available.<br>    @type string $0 Image source URL.<br>    @type int    $1 Image width in pixels.<br>    @type int    $2 Image height in pixels.<br>    @type bool   $3 Whether the image is a resized image.<br>}",
                        "types": [
                            "array",
                            "false"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "Image attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "Whether the image should be treated as an icon.",
                        "types": [
                            "bool"
                        ],
                        "variable": "icon"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_image_attributes",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 1101,
            "doc": {
                "summary": "Filters the list of attachment image attributes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of attribute values for the image markup, keyed by attribute name.<br>See wp_get_attachment_image().",
                        "types": [
                            "string[]"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "Image attachment post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "attachment"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_image",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/media.php",
            "line": 1126,
            "doc": {
                "summary": "Filters the HTML img element representing an image attachment.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML img element or empty string on failure.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Image attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "Whether the image should be treated as an icon.",
                        "types": [
                            "bool"
                        ],
                        "variable": "icon"
                    },
                    {
                        "name": "param",
                        "content": "Array of attribute values for the image markup, keyed by attribute name.<br>See wp_get_attachment_image().",
                        "types": [
                            "string[]"
                        ],
                        "variable": "attr"
                    }
                ]
            }
        },
        {
            "name": "wp_calculate_image_srcset_meta",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 1270,
            "doc": {
                "summary": "Pre-filters the image meta to be able to fix inconsistencies in the stored data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                        "types": [
                            "array"
                        ],
                        "variable": "image_meta"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of requested width and height values.<br>    @type int $0 The width in pixels.<br>    @type int $1 The height in pixels.<br>}",
                        "types": [
                            "int[]"
                        ],
                        "variable": "size_array"
                    },
                    {
                        "name": "param",
                        "content": "The 'src' of the image.",
                        "types": [
                            "string"
                        ],
                        "variable": "image_src"
                    },
                    {
                        "name": "param",
                        "content": "The image attachment ID or 0 if not supplied.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "max_srcset_image_width",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/media.php",
            "line": 1342,
            "doc": {
                "summary": "Filters the maximum image width to be included in a 'srcset' attribute.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The maximum image width to be included in the 'srcset'. Default '2048'.",
                        "types": [
                            "int"
                        ],
                        "variable": "max_width"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of requested width and height values.<br>    @type int $0 The width in pixels.<br>    @type int $1 The height in pixels.<br>}",
                        "types": [
                            "int[]"
                        ],
                        "variable": "size_array"
                    }
                ]
            }
        },
        {
            "name": "wp_calculate_image_srcset",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/media.php",
            "line": 1429,
            "doc": {
                "summary": "Filters an image's 'srcset' sources.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "{     One or more arrays of source data to include in the 'srcset'.<br>    @type array $width {         @type string $url        The URL of an image source.<br>        @type string $descriptor The descriptor type used in the image candidate string,                                  either 'w' or 'x'.<br>        @type int    $value      The source width if paired with a 'w' descriptor, or a                                  pixel density value if paired with an 'x' descriptor.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "sources"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of requested width and height values.<br>    @type int $0 The width in pixels.<br>    @type int $1 The height in pixels.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "size_array"
                    },
                    {
                        "name": "param",
                        "content": "The 'src' of the image.",
                        "types": [
                            "string"
                        ],
                        "variable": "image_src"
                    },
                    {
                        "name": "param",
                        "content": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                        "types": [
                            "array"
                        ],
                        "variable": "image_meta"
                    },
                    {
                        "name": "param",
                        "content": "Image attachment ID or 0.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_calculate_image_sizes",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/media.php",
            "line": 1530,
            "doc": {
                "summary": "Filters the output of 'wp_calculate_image_sizes()'.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "A source size value for use in a 'sizes' attribute.",
                        "types": [
                            "string"
                        ],
                        "variable": "sizes"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "The URL to the image file or null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "image_src"
                    },
                    {
                        "name": "param",
                        "content": "The image meta data as returned by wp_get_attachment_metadata() or null.",
                        "types": [
                            "array",
                            "null"
                        ],
                        "variable": "image_meta"
                    },
                    {
                        "name": "param",
                        "content": "Image attachment ID of the original image or 0.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_image_file_matches_image_meta",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 1599,
            "doc": {
                "summary": "Filters whether an image path or URI matches image meta.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the image relative path from the image meta matches the end of the URI or path to the image file.",
                        "types": [
                            "bool"
                        ],
                        "variable": "match"
                    },
                    {
                        "name": "param",
                        "content": "Full path or URI to the tested image file.",
                        "types": [
                            "string"
                        ],
                        "variable": "image_location"
                    },
                    {
                        "name": "param",
                        "content": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                        "types": [
                            "array"
                        ],
                        "variable": "image_meta"
                    },
                    {
                        "name": "param",
                        "content": "The image attachment ID or 0 if not supplied.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_image_src_get_dimensions",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 1655,
            "doc": {
                "summary": "Filters the 'wp_image_src_get_dimensions' value.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array with first element being the width and second element being the height, or false if dimensions could not be determined.",
                        "types": [
                            "array",
                            "false"
                        ],
                        "variable": "dimensions"
                    },
                    {
                        "name": "param",
                        "content": "The image source file.",
                        "types": [
                            "string"
                        ],
                        "variable": "image_src"
                    },
                    {
                        "name": "param",
                        "content": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                        "types": [
                            "array"
                        ],
                        "variable": "image_meta"
                    },
                    {
                        "name": "param",
                        "content": "The image attachment ID. Default 0.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_lazy_loading_enabled",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 1757,
            "doc": {
                "summary": "Filters whether to add the `loading` attribute to the specified tag in the specified context.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Default value.",
                        "types": [
                            "bool"
                        ],
                        "variable": "default"
                    },
                    {
                        "name": "param",
                        "content": "The tag name.",
                        "types": [
                            "string"
                        ],
                        "variable": "tag_name"
                    },
                    {
                        "name": "param",
                        "content": "Additional context, like the current filter name or the function name from where this was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "wp_content_img_tag",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 1870,
            "doc": {
                "summary": "Filters an img tag within the content for a given context.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Full img tag with attributes that will replace the source img tag.",
                        "types": [
                            "string"
                        ],
                        "variable": "filtered_image"
                    },
                    {
                        "name": "param",
                        "content": "Additional context, like the current filter name or the function name from where this was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "The image attachment ID. May be 0 in case the image is not an attachment.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_img_tag_add_loading_attr",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 1939,
            "doc": {
                "summary": "Filters the `loading` attribute value to add to an image. Default `lazy`.",
                "description": "<p>Returning <code>false<\/code> or an empty string will not add the attribute.<br>Returning <code>true<\/code> will add the default value.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The <code>loading<\/code> attribute value. Returning a falsey value will result in the attribute being omitted for the image.",
                        "types": [
                            "string",
                            "bool"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The HTML <code>img<\/code> tag to be filtered.",
                        "types": [
                            "string"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "Additional context about how the function was called or where the img tag is.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "wp_img_tag_add_decoding_attr",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 1991,
            "doc": {
                "summary": "Filters the `decoding` attribute value to add to an image. Default `async`.",
                "description": "<p>Returning a falsey value will omit the attribute.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The <code>decoding<\/code> attribute value. Returning a falsey value will result in the attribute being omitted for the image.<br>Otherwise, it may be: 'async' (default), 'sync', or 'auto'.",
                        "types": [
                            "string",
                            "false",
                            "null"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The HTML <code>img<\/code> tag to be filtered.",
                        "types": [
                            "string"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "Additional context about how the function was called or where the img tag is.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "wp_img_tag_add_width_and_height_attr",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 2031,
            "doc": {
                "summary": "Filters whether to add the missing `width` and `height` HTML attributes to the img tag. Default `true`.",
                "description": "<p>Returning anything else than <code>true<\/code> will not add the attributes.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The filtered value, defaults to <code>true<\/code>.",
                        "types": [
                            "bool"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The HTML <code>img<\/code> tag where the attribute should be added.",
                        "types": [
                            "string"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "Additional context about how the function was called or where the img tag is.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "The image attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_img_tag_add_srcset_and_sizes_attr",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 2069,
            "doc": {
                "summary": "Filters whether to add the `srcset` and `sizes` HTML attributes to the img tag. Default `true`.",
                "description": "<p>Returning anything else than <code>true<\/code> will not add the attributes.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The filtered value, defaults to <code>true<\/code>.",
                        "types": [
                            "bool"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The HTML <code>img<\/code> tag where the attribute should be added.",
                        "types": [
                            "string"
                        ],
                        "variable": "image"
                    },
                    {
                        "name": "param",
                        "content": "Additional context about how the function was called or where the img tag is.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    },
                    {
                        "name": "param",
                        "content": "The image attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_iframe_tag_add_loading_attr",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 2117,
            "doc": {
                "summary": "Filters the `loading` attribute value to add to an iframe. Default `lazy`.",
                "description": "<p>Returning <code>false<\/code> or an empty string will not add the attribute.<br>Returning <code>true<\/code> will add the default value.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The <code>loading<\/code> attribute value. Returning a falsey value will result in the attribute being omitted for the iframe.",
                        "types": [
                            "string",
                            "bool"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The HTML <code>iframe<\/code> tag to be filtered.",
                        "types": [
                            "string"
                        ],
                        "variable": "iframe"
                    },
                    {
                        "name": "param",
                        "content": "Additional context about how the function was called or where the iframe tag is.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "img_caption_shortcode",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 2230,
            "doc": {
                "summary": "Filters the default caption shortcode output.",
                "description": "<p>If the filtered output isn't empty, it will be used instead of generating the default caption template.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\img_caption_shortcode()"
                    },
                    {
                        "name": "param",
                        "content": "The caption output. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Attributes of the caption shortcode.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "The image element, possibly wrapped in a hyperlink.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "img_caption_shortcode_width",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 2296,
            "doc": {
                "summary": "Filters the width of an image's caption.",
                "description": "<p>By default, the caption is 10 pixels greater than the width of the image, to prevent post content from running up against a floated image.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\img_caption_shortcode()"
                    },
                    {
                        "name": "param",
                        "content": "Width of the caption in pixels. To remove this inline style, return zero.",
                        "types": [
                            "int"
                        ],
                        "variable": "width"
                    },
                    {
                        "name": "param",
                        "content": "Attributes of the caption shortcode.",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    },
                    {
                        "name": "param",
                        "content": "The image element, possibly wrapped in a hyperlink.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "post_gallery",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 2418,
            "doc": {
                "summary": "Filters the default gallery shortcode output.",
                "description": "<p>If the filtered output isn't empty, it will be used instead of generating the default gallery template.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.2.0",
                        "description": "The <code>$instance<\/code> parameter was added."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\gallery_shortcode()"
                    },
                    {
                        "name": "param",
                        "content": "The gallery output. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Attributes of the gallery shortcode.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "Unique numeric ID of this gallery shortcode instance.",
                        "types": [
                            "int"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "use_default_gallery_style",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 2538,
            "doc": {
                "summary": "Filters whether to print default gallery styles.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to print default gallery styles.<br>Defaults to false if the theme supports HTML5 galleries.<br>Otherwise, defaults to true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "print"
                    }
                ]
            }
        },
        {
            "name": "gallery_style",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 2573,
            "doc": {
                "summary": "Filters the default gallery shortcode CSS styles.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Default CSS styles and opening HTML div container for the gallery shortcode output.",
                        "types": [
                            "string"
                        ],
                        "variable": "gallery_style"
                    }
                ]
            }
        },
        {
            "name": "post_playlist",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 2763,
            "doc": {
                "summary": "Filters the playlist output.",
                "description": "<p>Returning a non-empty value from the filter will short-circuit generation of the default playlist output, returning the passed value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.2.0",
                        "description": "The <code>$instance<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Playlist output. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "An array of shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "Unique numeric ID of this playlist shortcode instance.",
                        "types": [
                            "int"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "wp_playlist_scripts",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/media.php",
            "line": 2923,
            "doc": {
                "summary": "Prints and enqueues playlist scripts, styles, and JavaScript templates.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Type of playlist. Possible values are 'audio' or 'video'.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "The 'theme' for the playlist. Core provides 'light' and 'dark'.",
                        "types": [
                            "string"
                        ],
                        "variable": "style"
                    }
                ]
            }
        },
        {
            "name": "wp_mediaelement_fallback",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/media.php",
            "line": 2972,
            "doc": {
                "summary": "Filters the Mediaelement fallback output for no-JS.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Fallback output for no-JS.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Media file URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "wp_audio_extensions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 2991,
            "doc": {
                "summary": "Filters the list of supported audio formats.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of supported audio formats. Defaults are 'mp3', 'ogg', 'flac', 'm4a', 'wav'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "extensions"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_id3_keys",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 3027,
            "doc": {
                "summary": "Filters the editable list of keys to look up data from an attachment's metadata.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Key\/value pairs of field keys to labels.",
                        "types": [
                            "array"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "Attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "attachment"
                    },
                    {
                        "name": "param",
                        "content": "The context. Accepts 'edit', 'display'. Default 'display'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "wp_audio_shortcode_override",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 3068,
            "doc": {
                "summary": "Filters the default audio shortcode output.",
                "description": "<p>If the filtered output isn't empty, it will be used instead of generating the default audio template.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Empty variable to be replaced with shortcode markup.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Attributes of the shortcode. @see wp_audio_shortcode()",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "Shortcode content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Unique numeric ID of this audio shortcode instance.",
                        "types": [
                            "int"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "wp_audio_shortcode_library",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 3137,
            "doc": {
                "summary": "Filters the media library used for the audio shortcode.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Media library used for the audio shortcode.",
                        "types": [
                            "string"
                        ],
                        "variable": "library"
                    }
                ]
            }
        },
        {
            "name": "wp_audio_shortcode_class",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/media.php",
            "line": 3153,
            "doc": {
                "summary": "Filters the class attribute for the audio shortcode output container.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>$atts<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "CSS class or list of space-separated classes.",
                        "types": [
                            "string"
                        ],
                        "variable": "class"
                    },
                    {
                        "name": "param",
                        "content": "Array of audio shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    }
                ]
            }
        },
        {
            "name": "wp_audio_shortcode",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/media.php",
            "line": 3217,
            "doc": {
                "summary": "Filters the audio shortcode output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Audio shortcode HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Array of audio shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    },
                    {
                        "name": "param",
                        "content": "Audio file.",
                        "types": [
                            "string"
                        ],
                        "variable": "audio"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Media library used for the audio shortcode.",
                        "types": [
                            "string"
                        ],
                        "variable": "library"
                    }
                ]
            }
        },
        {
            "name": "wp_video_extensions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 3237,
            "doc": {
                "summary": "Filters the list of supported video formats.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of supported video formats. Defaults are 'mp4', 'm4v', 'webm', 'ogv', 'flv'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "extensions"
                    }
                ]
            }
        },
        {
            "name": "wp_video_shortcode_override",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 3290,
            "doc": {
                "summary": "Filters the default video shortcode output.",
                "description": "<p>If the filtered output isn't empty, it will be used instead of generating the default video template.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_video_shortcode()"
                    },
                    {
                        "name": "param",
                        "content": "Empty variable to be replaced with shortcode markup.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Attributes of the shortcode. @see wp_video_shortcode()",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "Video shortcode content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Unique numeric ID of this video shortcode instance.",
                        "types": [
                            "int"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "wp_video_shortcode_library",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 3388,
            "doc": {
                "summary": "Filters the media library used for the video shortcode.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Media library used for the video shortcode.",
                        "types": [
                            "string"
                        ],
                        "variable": "library"
                    }
                ]
            }
        },
        {
            "name": "wp_video_shortcode_class",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/media.php",
            "line": 3422,
            "doc": {
                "summary": "Filters the class attribute for the video shortcode output container.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>$atts<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "CSS class or list of space-separated classes.",
                        "types": [
                            "string"
                        ],
                        "variable": "class"
                    },
                    {
                        "name": "param",
                        "content": "Array of video shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    }
                ]
            }
        },
        {
            "name": "wp_video_shortcode",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/media.php",
            "line": 3505,
            "doc": {
                "summary": "Filters the output of the video shortcode.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Video shortcode HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Array of video shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    },
                    {
                        "name": "param",
                        "content": "Video file.",
                        "types": [
                            "string"
                        ],
                        "variable": "video"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Media library used for the video shortcode.",
                        "types": [
                            "string"
                        ],
                        "variable": "library"
                    }
                ]
            }
        },
        {
            "name": "{$adjacent}_image_link",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/media.php",
            "line": 3635,
            "doc": {
                "summary": "Filters the adjacent image link.",
                "description": "<p>The dynamic portion of the hook name, <code>$adjacent<\/code>, refers to the type of adjacency, either 'next', or 'previous'.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>next_image_link<\/code><\/li> <li><code>previous_image_link<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Adjacent image HTML markup.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "Link text.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    }
                ]
            }
        },
        {
            "name": "upload_size_limit",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 3842,
            "doc": {
                "summary": "Filters the maximum upload size allowed in php.ini.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Max upload size limit in bytes.",
                        "types": [
                            "int"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "Maximum upload filesize in bytes.",
                        "types": [
                            "int"
                        ],
                        "variable": "u_bytes"
                    },
                    {
                        "name": "param",
                        "content": "Maximum size of POST data in bytes.",
                        "types": [
                            "int"
                        ],
                        "variable": "p_bytes"
                    }
                ]
            }
        },
        {
            "name": "wp_image_editors",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 3930,
            "doc": {
                "summary": "Filters the list of image editing library classes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of available image editor class names. Defaults are 'WP_Image_Editor_Imagick', 'WP_Image_Editor_GD'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "image_editors"
                    }
                ]
            }
        },
        {
            "name": "plupload_default_settings",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 4030,
            "doc": {
                "summary": "Filters the Plupload default settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Default Plupload settings array.",
                        "types": [
                            "array"
                        ],
                        "variable": "defaults"
                    }
                ]
            }
        },
        {
            "name": "plupload_default_params",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 4043,
            "doc": {
                "summary": "Filters the Plupload default parameters.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Default Plupload parameters array.",
                        "types": [
                            "array"
                        ],
                        "variable": "params"
                    }
                ]
            }
        },
        {
            "name": "wp_prepare_attachment_for_js",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 4353,
            "doc": {
                "summary": "Filters the attachment data prepared for JavaScript.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of prepared attachment data. @see wp_prepare_attachment_for_js().",
                        "types": [
                            "array"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "attachment"
                    },
                    {
                        "name": "param",
                        "content": "Array of attachment meta data, or false if there is none.",
                        "types": [
                            "array",
                            "false"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "media_library_show_audio_playlist",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 4434,
            "doc": {
                "summary": "Allows showing or hiding the \"Create Audio Playlist\" button in the media library.",
                "description": "<p>By default, the &quot;Create Audio Playlist&quot; button will always be shown in the media library.  If this filter returns <code>null<\/code>, a query will be run to determine whether the media library contains any audio items.  This was the default behavior prior to version 4.8.0, but this query is expensive for large media libraries.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.4"
                    },
                    {
                        "name": "since",
                        "content": "4.8.0",
                        "description": "The filter's default value is <code>true<\/code> rather than <code>null<\/code>."
                    },
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/core.trac.wordpress.org\/ticket\/31071"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the button, or <code>null<\/code> to decide based on whether any audio files exist in the media library.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "media_library_show_video_playlist",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 4464,
            "doc": {
                "summary": "Allows showing or hiding the \"Create Video Playlist\" button in the media library.",
                "description": "<p>By default, the &quot;Create Video Playlist&quot; button will always be shown in the media library.  If this filter returns <code>null<\/code>, a query will be run to determine whether the media library contains any video items.  This was the default behavior prior to version 4.8.0, but this query is expensive for large media libraries.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.4"
                    },
                    {
                        "name": "since",
                        "content": "4.8.0",
                        "description": "The filter's default value is <code>true<\/code> rather than <code>null<\/code>."
                    },
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/core.trac.wordpress.org\/ticket\/31071"
                    },
                    {
                        "name": "param",
                        "content": "Whether to show the button, or <code>null<\/code> to decide based on whether any video files exist in the media library.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "show"
                    }
                ]
            }
        },
        {
            "name": "media_library_months_with_files",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 4492,
            "doc": {
                "summary": "Allows overriding the list of months displayed in the media library.",
                "description": "<p>By default (if this filter does not return an array), a query will be run to determine the months that have media items.  This query can be expensive for large media libraries, so it may be desirable for sites to override this behavior.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.4"
                    },
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/core.trac.wordpress.org\/ticket\/31071"
                    },
                    {
                        "name": "param",
                        "content": "An array of objects with <code>month<\/code> and <code>year<\/code> properties, or <code>null<\/code> for default behavior.",
                        "types": [
                            "\\stdClass[]",
                            "null"
                        ],
                        "variable": "months"
                    }
                ]
            }
        },
        {
            "name": "media_library_infinite_scrolling",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 4522,
            "doc": {
                "summary": "Filters whether the Media Library grid has infinite scrolling. Default `false`.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the Media Library grid has infinite scrolling.",
                        "types": [
                            "bool"
                        ],
                        "variable": "infinite"
                    }
                ]
            }
        },
        {
            "name": "media_view_settings",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/media.php",
            "line": 4722,
            "doc": {
                "summary": "Filters the media view settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "List of media view settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "settings"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "media_view_strings",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/media.php",
            "line": 4732,
            "doc": {
                "summary": "Filters the media view strings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of media view strings keyed by the name they'll be referenced by in JavaScript.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "strings"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_enqueue_media",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/media.php",
            "line": 4760,
            "doc": {
                "summary": "Fires at the conclusion of wp_enqueue_media().",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ]
            }
        },
        {
            "name": "get_attached_media_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 4797,
            "doc": {
                "summary": "Filters arguments used to retrieve media attached to the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Mime type of the desired media.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_attached_media",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 4810,
            "doc": {
                "summary": "Filters the list of media attached to the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of media attached to the given post.",
                        "types": [
                            "\\WP_Post[]"
                        ],
                        "variable": "children"
                    },
                    {
                        "name": "param",
                        "content": "Mime type of the media desired.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "media_embedded_in_content_allowed_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 4833,
            "doc": {
                "summary": "Filters the embedded media types that are allowed to be returned from the content blob.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of allowed media types. Default media types are 'audio', 'video', 'object', 'embed', and 'iframe'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allowed_media_types"
                    }
                ]
            }
        },
        {
            "name": "get_post_galleries",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/media.php",
            "line": 5013,
            "doc": {
                "summary": "Filters the list of all found galleries in the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of all found post galleries.",
                        "types": [
                            "array"
                        ],
                        "variable": "galleries"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "get_post_gallery",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/media.php",
            "line": 5038,
            "doc": {
                "summary": "Filters the first-found post gallery.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The first-found post gallery.",
                        "types": [
                            "array"
                        ],
                        "variable": "gallery"
                    },
                    {
                        "name": "param",
                        "content": "Post ID or object.",
                        "types": [
                            "int",
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of all found post galleries.",
                        "types": [
                            "array"
                        ],
                        "variable": "galleries"
                    }
                ]
            }
        },
        {
            "name": "attachment_url_to_postid",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/media.php",
            "line": 5158,
            "doc": {
                "summary": "Filters an attachment ID found by URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The post_id (if any) found by the function.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The URL being looked up.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "wp_omit_loading_attr_threshold",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/media.php",
            "line": 5512,
            "doc": {
                "summary": "Filters the threshold for how many of the first content media elements to not lazy-load.",
                "description": "<p>For these first content media elements, the <code>loading<\/code> attribute will be omitted. By default, this is the case for only the very first content media element.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The number of media elements where the <code>loading<\/code> attribute will not be added. Default 1.",
                        "types": [
                            "int"
                        ],
                        "variable": "omit_threshold"
                    }
                ]
            }
        },
        {
            "name": "add_{$meta_type}_metadata",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/meta.php",
            "line": 78,
            "doc": {
                "summary": "Short-circuits adding metadata of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<br>Returning a non-null value will effectively short-circuit the function.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>add_post_metadata<\/code><\/li> <li><code>add_comment_metadata<\/code><\/li> <li><code>add_term_metadata<\/code><\/li> <li><code>add_user_metadata<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow adding metadata for the given type.",
                        "types": [
                            "null",
                            "bool"
                        ],
                        "variable": "check"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value. Must be serializable if non-scalar.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "meta_value"
                    },
                    {
                        "name": "param",
                        "content": "Whether the specified meta key should be unique for the object.",
                        "types": [
                            "bool"
                        ],
                        "variable": "unique"
                    }
                ]
            }
        },
        {
            "name": "add_{$meta_type}_meta",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/meta.php",
            "line": 115,
            "doc": {
                "summary": "Fires immediately before meta of a specific type is added.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>add_post_meta<\/code><\/li> <li><code>add_comment_meta<\/code><\/li> <li><code>add_term_meta<\/code><\/li> <li><code>add_user_meta<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "_meta_value"
                    }
                ]
            }
        },
        {
            "name": "added_{$meta_type}_meta",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 154,
            "doc": {
                "summary": "Fires immediately after meta of a specific type is added.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>added_post_meta<\/code><\/li> <li><code>added_comment_meta<\/code><\/li> <li><code>added_term_meta<\/code><\/li> <li><code>added_user_meta<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The meta ID after successful update.",
                        "types": [
                            "int"
                        ],
                        "variable": "mid"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "_meta_value"
                    }
                ]
            }
        },
        {
            "name": "update_{$meta_type}_metadata",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/meta.php",
            "line": 233,
            "doc": {
                "summary": "Short-circuits updating metadata of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<br>Returning a non-null value will effectively short-circuit the function.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>update_post_metadata<\/code><\/li> <li><code>update_comment_metadata<\/code><\/li> <li><code>update_term_metadata<\/code><\/li> <li><code>update_user_metadata<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow updating metadata for the given type.",
                        "types": [
                            "null",
                            "bool"
                        ],
                        "variable": "check"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value. Must be serializable if non-scalar.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "meta_value"
                    },
                    {
                        "name": "param",
                        "content": "Optional. Previous value to check before updating.<br>If specified, only update existing metadata entries with this value. Otherwise, update all entries.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "prev_value"
                    }
                ]
            }
        },
        {
            "name": "update_{$meta_type}_meta",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 288,
            "doc": {
                "summary": "Fires immediately before updating metadata of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>update_post_meta<\/code><\/li> <li><code>update_comment_meta<\/code><\/li> <li><code>update_term_meta<\/code><\/li> <li><code>update_user_meta<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the metadata entry to update.",
                        "types": [
                            "int"
                        ],
                        "variable": "meta_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "_meta_value"
                    }
                ]
            }
        },
        {
            "name": "update_postmeta",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 302,
            "doc": {
                "summary": "Fires immediately before updating a post's metadata.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of metadata entry to update.",
                        "types": [
                            "int"
                        ],
                        "variable": "meta_id"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value. This will be a PHP-serialized string representation of the value if the value is an array, an object, or itself a PHP-serialized string.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "meta_value"
                    }
                ]
            }
        },
        {
            "name": "updated_{$meta_type}_meta",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 334,
            "doc": {
                "summary": "Fires immediately after updating metadata of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>updated_post_meta<\/code><\/li> <li><code>updated_comment_meta<\/code><\/li> <li><code>updated_term_meta<\/code><\/li> <li><code>updated_user_meta<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of updated metadata entry.",
                        "types": [
                            "int"
                        ],
                        "variable": "meta_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "_meta_value"
                    }
                ]
            }
        },
        {
            "name": "updated_postmeta",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 348,
            "doc": {
                "summary": "Fires immediately after updating a post's metadata.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of updated metadata entry.",
                        "types": [
                            "int"
                        ],
                        "variable": "meta_id"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value. This will be a PHP-serialized string representation of the value if the value is an array, an object, or itself a PHP-serialized string.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "meta_value"
                    }
                ]
            }
        },
        {
            "name": "delete_{$meta_type}_metadata",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/meta.php",
            "line": 426,
            "doc": {
                "summary": "Short-circuits deleting metadata of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<br>Returning a non-null value will effectively short-circuit the function.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>delete_post_metadata<\/code><\/li> <li><code>delete_comment_metadata<\/code><\/li> <li><code>delete_term_metadata<\/code><\/li> <li><code>delete_user_metadata<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow metadata deletion of the given type.",
                        "types": [
                            "null",
                            "bool"
                        ],
                        "variable": "delete"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value. Must be serializable if non-scalar.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "meta_value"
                    },
                    {
                        "name": "param",
                        "content": "Whether to delete the matching metadata entries for all objects, ignoring the specified $object_id.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "delete_all"
                    }
                ]
            }
        },
        {
            "name": "delete_{$meta_type}_meta",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 477,
            "doc": {
                "summary": "Fires immediately before deleting metadata of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>delete_post_meta<\/code><\/li> <li><code>delete_comment_meta<\/code><\/li> <li><code>delete_term_meta<\/code><\/li> <li><code>delete_user_meta<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of metadata entry IDs to delete.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "meta_ids"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "_meta_value"
                    }
                ]
            }
        },
        {
            "name": "delete_postmeta",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/meta.php",
            "line": 488,
            "doc": {
                "summary": "Fires immediately before deleting metadata for a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of metadata entry IDs to delete.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "meta_ids"
                    }
                ]
            }
        },
        {
            "name": "deleted_{$meta_type}_meta",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 526,
            "doc": {
                "summary": "Fires immediately after deleting metadata of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>deleted_post_meta<\/code><\/li> <li><code>deleted_comment_meta<\/code><\/li> <li><code>deleted_term_meta<\/code><\/li> <li><code>deleted_user_meta<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of metadata entry IDs to delete.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "meta_ids"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "_meta_value"
                    }
                ]
            }
        },
        {
            "name": "deleted_postmeta",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/meta.php",
            "line": 537,
            "doc": {
                "summary": "Fires immediately after deleting metadata for a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of metadata entry IDs to delete.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "meta_ids"
                    }
                ]
            }
        },
        {
            "name": "get_{$meta_type}_metadata",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/meta.php",
            "line": 633,
            "doc": {
                "summary": "Short-circuits the return value of a meta field.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<br>Returning a non-null value will effectively short-circuit the function.<\/p> <p>Possible filter names include:<\/p> <ul> <li><code>get_post_metadata<\/code><\/li> <li><code>get_comment_metadata<\/code><\/li> <li><code>get_term_metadata<\/code><\/li> <li><code>get_user_metadata<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$meta_type<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The value to return, either a single metadata value or an array of values depending on the value of <code>$single<\/code>. Default null.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return only the first value of the specified <code>$meta_key<\/code>.",
                        "types": [
                            "bool"
                        ],
                        "variable": "single"
                    },
                    {
                        "name": "param",
                        "content": "Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user', or any other object type with an associated meta table.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_type"
                    }
                ]
            }
        },
        {
            "name": "default_{$meta_type}_metadata",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/meta.php",
            "line": 715,
            "doc": {
                "summary": "Filters the default metadata value for a specified meta key and object.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<\/p> <p>Possible filter names include:<\/p> <ul> <li><code>default_post_metadata<\/code><\/li> <li><code>default_comment_metadata<\/code><\/li> <li><code>default_term_metadata<\/code><\/li> <li><code>default_user_metadata<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The value to return, either a single metadata value or an array of values depending on the value of <code>$single<\/code>.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return only the first value of the specified <code>$meta_key<\/code>.",
                        "types": [
                            "bool"
                        ],
                        "variable": "single"
                    },
                    {
                        "name": "param",
                        "content": "Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user', or any other object type with an associated meta table.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_type"
                    }
                ]
            }
        },
        {
            "name": "get_{$meta_type}_metadata_by_mid",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/meta.php",
            "line": 824,
            "doc": {
                "summary": "Short-circuits the return value when fetching a meta field by meta ID.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<br>Returning a non-null value will effectively short-circuit the function.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>get_post_metadata_by_mid<\/code><\/li> <li><code>get_comment_metadata_by_mid<\/code><\/li> <li><code>get_term_metadata_by_mid<\/code><\/li> <li><code>get_user_metadata_by_mid<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The value to return.",
                        "types": [
                            "\\stdClass",
                            "null"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Meta ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "meta_id"
                    }
                ]
            }
        },
        {
            "name": "update_{$meta_type}_metadata_by_mid",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 900,
            "doc": {
                "summary": "Short-circuits updating metadata of a specific type by meta ID.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<br>Returning a non-null value will effectively short-circuit the function.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>update_post_metadata_by_mid<\/code><\/li> <li><code>update_comment_metadata_by_mid<\/code><\/li> <li><code>update_term_metadata_by_mid<\/code><\/li> <li><code>update_user_metadata_by_mid<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow updating metadata for the given type.",
                        "types": [
                            "null",
                            "bool"
                        ],
                        "variable": "check"
                    },
                    {
                        "name": "param",
                        "content": "Meta ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "meta_id"
                    },
                    {
                        "name": "param",
                        "content": "Meta value. Must be serializable if non-scalar.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "meta_value"
                    },
                    {
                        "name": "param",
                        "content": "Meta key, if provided.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "meta_key"
                    }
                ]
            }
        },
        {
            "name": "delete_{$meta_type}_metadata_by_mid",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/meta.php",
            "line": 1021,
            "doc": {
                "summary": "Short-circuits deleting metadata of a specific type by meta ID.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<br>Returning a non-null value will effectively short-circuit the function.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>delete_post_metadata_by_mid<\/code><\/li> <li><code>delete_comment_metadata_by_mid<\/code><\/li> <li><code>delete_term_metadata_by_mid<\/code><\/li> <li><code>delete_user_metadata_by_mid<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow metadata deletion of the given type.",
                        "types": [
                            "null",
                            "bool"
                        ],
                        "variable": "delete"
                    },
                    {
                        "name": "param",
                        "content": "Meta ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "meta_id"
                    }
                ]
            }
        },
        {
            "name": "delete_{$meta_type}meta",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/meta.php",
            "line": 1053,
            "doc": {
                "summary": "Fires immediately before deleting post or comment metadata of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post or comment).<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>delete_postmeta<\/code><\/li> <li><code>delete_commentmeta<\/code><\/li> <li><code>delete_termmeta<\/code><\/li> <li><code>delete_usermeta<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the metadata entry to delete.",
                        "types": [
                            "int"
                        ],
                        "variable": "meta_id"
                    }
                ]
            }
        },
        {
            "name": "deleted_{$meta_type}meta",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/meta.php",
            "line": 1084,
            "doc": {
                "summary": "Fires immediately after deleting post or comment metadata of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post or comment).<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>deleted_postmeta<\/code><\/li> <li><code>deleted_commentmeta<\/code><\/li> <li><code>deleted_termmeta<\/code><\/li> <li><code>deleted_usermeta<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted metadata entry ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "meta_id"
                    }
                ]
            }
        },
        {
            "name": "update_{$meta_type}_metadata_cache",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/meta.php",
            "line": 1147,
            "doc": {
                "summary": "Short-circuits updating the metadata cache of a specific type.",
                "description": "<p>The dynamic portion of the hook name, <code>$meta_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<br>Returning a non-null value will effectively short-circuit the function.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>update_post_metadata_cache<\/code><\/li> <li><code>update_comment_metadata_cache<\/code><\/li> <li><code>update_term_metadata_cache<\/code><\/li> <li><code>update_user_metadata_cache<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow updating the meta cache of the given type.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "check"
                    },
                    {
                        "name": "param",
                        "content": "Array of object IDs to update the meta cache for.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "object_ids"
                    }
                ]
            }
        },
        {
            "name": "is_protected_meta",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/meta.php",
            "line": 1295,
            "doc": {
                "summary": "Filters whether a meta key is considered protected.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the key is considered protected.",
                        "types": [
                            "bool"
                        ],
                        "variable": "protected"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user', or any other object type with an associated meta table.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_type"
                    }
                ]
            }
        },
        {
            "name": "sanitize_{$object_type}_meta_{$meta_key}_for_{$object_subtype}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 1329,
            "doc": {
                "summary": "Filters the sanitization of a specific meta key of a specific meta type and subtype.",
                "description": "<p>The dynamic portions of the hook name, <code>$object_type<\/code>, <code>$meta_key<\/code>, and <code>$object_subtype<\/code>, refer to the metadata object type (comment, post, term, or user), the meta key value, and the object subtype respectively.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.8"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value to sanitize.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "meta_value"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user', or any other object type with an associated meta table.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    },
                    {
                        "name": "param",
                        "content": "Object subtype.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_subtype"
                    }
                ]
            }
        },
        {
            "name": "sanitize_{$object_type}_meta_{$meta_key}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/meta.php",
            "line": 1346,
            "doc": {
                "summary": "Filters the sanitization of a specific meta key of a specific meta type.",
                "description": "<p>The dynamic portions of the hook name, <code>$meta_type<\/code>, and <code>$meta_key<\/code>, refer to the metadata object type (comment, post, term, or user) and the meta key value, respectively.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value to sanitize.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "meta_value"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user', or any other object type with an associated meta table.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    }
                ]
            }
        },
        {
            "name": "register_meta_args",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/meta.php",
            "line": 1445,
            "doc": {
                "summary": "Filters the registration arguments when registering meta.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of meta registration arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Array of default arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "defaults"
                    },
                    {
                        "name": "param",
                        "content": "Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user', or any other object type with an associated meta table.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    },
                    {
                        "name": "param",
                        "content": "Meta key.",
                        "types": [
                            "string"
                        ],
                        "variable": "meta_key"
                    }
                ]
            }
        },
        {
            "name": "get_object_subtype_{$object_type}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/meta.php",
            "line": 1800,
            "doc": {
                "summary": "Filters the object subtype identifier for a non-standard object type.",
                "description": "<p>The dynamic portion of the hook name, <code>$object_type<\/code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>get_object_subtype_post<\/code><\/li> <li><code>get_object_subtype_comment<\/code><\/li> <li><code>get_object_subtype_term<\/code><\/li> <li><code>get_object_subtype_user<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.8"
                    },
                    {
                        "name": "param",
                        "content": "Empty string to override.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_subtype"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object to get the subtype for.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    }
                ]
            }
        },
        {
            "name": "wpmu_blog_updated",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-blogs.php",
            "line": 30,
            "doc": {
                "summary": "Fires after the blog details are updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "blog_details",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-blogs.php",
            "line": 265,
            "doc": {
                "summary": "Filters a blog's details.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "deprecated",
                        "content": "4.7.0",
                        "description": "Use {@see 'site_details'} instead."
                    },
                    {
                        "name": "param",
                        "content": "The blog details.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "details"
                    }
                ]
            }
        },
        {
            "name": "blog_option_{$option}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-blogs.php",
            "line": 381,
            "doc": {
                "summary": "Filters a blog option value.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the blog option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The option value.",
                        "types": [
                            "string"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "switch_blog",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-blogs.php",
            "line": 527,
            "doc": {
                "summary": "Fires when the blog is switched.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "The <code>$context<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "New blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "new_blog_id"
                    },
                    {
                        "name": "param",
                        "content": "Previous blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "prev_blog_id"
                    },
                    {
                        "name": "param",
                        "content": "Additional context. Accepts 'switch' when called from switch_to_blog() or 'restore' when called from restore_current_blog().",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "can_add_user_to_blog",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 173,
            "doc": {
                "summary": "Filters whether a user should be added to a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "True if the user should be added to the site, error object otherwise.",
                        "types": [
                            "true",
                            "\\WP_Error"
                        ],
                        "variable": "retval"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "User role.",
                        "types": [
                            "string"
                        ],
                        "variable": "role"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "add_user_to_blog",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 202,
            "doc": {
                "summary": "Fires immediately after a user is added to a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "User role.",
                        "types": [
                            "string"
                        ],
                        "variable": "role"
                    },
                    {
                        "name": "param",
                        "content": "Blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "remove_user_from_blog",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 246,
            "doc": {
                "summary": "Fires before a user is removed from a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "Added the <code>$reassign<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the user being removed.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the blog the user is being removed from.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user to whom to reassign posts.",
                        "types": [
                            "int"
                        ],
                        "variable": "reassign"
                    }
                ]
            }
        },
        {
            "name": "is_email_address_unsafe",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 424,
            "doc": {
                "summary": "Filters whether an email address is unsafe.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the email address is &quot;unsafe&quot;. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_email_address_unsafe"
                    },
                    {
                        "name": "param",
                        "content": "User email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    }
                ]
            }
        },
        {
            "name": "wpmu_validate_user_signup",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 584,
            "doc": {
                "summary": "Filters the validated user registration details.",
                "description": "<p>This does not allow you to override the username or email of the user during registration. The values are solely used for validation and error handling.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "{     The array of user name, email, and the error messages.<br>    @type string   $user_name     Sanitized and unique username.<br>    @type string   $orig_username Original username.<br>    @type string   $user_email    User email address.<br>    @type WP_Error $errors        WP_Error object containing any errors found.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "minimum_site_name_length",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 663,
            "doc": {
                "summary": "Filters the minimum site name length required when validating a site signup.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The minimum site name length. Default 4.",
                        "types": [
                            "int"
                        ],
                        "variable": "length"
                    }
                ]
            }
        },
        {
            "name": "newblogname",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 690,
            "doc": {
                "summary": "Filters the new site name during registration.",
                "description": "<p>The name is the site's subdomain or the site's subdirectory path depending on the network settings.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site name.",
                        "types": [
                            "string"
                        ],
                        "variable": "blogname"
                    }
                ]
            }
        },
        {
            "name": "wpmu_validate_blog_signup",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 764,
            "doc": {
                "summary": "Filters site details and error messages following registration.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of domain, path, blog name, blog title, user and error messages.<br>    @type string         $domain     Domain for the site.<br>    @type string         $path       Path for the site. Used in subdirectory installations.<br>    @type string         $blogname   The unique site name (slug).<br>    @type string         $blog_title Blog title.<br>    @type string|WP_User $user       By default, an empty string. A user object if provided.<br>    @type WP_Error       $errors     WP_Error containing any errors found.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "signup_site_meta",
            "type": "filter",
            "numArgs": 7,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 801,
            "doc": {
                "summary": "Filters the metadata for a site signup.",
                "description": "<p>The metadata will be serialized prior to storing it in the database.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    },
                    {
                        "name": "param",
                        "content": "The requested domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "The requested path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The requested site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "The user's requested login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The user's email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "The user's activation key.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    }
                ]
            }
        },
        {
            "name": "after_signup_site",
            "type": "action",
            "numArgs": 7,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 830,
            "doc": {
                "summary": "Fires after site signup information has been written to the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The requested domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "The requested path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The requested site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "The user's requested login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The user's email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "The user's activation key.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "signup_user_meta",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 867,
            "doc": {
                "summary": "Filters the metadata for a user signup.",
                "description": "<p>The metadata will be serialized prior to storing it in the database.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    },
                    {
                        "name": "param",
                        "content": "The user's requested login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The user's email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "The user's activation key.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    }
                ]
            }
        },
        {
            "name": "after_signup_user",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 893,
            "doc": {
                "summary": "Fires after a user's signup information has been written to the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The user's requested login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The user's email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "The user's activation key.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wpmu_signup_blog_notification",
            "type": "filter",
            "numArgs": 7,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 935,
            "doc": {
                "summary": "Filters whether to bypass the new site email notification.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site domain, or false to prevent the email from sending.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "Site path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "User login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "User email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "Activation key created in wpmu_signup_blog().",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wpmu_signup_blog_notification_email",
            "type": "filter",
            "numArgs": 8,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 977,
            "endLine": 988,
            "doc": {
                "summary": "Filters the message content of the new blog notification email.",
                "description": "<p>Content should be formatted for transmission via wp_mail().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Content of the notification email.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Site domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "Site path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "User login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "User email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "Activation key created in wpmu_signup_blog().",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wpmu_signup_blog_notification_subject",
            "type": "filter",
            "numArgs": 8,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1009,
            "endLine": 1020,
            "doc": {
                "summary": "Filters the subject of the new blog notification email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Subject of the notification email.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "Site domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "Site path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "User login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "User email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "Activation key created in wpmu_signup_blog().",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wpmu_signup_user_notification",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1067,
            "doc": {
                "summary": "Filters whether to bypass the email notification for new user sign-up.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "User email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "Activation key created in wpmu_signup_user().",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wpmu_signup_user_notification_email",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1097,
            "endLine": 1105,
            "doc": {
                "summary": "Filters the content of the notification email for new user sign-up.",
                "description": "<p>Content should be formatted for transmission via wp_mail().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Content of the notification email.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "User login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "User email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "Activation key created in wpmu_signup_user().",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wpmu_signup_user_notification_subject",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1121,
            "endLine": 1129,
            "doc": {
                "summary": "Filters the subject of the notification email of new user signup.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Subject of the notification email.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "User login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "User email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "Activation key created in wpmu_signup_user().",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wpmu_activate_user",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1215,
            "doc": {
                "summary": "Fires immediately after a new user is activated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "User password.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wpmu_activate_blog",
            "type": "action",
            "numArgs": 5,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1267,
            "doc": {
                "summary": "Fires immediately after a site is activated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "User password.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    },
                    {
                        "name": "param",
                        "content": "Site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "signup_title"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wpmu_new_user",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1329,
            "doc": {
                "summary": "Fires immediately after a new user is created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "newblog_notify_siteadmin",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1467,
            "doc": {
                "summary": "Filters the message body of the new site activation email sent to the network administrator.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "The <code>$blog_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Email body.",
                        "types": [
                            "string"
                        ],
                        "variable": "msg"
                    },
                    {
                        "name": "param",
                        "content": "The new site's ID as an integer or numeric string.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "newuser_notify_siteadmin",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1523,
            "doc": {
                "summary": "Filters the message body of the new user activation email sent to the network administrator.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Email body.",
                        "types": [
                            "string"
                        ],
                        "variable": "msg"
                    },
                    {
                        "name": "param",
                        "content": "WP_User instance of the new user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "domain_exists",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1574,
            "doc": {
                "summary": "Filters whether a site name is taken.",
                "description": "<p>The name is the site's subdomain or the site's subdirectory path depending on the network settings.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The site ID if the site name exists, null otherwise.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Domain to be checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "Path to be checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Network ID. Only relevant on multi-network installations.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "wpmu_welcome_notification",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1610,
            "doc": {
                "summary": "Filters whether to bypass the welcome email sent to the site administrator after site activation.",
                "description": "<p>Returning false disables the welcome email.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID, or false to prevent the email from sending.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "blog_id"
                    },
                    {
                        "name": "param",
                        "content": "User ID of the site administrator.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "User password, or &quot;N\/A&quot; if the user account is not new.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    },
                    {
                        "name": "param",
                        "content": "Site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "update_welcome_email",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1661,
            "doc": {
                "summary": "Filters the content of the welcome email sent to the site administrator after site activation.",
                "description": "<p>Content should be formatted for transmission via wp_mail().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Message body of the email.",
                        "types": [
                            "string"
                        ],
                        "variable": "welcome_email"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    },
                    {
                        "name": "param",
                        "content": "User ID of the site administrator.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "User password, or &quot;N\/A&quot; if the user account is not new.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    },
                    {
                        "name": "param",
                        "content": "Site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "update_welcome_subject",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1687,
            "doc": {
                "summary": "Filters the subject of the welcome email sent to the site administrator after site activation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Subject of the email.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    }
                ]
            }
        },
        {
            "name": "send_new_site_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1731,
            "doc": {
                "summary": "Filters whether to send an email to the Multisite network administrator when a new site is created.",
                "description": "<p>Return false to disable sending the email.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the email.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "Site object of the new site.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "site"
                    },
                    {
                        "name": "param",
                        "content": "User object of the administrator of the new site.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "new_site_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1796,
            "doc": {
                "summary": "Filters the content of the email sent to the Multisite network administrator when a new site is created.",
                "description": "<p>Content should be formatted for transmission via wp_mail().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The email address of the recipient.<br>    @type string $subject The subject of the email.<br>    @type string $message The content of the email.<br>    @type string $headers Headers.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "new_site_email"
                    },
                    {
                        "name": "param",
                        "content": "Site object of the new site.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "site"
                    },
                    {
                        "name": "param",
                        "content": "User object of the administrator of the new site.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wpmu_welcome_user_notification",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1841,
            "doc": {
                "summary": "Filters whether to bypass the welcome email after user activation.",
                "description": "<p>Returning false disables the welcome email.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "User password.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "update_welcome_user_email",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1863,
            "doc": {
                "summary": "Filters the content of the welcome email after user activation.",
                "description": "<p>Content should be formatted for transmission via wp_mail().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The message body of the account activation success email.",
                        "types": [
                            "string"
                        ],
                        "variable": "welcome_email"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "User password.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "update_welcome_user_subject",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 1893,
            "doc": {
                "summary": "Filters the subject of the welcome email after user activation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Subject of the email.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    }
                ]
            }
        },
        {
            "name": "blog_redirect_404",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2144,
            "doc": {
                "summary": "Filters the redirect URL for 404s on the main site.",
                "description": "<p>The filter is only evaluated if the NOBLOGREDIRECT constant is defined.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The redirect URL defined in NOBLOGREDIRECT.",
                        "types": [
                            "string"
                        ],
                        "variable": "no_blog_redirect"
                    }
                ]
            }
        },
        {
            "name": "added_existing_user",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2233,
            "doc": {
                "summary": "Fires immediately after an existing user is added to a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "True on success or a WP_Error object if the user doesn't exist or could not be added.",
                        "types": [
                            "true",
                            "\\WP_Error"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "enable_live_network_counts",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2451,
            "doc": {
                "summary": "Filters whether to update network site or user counts when a new site is created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_is_large_network()"
                    },
                    {
                        "name": "param",
                        "content": "Whether the network is considered small.",
                        "types": [
                            "bool"
                        ],
                        "variable": "small_network"
                    },
                    {
                        "name": "param",
                        "content": "Context. Either 'users' or 'sites'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "pre_get_space_used",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2536,
            "doc": {
                "summary": "Filters the amount of storage space used by the current site, in megabytes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The amount of used space, in megabytes. Default false.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "space_used"
                    }
                ]
            }
        },
        {
            "name": "get_space_allowed",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2571,
            "doc": {
                "summary": "Filters the upload quota for the current site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Upload quota in megabytes for the current blog.",
                        "types": [
                            "int"
                        ],
                        "variable": "space_allowed"
                    }
                ]
            }
        },
        {
            "name": "wp_is_large_network",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2668,
            "doc": {
                "summary": "Filters whether the network is considered large.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.8.0",
                        "description": "The <code>$network_id<\/code> parameter has been added."
                    },
                    {
                        "name": "param",
                        "content": "Whether the network has more than 10000 users or sites.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_large_network"
                    },
                    {
                        "name": "param",
                        "content": "The component to count. Accepts 'users', or 'sites'.",
                        "types": [
                            "string"
                        ],
                        "variable": "component"
                    },
                    {
                        "name": "param",
                        "content": "The count of items for the component.",
                        "types": [
                            "int"
                        ],
                        "variable": "count"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the network being checked.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "subdirectory_reserved_names",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2707,
            "doc": {
                "summary": "Filters reserved site names on a sub-directory Multisite installation.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "'wp-admin', 'wp-content', 'wp-includes', 'wp-json', and 'embed' were added to the reserved names list."
                    },
                    {
                        "name": "param",
                        "content": "Array of reserved names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "subdirectory_reserved_names"
                    }
                ]
            }
        },
        {
            "name": "new_network_admin_email_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2774,
            "doc": {
                "summary": "Filters the text of the email sent when a change of network admin email address is attempted.",
                "description": "<p>The following strings have a special meaning and will get replaced dynamically:<\/p> <h3>USERNAME###  The current user's username.<\/h3> <h3>ADMIN_URL### The link to click on to confirm the email change.<\/h3> <h3>EMAIL###     The proposed new network admin email address.<\/h3> <h3>SITENAME###  The name of the network.<\/h3> <h3>SITEURL###   The URL to the network.<\/h3>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Text in the email.",
                        "types": [
                            "string"
                        ],
                        "variable": "email_text"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the new network admin email address.<br>    @type string $hash     The secure hash used in the confirmation link URL.<br>    @type string $newemail The proposed new network admin email address.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "new_admin_email"
                    }
                ]
            }
        },
        {
            "name": "send_network_admin_email_change_email",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2826,
            "doc": {
                "summary": "Filters whether to send the network admin email change notification email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the email notification.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "The old network admin email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_email"
                    },
                    {
                        "name": "param",
                        "content": "The new network admin email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_email"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "network_admin_email_change_email",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/ms-functions.php",
            "line": 2879,
            "doc": {
                "summary": "Filters the contents of the email notification sent when the network admin email address is changed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The intended recipient.<br>    @type string $subject The subject of the email.<br>    @type string $message The content of the email.<br>        The following strings have a special meaning and will get replaced dynamically:<br>        - ###OLD_EMAIL### The old network admin email address.<br>        - ###NEW_EMAIL### The new network admin email address.<br>        - ###SITENAME###  The name of the network.<br>        - ###SITEURL###   The URL to the site.<br>    @type string $headers Headers.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_change_email"
                    },
                    {
                        "name": "param",
                        "content": "The old network admin email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_email"
                    },
                    {
                        "name": "param",
                        "content": "The new network admin email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_email"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "ms_site_check",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-load.php",
            "line": 83,
            "doc": {
                "summary": "Filters checking the status of the current blog.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to skip the blog status check. Default null.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "check"
                    }
                ]
            }
        },
        {
            "name": "site_by_path_segments_count",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-load.php",
            "line": 177,
            "doc": {
                "summary": "Filters the number of path segments to consider when searching for a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The number of path segments to consider. WordPress by default looks at one path segment following the network path. The function default of null only makes sense when you know the requested path should match a site.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "segments"
                    },
                    {
                        "name": "param",
                        "content": "The requested domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "The requested path, in full.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "pre_get_site_by_path",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/ms-load.php",
            "line": 212,
            "doc": {
                "summary": "Determines a site by its domain and path.",
                "description": "<p>This allows one to short-circuit the default logic, perhaps by replacing it with a routine that is more optimal for your setup.<\/p> <p>Return null to avoid the short-circuit. Return false if no site can be found at the requested domain and path. Otherwise, return a site object.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Site value to return by path. Default null to continue retrieving the site.",
                        "types": [
                            "null",
                            "false",
                            "\\WP_Site"
                        ],
                        "variable": "site"
                    },
                    {
                        "name": "param",
                        "content": "The requested domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "The requested path, in full.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "The suggested number of paths to consult.<br>Default null, meaning the entire path was to be consulted.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "segments"
                    },
                    {
                        "name": "param",
                        "content": "The paths to search for, based on $path and $segments.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "paths"
                    }
                ]
            }
        },
        {
            "name": "ms_network_not_found",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-load.php",
            "line": 355,
            "doc": {
                "summary": "Fires when a network cannot be found based on the requested domain and path.",
                "description": "<p>At the time of this action, the only recourse is to redirect somewhere and exit. If you want to declare a particular network, do so earlier.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The domain used to search for a network.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "The path used to search for a path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "ms_site_not_found",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-load.php",
            "line": 414,
            "doc": {
                "summary": "Fires when a network can be determined but a site cannot.",
                "description": "<p>At the time of this action, the only recourse is to redirect somewhere and exit. If you want to declare a particular site, do so earlier.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The network that had been determined.",
                        "types": [
                            "\\WP_Network"
                        ],
                        "variable": "current_site"
                    },
                    {
                        "name": "param",
                        "content": "The domain used to search for a site.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "The path used to search for a site.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "get_network",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-network.php",
            "line": 48,
            "doc": {
                "summary": "Fires after a network is retrieved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Network data.",
                        "types": [
                            "\\WP_Network"
                        ],
                        "variable": "_network"
                    }
                ]
            }
        },
        {
            "name": "clean_network_cache",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-network.php",
            "line": 96,
            "doc": {
                "summary": "Fires immediately after a network has been removed from the object cache.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Network ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "ms_loaded",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/ms-settings.php",
            "line": 123,
            "doc": {
                "summary": "Fires after the current site and network have been detected and loaded in multisite's bootstrap.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    }
                ]
            }
        },
        {
            "name": "wp_insert_site",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 89,
            "doc": {
                "summary": "Fires once a site has been inserted into the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "New site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "new_site"
                    }
                ]
            }
        },
        {
            "name": "wp_initialize_site",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-site.php",
            "line": 105,
            "doc": {
                "summary": "Fires when a site's initialization routine should be executed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "New site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "new_site"
                    },
                    {
                        "name": "param",
                        "content": "Arguments for the initialization.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wpmu_new_blog",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-site.php",
            "line": 135,
            "endLine": 140,
            "doc": {
                "summary": "Fires immediately after a new site is created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.1.0",
                        "description": "Use {@see 'wp_initialize_site'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Site domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain"
                    },
                    {
                        "name": "param",
                        "content": "Site path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Network ID. Only relevant on multi-network installations.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    },
                    {
                        "name": "param",
                        "content": "Meta data. Used to set initial site options.",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "wp_update_site",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-site.php",
            "line": 195,
            "doc": {
                "summary": "Fires once a site has been updated in the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "New site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "new_site"
                    },
                    {
                        "name": "param",
                        "content": "Old site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "old_site"
                    }
                ]
            }
        },
        {
            "name": "wp_validate_site_deletion",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-site.php",
            "line": 235,
            "doc": {
                "summary": "Fires before a site should be deleted from the database.",
                "description": "<p>Plugins should amend the <code>$errors<\/code> object via its <code>WP_Error::add()<\/code> method. If any errors are present, the site will not be deleted.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Error object to add validation errors to.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    },
                    {
                        "name": "param",
                        "content": "The site object to be deleted.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "old_site"
                    }
                ]
            }
        },
        {
            "name": "delete_blog",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-site.php",
            "line": 250,
            "doc": {
                "summary": "Fires before a site is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    },
                    {
                        "name": "param",
                        "content": "True if site's table should be dropped. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "drop"
                    }
                ]
            }
        },
        {
            "name": "wp_uninitialize_site",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 259,
            "doc": {
                "summary": "Fires when a site's uninitialization routine should be executed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "old_site"
                    }
                ]
            }
        },
        {
            "name": "wp_delete_site",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 281,
            "doc": {
                "summary": "Fires once a site has been deleted from the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "old_site"
                    }
                ]
            }
        },
        {
            "name": "deleted_blog",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-site.php",
            "line": 292,
            "doc": {
                "summary": "Fires after the site is deleted from the network.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    },
                    {
                        "name": "param",
                        "content": "True if site's tables should be dropped. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "drop"
                    }
                ]
            }
        },
        {
            "name": "get_site",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 332,
            "doc": {
                "summary": "Fires after a site is retrieved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Site data.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "_site"
                    }
                ]
            }
        },
        {
            "name": "wp_normalize_site_data",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 460,
            "doc": {
                "summary": "Filters passed site data in order to normalize it.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of site data passed to the respective function.<br>See {@see \\wp_insert_site()} for the possibly included data.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    }
                ]
            }
        },
        {
            "name": "wp_validate_site_data",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-site.php",
            "line": 480,
            "doc": {
                "summary": "Fires when data should be validated for a site prior to inserting or updating in the database.",
                "description": "<p>Plugins should amend the <code>$errors<\/code> object via its <code>WP_Error::add()<\/code> method.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Error object to add validation errors to.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of complete site data. See {@see \\wp_insert_site()} for the included data.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "The old site object if the data belongs to a site being updated, or null if it is a new site being inserted.",
                        "types": [
                            "\\WP_Site",
                            "null"
                        ],
                        "variable": "old_site"
                    }
                ]
            }
        },
        {
            "name": "wp_initialize_site_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-site.php",
            "line": 676,
            "doc": {
                "summary": "Filters the arguments for initializing a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Arguments to modify the initialization behavior.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Site that is being initialized.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "site"
                    },
                    {
                        "name": "param",
                        "content": "Network that the site belongs to.",
                        "types": [
                            "\\WP_Network"
                        ],
                        "variable": "network"
                    }
                ]
            }
        },
        {
            "name": "wpmu_drop_tables",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-site.php",
            "line": 814,
            "doc": {
                "summary": "Filters the tables to drop when the site is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Array of names of the site tables to be dropped.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "tables"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the site to drop tables for.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "wpmu_delete_blog_upload_dir",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-site.php",
            "line": 828,
            "doc": {
                "summary": "Filters the upload base directory to delete when the site is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Uploads path without subdirectory. @see wp_upload_dir()",
                        "types": [
                            "string"
                        ],
                        "variable": "basedir"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_is_site_initialized",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-site.php",
            "line": 908,
            "doc": {
                "summary": "Filters the check for whether a site is initialized before the database is accessed.",
                "description": "<p>Returning a non-null value will effectively short-circuit the function, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The value to return instead. Default null to continue with the check.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "pre"
                    },
                    {
                        "name": "param",
                        "content": "The site ID that is being checked.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "clean_site_cache",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-site.php",
            "line": 989,
            "doc": {
                "summary": "Fires immediately after a site has been removed from the object cache.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "Site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "blog"
                    },
                    {
                        "name": "param",
                        "content": "md5 hash of domain and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "domain_path_key"
                    }
                ]
            }
        },
        {
            "name": "refresh_blog_details",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1001,
            "doc": {
                "summary": "Fires after the blog details cache is cleared.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "4.9.0",
                        "description": "Use {@see 'clean_site_cache'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "blog_id"
                    }
                ]
            }
        },
        {
            "name": "make_spam_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1144,
            "doc": {
                "summary": "Fires when the 'spam' status is added to a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "make_ham_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1154,
            "doc": {
                "summary": "Fires when the 'spam' status is removed from a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "mature_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1168,
            "doc": {
                "summary": "Fires when the 'mature' status is added to a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "unmature_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1178,
            "doc": {
                "summary": "Fires when the 'mature' status is removed from a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "archive_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1192,
            "doc": {
                "summary": "Fires when the 'archived' status is added to a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "unarchive_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1202,
            "doc": {
                "summary": "Fires when the 'archived' status is removed from a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "make_delete_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1216,
            "doc": {
                "summary": "Fires when the 'deleted' status is added to a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "make_undelete_blog",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1226,
            "doc": {
                "summary": "Fires when the 'deleted' status is removed from a site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "update_blog_public",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/ms-site.php",
            "line": 1241,
            "doc": {
                "summary": "Fires after the current blog's 'public' setting is updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether the site is public. A numeric string, for compatibility reasons. Accepts '1' or '0'.",
                        "types": [
                            "string"
                        ],
                        "variable": "is_public"
                    }
                ]
            }
        },
        {
            "name": "wp_nav_menu_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/nav-menu-template.php",
            "line": 97,
            "doc": {
                "summary": "Filters the arguments used to display a navigation menu.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_nav_menu()"
                    },
                    {
                        "name": "param",
                        "content": "Array of wp_nav_menu() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_nav_menu",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu-template.php",
            "line": 113,
            "doc": {
                "summary": "Filters whether to short-circuit the wp_nav_menu() output.",
                "description": "<p>Returning a non-null value from the filter will short-circuit wp_nav_menu(), echoing that value if $args-&gt;echo is true, returning that value otherwise.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_nav_menu()"
                    },
                    {
                        "name": "param",
                        "content": "Nav menu output to short-circuit with. Default null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "An object containing wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_nav_menu_container_allowedtags",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/nav-menu-template.php",
            "line": 184,
            "doc": {
                "summary": "Filters the list of HTML tags that are valid for use as menu containers.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The acceptable HTML tags for use as menu containers.<br>Default is array containing 'div' and 'nav'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "tags"
                    }
                ]
            }
        },
        {
            "name": "wp_nav_menu_objects",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu-template.php",
            "line": 234,
            "doc": {
                "summary": "Filters the sorted list of menu item objects before generating the menu's HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The menu items, sorted by each menu item's menu order.",
                        "types": [
                            "array"
                        ],
                        "variable": "sorted_menu_items"
                    },
                    {
                        "name": "param",
                        "content": "An object containing wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_nav_menu_items",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu-template.php",
            "line": 267,
            "doc": {
                "summary": "Filters the HTML list content for navigation menus.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_nav_menu()"
                    },
                    {
                        "name": "param",
                        "content": "The HTML list content for the menu items.",
                        "types": [
                            "string"
                        ],
                        "variable": "items"
                    },
                    {
                        "name": "param",
                        "content": "An object containing wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_nav_menu_{$menu->slug}_items",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu-template.php",
            "line": 278,
            "doc": {
                "summary": "Filters the HTML list content for a specific navigation menu.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_nav_menu()"
                    },
                    {
                        "name": "param",
                        "content": "The HTML list content for the menu items.",
                        "types": [
                            "string"
                        ],
                        "variable": "items"
                    },
                    {
                        "name": "param",
                        "content": "An object containing wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_nav_menu",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu-template.php",
            "line": 302,
            "doc": {
                "summary": "Filters the HTML content for navigation menus.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_nav_menu()"
                    },
                    {
                        "name": "param",
                        "content": "The HTML content for the navigation menu.",
                        "types": [
                            "string"
                        ],
                        "variable": "nav_menu"
                    },
                    {
                        "name": "param",
                        "content": "An object containing wp_nav_menu() arguments.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_get_nav_menu_object",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 49,
            "doc": {
                "summary": "Filters the nav_menu term retrieved for wp_get_nav_menu_object().",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Term from nav_menu taxonomy, or false if nothing had been found.",
                        "types": [
                            "\\WP_Term",
                            "false"
                        ],
                        "variable": "menu_obj"
                    },
                    {
                        "name": "param",
                        "content": "The menu ID, slug, name, or object passed to wp_get_nav_menu_object().",
                        "types": [
                            "int",
                            "string",
                            "\\WP_Term"
                        ],
                        "variable": "menu"
                    }
                ]
            }
        },
        {
            "name": "has_nav_menu",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 195,
            "doc": {
                "summary": "Filters whether a nav menu is assigned to the specified location.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether there is a menu assigned to a location.",
                        "types": [
                            "bool"
                        ],
                        "variable": "has_nav_menu"
                    },
                    {
                        "name": "param",
                        "content": "Menu location.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    }
                ]
            }
        },
        {
            "name": "wp_get_nav_menu_name",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 227,
            "doc": {
                "summary": "Filters the navigation menu name being returned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Menu name.",
                        "types": [
                            "string"
                        ],
                        "variable": "menu_name"
                    },
                    {
                        "name": "param",
                        "content": "Menu location identifier.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    }
                ]
            }
        },
        {
            "name": "wp_delete_nav_menu",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 298,
            "doc": {
                "summary": "Fires after a navigation menu has been successfully deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    }
                ]
            }
        },
        {
            "name": "wp_create_nav_menu",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 375,
            "doc": {
                "summary": "Fires after a navigation menu is successfully created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of menu data.",
                        "types": [
                            "array"
                        ],
                        "variable": "menu_data"
                    }
                ]
            }
        },
        {
            "name": "wp_update_nav_menu",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 402,
            "doc": {
                "summary": "Fires after a navigation menu has been successfully updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "menu_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of menu data.",
                        "types": [
                            "array"
                        ],
                        "variable": "menu_data"
                    }
                ]
            }
        },
        {
            "name": "wp_add_nav_menu_item",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 547,
            "doc": {
                "summary": "Fires immediately after a new navigation menu item has been added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_update_nav_menu_item()"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "menu_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new menu item.",
                        "types": [
                            "int"
                        ],
                        "variable": "menu_item_db_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments used to update\/add the menu item.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_update_nav_menu_item",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 611,
            "doc": {
                "summary": "Fires after a navigation menu item has been updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_update_nav_menu_item()"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "menu_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated menu item.",
                        "types": [
                            "int"
                        ],
                        "variable": "menu_item_db_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments used to update a menu item.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_get_nav_menus",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 645,
            "doc": {
                "summary": "Filters the navigation menu objects being returned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_terms()"
                    },
                    {
                        "name": "param",
                        "content": "An array of menu objects.",
                        "types": [
                            "\\WP_Term[]"
                        ],
                        "variable": "menus"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments used to retrieve menu objects.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_get_nav_menu_items",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 757,
            "doc": {
                "summary": "Filters the navigation menu items being returned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of menu item post objects.",
                        "types": [
                            "array"
                        ],
                        "variable": "items"
                    },
                    {
                        "name": "param",
                        "content": "The menu object.",
                        "types": [
                            "object"
                        ],
                        "variable": "menu"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments used to retrieve menu item objects.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_attr_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 928,
            "doc": {
                "summary": "Filters a navigation menu item's title attribute.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The menu item title attribute.",
                        "types": [
                            "string"
                        ],
                        "variable": "item_title"
                    }
                ]
            }
        },
        {
            "name": "nav_menu_description",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 938,
            "doc": {
                "summary": "Filters a navigation menu item's description.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The menu item description.",
                        "types": [
                            "string"
                        ],
                        "variable": "description"
                    }
                ]
            }
        },
        {
            "name": "wp_setup_nav_menu_item",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/nav-menu.php",
            "line": 999,
            "doc": {
                "summary": "Filters a navigation menu item object.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The menu item object.",
                        "types": [
                            "object"
                        ],
                        "variable": "menu_item"
                    }
                ]
            }
        },
        {
            "name": "pre_option_{$option}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 132,
            "doc": {
                "summary": "Filters the value of an existing option before it is retrieved.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p> <p>Returning a value other than false from the filter will short-circuit retrieval and return that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>$default_value<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The value to return instead of the option value. This differs from <code>$default_value<\/code>, which is used as the fallback value in the event the option doesn't exist elsewhere in get_option().<br>Default false (to skip past the short-circuit).",
                        "types": [
                            "mixed"
                        ],
                        "variable": "pre_option"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "The fallback value to return if the option does not exist.<br>Default false.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "default_value"
                    }
                ]
            }
        },
        {
            "name": "pre_option",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 150,
            "doc": {
                "summary": "Filters the value of all existing options before it is retrieved.",
                "description": "<p>Returning a truthy value from the filter will effectively short-circuit retrieval and return the passed value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The value to return instead of the option value. This differs from <code>$default_value<\/code>, which is used as the fallback value in the event the option doesn't exist elsewhere in get_option().<br>Default false (to skip past the short-circuit).",
                        "types": [
                            "mixed"
                        ],
                        "variable": "pre_option"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "The fallback value to return if the option does not exist.<br>Default false.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "default_value"
                    }
                ]
            }
        },
        {
            "name": "default_option_{$option}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 188,
            "doc": {
                "summary": "Filters the default value for an option.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$passed_default<\/code> parameter was added to distinguish between a <code>false<\/code> value and the default parameter value."
                    },
                    {
                        "name": "param",
                        "content": "The default value to return if the option does not exist in the database.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "default_value"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "Was <code>get_option()<\/code> passed a default value?",
                        "types": [
                            "bool"
                        ],
                        "variable": "passed_default"
                    }
                ]
            }
        },
        {
            "name": "option_{$option}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 253,
            "doc": {
                "summary": "Filters the value of an existing option.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0",
                        "description": "As 'option_' . $setting"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Value of the option. If stored serialized, it will be unserialized prior to being returned.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_load_alloptions",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 315,
            "doc": {
                "summary": "Filters the array of alloptions before it is populated.",
                "description": "<p>Returning an array from the filter will effectively short circuit wp_load_alloptions(), returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of alloptions. Default null.",
                        "types": [
                            "array",
                            "null"
                        ],
                        "variable": "alloptions"
                    },
                    {
                        "name": "param",
                        "content": "Whether to force an update of the local cache from the persistent cache. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "force_cache"
                    }
                ]
            }
        },
        {
            "name": "pre_cache_alloptions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/option.php",
            "line": 347,
            "doc": {
                "summary": "Filters all options before caching them.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array with all options.",
                        "types": [
                            "array"
                        ],
                        "variable": "alloptions"
                    }
                ]
            }
        },
        {
            "name": "alloptions",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/option.php",
            "line": 360,
            "doc": {
                "summary": "Filters all options after retrieving them.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array with all options.",
                        "types": [
                            "array"
                        ],
                        "variable": "alloptions"
                    }
                ]
            }
        },
        {
            "name": "pre_update_option_{$option}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 479,
            "doc": {
                "summary": "Filters a specific option before its value is (maybe) serialized and updated.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The new, unserialized option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The old option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "old_value"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    }
                ]
            }
        },
        {
            "name": "pre_update_option",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 490,
            "doc": {
                "summary": "Filters an option before its value is (maybe) serialized and updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The new, unserialized option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "The old option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "old_value"
                    }
                ]
            }
        },
        {
            "name": "update_option",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 526,
            "doc": {
                "summary": "Fires immediately before an option value is updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option to update.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "The old option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "old_value"
                    },
                    {
                        "name": "param",
                        "content": "The new option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "update_option_{$option}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 570,
            "doc": {
                "summary": "Fires after the value of a specific option has been successfully updated.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.1"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The old option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "old_value"
                    },
                    {
                        "name": "param",
                        "content": "The new option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    }
                ]
            }
        },
        {
            "name": "updated_option",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 581,
            "doc": {
                "summary": "Fires after the value of an option has been successfully updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the updated option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "The old option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "old_value"
                    },
                    {
                        "name": "param",
                        "content": "The new option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "add_option",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 678,
            "doc": {
                "summary": "Fires before an option is added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option to add.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "add_option_{$option}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 714,
            "doc": {
                "summary": "Fires after a specific option has been added.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0",
                        "description": "As &quot;add<em>option<\/em>{$name}&quot;"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option to add.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "added_option",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 724,
            "doc": {
                "summary": "Fires after an option has been added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the added option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "delete_option",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/option.php",
            "line": 765,
            "doc": {
                "summary": "Fires immediately before an option is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option to delete.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    }
                ]
            }
        },
        {
            "name": "delete_option_{$option}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/option.php",
            "line": 792,
            "doc": {
                "summary": "Fires after a specific option has been deleted.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the deleted option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    }
                ]
            }
        },
        {
            "name": "deleted_option",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/option.php",
            "line": 801,
            "doc": {
                "summary": "Fires after an option has been deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the deleted option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    }
                ]
            }
        },
        {
            "name": "delete_transient_{$transient}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/option.php",
            "line": 828,
            "doc": {
                "summary": "Fires immediately before a specific transient is deleted.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "deleted_transient",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/option.php",
            "line": 851,
            "doc": {
                "summary": "Fires after a transient is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "pre_transient_{$transient}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 886,
            "doc": {
                "summary": "Filters the value of an existing transient before it is retrieved.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p> <p>Returning a value other than false from the filter will short-circuit retrieval and return that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient<\/code> parameter was added"
                    },
                    {
                        "name": "param",
                        "content": "The default value to return if the transient does not exist.<br>Any value other than false will short-circuit the retrieval of the transient, and return that value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "pre_transient"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "transient_{$transient}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 926,
            "doc": {
                "summary": "Filters an existing transient's value.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient<\/code> parameter was added"
                    },
                    {
                        "name": "param",
                        "content": "Value of transient.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "pre_set_transient_{$transient}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 961,
            "doc": {
                "summary": "Filters a specific transient before its value is set.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.2.0",
                        "description": "The <code>$expiration<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "New value of transient.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "expiration_of_transient_{$transient}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 974,
            "doc": {
                "summary": "Filters the expiration for a transient before its value is set.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds. Use 0 for no expiration.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    },
                    {
                        "name": "param",
                        "content": "New value of transient.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "set_transient_{$transient}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 1026,
            "doc": {
                "summary": "Fires after the value for a specific transient has been set.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.6.0",
                        "description": "The <code>$value<\/code> and <code>$expiration<\/code> parameters were added."
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Transient value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    },
                    {
                        "name": "param",
                        "content": "The name of the transient.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "setted_transient",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 1038,
            "doc": {
                "summary": "Fires after the value for a transient has been set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.6.0",
                        "description": "The <code>$value<\/code> and <code>$expiration<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "The name of the transient.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    },
                    {
                        "name": "param",
                        "content": "Transient value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    }
                ]
            }
        },
        {
            "name": "pre_site_option_{$option}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/option.php",
            "line": 1454,
            "doc": {
                "summary": "Filters the value of an existing network option before it is retrieved.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p> <p>Returning a value other than false from the filter will short-circuit retrieval and return that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As 'pre_site<em>option<\/em>' . $key"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>$default_value<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The value to return instead of the option value. This differs from <code>$default_value<\/code>, which is used as the fallback value in the event the option doesn't exist elsewhere in get_network_option().<br>Default false (to skip past the short-circuit).",
                        "types": [
                            "mixed"
                        ],
                        "variable": "pre_option"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    },
                    {
                        "name": "param",
                        "content": "The fallback value to return if the option does not exist.<br>Default false.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "default_value"
                    }
                ]
            }
        },
        {
            "name": "default_site_option_{$option}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 1480,
            "doc": {
                "summary": "Filters the value of a specific default network option.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The value to return if the site option does not exist in the database.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "default_value"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "site_option_{$option}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 1532,
            "doc": {
                "summary": "Filters the value of an existing network option.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As 'site<em>option<\/em>' . $key"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Value of network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "pre_add_site_option_{$option}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 1581,
            "doc": {
                "summary": "Filters the value of a specific network option before it is added.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As 'pre_add_site<em>option<\/em>' . $key"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Value of network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "add_site_option_{$option}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 1642,
            "doc": {
                "summary": "Fires after a specific network option has been successfully added.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As &quot;add_site<em>option<\/em>{$key}&quot;"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "add_site_option",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 1654,
            "doc": {
                "summary": "Fires after a network option has been successfully added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "pre_delete_site_option_{$option}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 1701,
            "doc": {
                "summary": "Fires immediately before a specific network option is deleted.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "delete_site_option_{$option}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 1736,
            "doc": {
                "summary": "Fires after a specific network option has been deleted.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As &quot;delete_site<em>option<\/em>{$key}&quot;"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "delete_site_option",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 1747,
            "doc": {
                "summary": "Fires after a network option has been deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "pre_update_site_option_{$option}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/option.php",
            "line": 1802,
            "doc": {
                "summary": "Filters a specific network option before its value is updated.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As 'pre_update_site<em>option<\/em>' . $key"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "New value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Old value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "old_value"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "update_site_option_{$option}",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/option.php",
            "line": 1866,
            "doc": {
                "summary": "Fires after the value of a specific network option has been successfully updated.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As &quot;update_site<em>option<\/em>{$key}&quot;"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "Current value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Old value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "old_value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "update_site_option",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/option.php",
            "line": 1879,
            "doc": {
                "summary": "Fires after the value of a network option has been successfully updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "Current value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Old value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "old_value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "delete_site_transient_{$transient}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/option.php",
            "line": 1906,
            "doc": {
                "summary": "Fires immediately before a specific site transient is deleted.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "deleted_site_transient",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/option.php",
            "line": 1929,
            "doc": {
                "summary": "Fires after a transient is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "pre_site_transient_{$transient}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 1966,
            "doc": {
                "summary": "Filters the value of an existing site transient before it is retrieved.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p> <p>Returning a value other than boolean false will short-circuit retrieval and return that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The default value to return if the site transient does not exist.<br>Any value other than false will short-circuit the retrieval of the transient, and return that value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "pre_site_transient"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "site_transient_{$transient}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 2004,
            "doc": {
                "summary": "Filters the value of an existing site transient.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Value of site transient.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "pre_set_site_transient_{$transient}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 2036,
            "doc": {
                "summary": "Filters the value of a specific site transient before it is set.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "New value of site transient.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "expiration_of_site_transient_{$transient}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 2051,
            "doc": {
                "summary": "Filters the expiration for a site transient before its value is set.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds. Use 0 for no expiration.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    },
                    {
                        "name": "param",
                        "content": "New value of site transient.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "set_site_transient_{$transient}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 2086,
            "doc": {
                "summary": "Fires after the value for a specific site transient has been set.",
                "description": "<p>The dynamic portion of the hook name, <code>$transient<\/code>, refers to the transient name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient<\/code> parameter was added"
                    },
                    {
                        "name": "param",
                        "content": "Site transient value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    }
                ]
            }
        },
        {
            "name": "setted_site_transient",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 2097,
            "doc": {
                "summary": "Fires after the value for a site transient has been set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the site transient.",
                        "types": [
                            "string"
                        ],
                        "variable": "transient"
                    },
                    {
                        "name": "param",
                        "content": "Site transient value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    }
                ]
            }
        },
        {
            "name": "register_setting_args",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/option.php",
            "line": 2391,
            "doc": {
                "summary": "Filters the registration arguments when registering a setting.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of setting registration arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Array of default arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "defaults"
                    },
                    {
                        "name": "param",
                        "content": "Setting group.",
                        "types": [
                            "string"
                        ],
                        "variable": "option_group"
                    },
                    {
                        "name": "param",
                        "content": "Setting name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option_name"
                    }
                ]
            }
        },
        {
            "name": "register_setting",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/option.php",
            "line": 2448,
            "doc": {
                "summary": "Fires immediately before the setting is registered but after its filters are in place.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Setting group.",
                        "types": [
                            "string"
                        ],
                        "variable": "option_group"
                    },
                    {
                        "name": "param",
                        "content": "Setting name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option_name"
                    },
                    {
                        "name": "param",
                        "content": "Array of setting registration arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "unregister_setting",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/option.php",
            "line": 2542,
            "doc": {
                "summary": "Fires immediately before the setting is unregistered and after its filters have been removed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Setting group.",
                        "types": [
                            "string"
                        ],
                        "variable": "option_group"
                    },
                    {
                        "name": "param",
                        "content": "Setting name.",
                        "types": [
                            "string"
                        ],
                        "variable": "option_name"
                    }
                ]
            }
        },
        {
            "name": "set_current_user",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/pluggable.php",
            "line": 48,
            "doc": {
                "summary": "Fires after the current user is set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.1"
                    }
                ]
            }
        },
        {
            "name": "wp_mail",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 192,
            "doc": {
                "summary": "Filters the wp_mail() arguments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of the <code>wp_mail()<\/code> arguments.<br>    @type string|string[] $to          Array or comma-separated list of email addresses to send message.<br>    @type string          $subject     Email subject.<br>    @type string          $message     Message contents.<br>    @type string|string[] $headers     Additional headers.<br>    @type string|string[] $attachments Paths to files to attach.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_mail",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 214,
            "doc": {
                "summary": "Filters whether to preempt sending an email.",
                "description": "<p>Returning a non-null value will short-circuit {@see \\wp_mail()}, returning that value instead. A boolean return value should be used to indicate whether the email was successfully sent.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Short-circuit return value.",
                        "types": [
                            "null",
                            "bool"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of the <code>wp_mail()<\/code> arguments.<br>    @type string|string[] $to          Array or comma-separated list of email addresses to send message.<br>    @type string          $subject     Email subject.<br>    @type string          $message     Message contents.<br>    @type string|string[] $headers     Additional headers.<br>    @type string|string[] $attachments Paths to files to attach.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    }
                ]
            }
        },
        {
            "name": "wp_mail_from",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 394,
            "doc": {
                "summary": "Filters the email address to send from.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Email address to send from.",
                        "types": [
                            "string"
                        ],
                        "variable": "from_email"
                    }
                ]
            }
        },
        {
            "name": "wp_mail_from_name",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 403,
            "doc": {
                "summary": "Filters the name to associate with the \"from\" email address.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Name associated with the &quot;from&quot; email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "from_name"
                    }
                ]
            }
        },
        {
            "name": "wp_mail_content_type",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 478,
            "doc": {
                "summary": "Filters the wp_mail() content type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Default wp_mail() content type.",
                        "types": [
                            "string"
                        ],
                        "variable": "content_type"
                    }
                ]
            }
        },
        {
            "name": "wp_mail_charset",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 499,
            "doc": {
                "summary": "Filters the default wp_mail() charset.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Default email charset.",
                        "types": [
                            "string"
                        ],
                        "variable": "charset"
                    }
                ]
            }
        },
        {
            "name": "phpmailer_init",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 538,
            "doc": {
                "summary": "Fires after PHPMailer is initialized.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The PHPMailer instance (passed by reference).",
                        "types": [
                            "\\PHPMailer"
                        ],
                        "variable": "phpmailer"
                    }
                ]
            }
        },
        {
            "name": "wp_mail_succeeded",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 565,
            "doc": {
                "summary": "Fires after PHPMailer has successfully sent an email.",
                "description": "<p>The firing of this action does not necessarily mean that the recipient(s) received the email successfully. It only means that the <code>send<\/code> method above was able to process the request without any errors.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array containing the email recipient(s), subject, message, headers, and attachments.<br>    @type string[] $to          Email addresses to send message.<br>    @type string   $subject     Email subject.<br>    @type string   $message     Message contents.<br>    @type string[] $headers     Additional headers.<br>    @type string[] $attachments Paths to files to attach.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "mail_data"
                    }
                ]
            }
        },
        {
            "name": "wp_mail_failed",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 579,
            "doc": {
                "summary": "Fires after a PHPMailer\\PHPMailer\\Exception is caught.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object with the PHPMailer\\PHPMailer\\Exception message, and an array containing the mail recipient, subject, message, headers, and attachments.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "error"
                    }
                ]
            }
        },
        {
            "name": "authenticate",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/pluggable.php",
            "line": 616,
            "doc": {
                "summary": "Filters whether a set of user login credentials are valid.",
                "description": "<p>A WP_User object is returned if the credentials authenticate a user.<br>WP_Error or null otherwise.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "<code>$username<\/code> now accepts an email address."
                    },
                    {
                        "name": "param",
                        "content": "WP_User if the user is authenticated.<br>WP_Error or null otherwise.",
                        "types": [
                            "null",
                            "\\WP_User",
                            "\\WP_Error"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "Username or email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "username"
                    },
                    {
                        "name": "param",
                        "content": "User password.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    }
                ]
            }
        },
        {
            "name": "wp_login_failed",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 639,
            "doc": {
                "summary": "Fires after a user login has failed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The value of <code>$username<\/code> can now be an email address."
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "The <code>$error<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Username or email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "username"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object with the authentication failure details.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "error"
                    }
                ]
            }
        },
        {
            "name": "wp_logout",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 667,
            "doc": {
                "summary": "Fires after a user is logged out.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$user_id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the user that was logged out.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "auth_cookie_malformed",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 701,
            "doc": {
                "summary": "Fires if an authentication cookie is malformed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Malformed auth cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "cookie"
                    },
                    {
                        "name": "param",
                        "content": "Authentication scheme. Values include 'auth', 'secure_auth', or 'logged_in'.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "auth_cookie_expired",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 735,
            "doc": {
                "summary": "Fires once an authentication cookie has expired.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Authentication cookie components. None of the components should be assumed     to be valid as they come directly from a client-provided cookie value.<br>    @type string $username   User's username.<br>    @type string $expiration The time the cookie expires as a UNIX timestamp.<br>    @type string $token      User's session token used.<br>    @type string $hmac       The security hash for the cookie.<br>    @type string $scheme     The cookie scheme to use.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "cookie_elements"
                    }
                ]
            }
        },
        {
            "name": "auth_cookie_bad_username",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 757,
            "doc": {
                "summary": "Fires if a bad username is entered in the user authentication process.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Authentication cookie components. None of the components should be assumed     to be valid as they come directly from a client-provided cookie value.<br>    @type string $username   User's username.<br>    @type string $expiration The time the cookie expires as a UNIX timestamp.<br>    @type string $token      User's session token used.<br>    @type string $hmac       The security hash for the cookie.<br>    @type string $scheme     The cookie scheme to use.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "cookie_elements"
                    }
                ]
            }
        },
        {
            "name": "auth_cookie_bad_hash",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 786,
            "doc": {
                "summary": "Fires if a bad authentication cookie hash is encountered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Authentication cookie components. None of the components should be assumed     to be valid as they come directly from a client-provided cookie value.<br>    @type string $username   User's username.<br>    @type string $expiration The time the cookie expires as a UNIX timestamp.<br>    @type string $token      User's session token used.<br>    @type string $hmac       The security hash for the cookie.<br>    @type string $scheme     The cookie scheme to use.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "cookie_elements"
                    }
                ]
            }
        },
        {
            "name": "auth_cookie_bad_session_token",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 808,
            "doc": {
                "summary": "Fires if a bad session token is encountered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Authentication cookie components. None of the components should be assumed     to be valid as they come directly from a client-provided cookie value.<br>    @type string $username   User's username.<br>    @type string $expiration The time the cookie expires as a UNIX timestamp.<br>    @type string $token      User's session token used.<br>    @type string $hmac       The security hash for the cookie.<br>    @type string $scheme     The cookie scheme to use.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "cookie_elements"
                    }
                ]
            }
        },
        {
            "name": "auth_cookie_valid",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 833,
            "doc": {
                "summary": "Fires once an authentication cookie has been validated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Authentication cookie components.<br>    @type string $username   User's username.<br>    @type string $expiration The time the cookie expires as a UNIX timestamp.<br>    @type string $token      User's session token used.<br>    @type string $hmac       The security hash for the cookie.<br>    @type string $scheme     The cookie scheme to use.<br>}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "cookie_elements"
                    },
                    {
                        "name": "param",
                        "content": "User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "auth_cookie",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/pluggable.php",
            "line": 886,
            "doc": {
                "summary": "Filters the authentication cookie.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.0.0",
                        "description": "The <code>$token<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Authentication cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "cookie"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The time the cookie expires as a UNIX timestamp.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    },
                    {
                        "name": "param",
                        "content": "Cookie scheme used. Accepts 'auth', 'secure_auth', or 'logged_in'.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    },
                    {
                        "name": "param",
                        "content": "User's session token used.",
                        "types": [
                            "string"
                        ],
                        "variable": "token"
                    }
                ]
            }
        },
        {
            "name": "auth_cookie_expiration",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/pluggable.php",
            "line": 978,
            "doc": {
                "summary": "Filters the duration of the authentication cookie expiration period.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Duration of the expiration period in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "length"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether to remember the user login. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "remember"
                    }
                ]
            }
        },
        {
            "name": "secure_auth_cookie",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1006,
            "doc": {
                "summary": "Filters whether the auth cookie should only be sent over HTTPS.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the cookie should only be sent over HTTPS.",
                        "types": [
                            "bool"
                        ],
                        "variable": "secure"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "secure_logged_in_cookie",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1017,
            "doc": {
                "summary": "Filters whether the logged in cookie should only be sent over HTTPS.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the logged in cookie should only be sent over HTTPS.",
                        "types": [
                            "bool"
                        ],
                        "variable": "secure_logged_in_cookie"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether the auth cookie should only be sent over HTTPS.",
                        "types": [
                            "bool"
                        ],
                        "variable": "secure"
                    }
                ]
            }
        },
        {
            "name": "set_auth_cookie",
            "type": "action",
            "numArgs": 6,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1050,
            "doc": {
                "summary": "Fires immediately before the authentication cookie is set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>$token<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Authentication cookie value.",
                        "types": [
                            "string"
                        ],
                        "variable": "auth_cookie"
                    },
                    {
                        "name": "param",
                        "content": "The time the login grace period expires as a UNIX timestamp.<br>Default is 12 hours past the cookie's expiration time.",
                        "types": [
                            "int"
                        ],
                        "variable": "expire"
                    },
                    {
                        "name": "param",
                        "content": "The time when the authentication cookie expires as a UNIX timestamp.<br>Default is 14 days from now.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Authentication scheme. Values include 'auth' or 'secure_auth'.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    },
                    {
                        "name": "param",
                        "content": "User's session token to use for this cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "token"
                    }
                ]
            }
        },
        {
            "name": "set_logged_in_cookie",
            "type": "action",
            "numArgs": 6,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1067,
            "doc": {
                "summary": "Fires immediately before the logged-in authentication cookie is set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>$token<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The logged-in cookie value.",
                        "types": [
                            "string"
                        ],
                        "variable": "logged_in_cookie"
                    },
                    {
                        "name": "param",
                        "content": "The time the login grace period expires as a UNIX timestamp.<br>Default is 12 hours past the cookie's expiration time.",
                        "types": [
                            "int"
                        ],
                        "variable": "expire"
                    },
                    {
                        "name": "param",
                        "content": "The time when the logged-in authentication cookie expires as a UNIX timestamp.<br>Default is 14 days from now.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Authentication scheme. Default 'logged_in'.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    },
                    {
                        "name": "param",
                        "content": "User's session token to use for this cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "token"
                    }
                ]
            }
        },
        {
            "name": "send_auth_cookies",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1085,
            "doc": {
                "summary": "Allows preventing auth cookies from actually being sent to the client.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.4"
                    },
                    {
                        "name": "since",
                        "content": "6.2.0",
                        "description": "The <code>$expire<\/code>, <code>$expiration<\/code>, <code>$user_id<\/code>, <code>$scheme<\/code>, and <code>$token<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "Whether to send auth cookies to the client. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "The time the login grace period expires as a UNIX timestamp.<br>Default is 12 hours past the cookie's expiration time. Zero when clearing cookies.",
                        "types": [
                            "int"
                        ],
                        "variable": "expire"
                    },
                    {
                        "name": "param",
                        "content": "The time when the logged-in authentication cookie expires as a UNIX timestamp.<br>Default is 14 days from now. Zero when clearing cookies.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    },
                    {
                        "name": "param",
                        "content": "User ID. Zero when clearing cookies.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Authentication scheme. Values include 'auth' or 'secure_auth'.<br>Empty string when clearing cookies.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    },
                    {
                        "name": "param",
                        "content": "User's session token to use for this cookie. Empty string when clearing cookies.",
                        "types": [
                            "string"
                        ],
                        "variable": "token"
                    }
                ]
            }
        },
        {
            "name": "clear_auth_cookie",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1110,
            "doc": {
                "summary": "Fires just before the authentication cookies are cleared.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    }
                ]
            }
        },
        {
            "name": "secure_auth_redirect",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1186,
            "doc": {
                "summary": "Filters whether to use a secure authentication redirect.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to use a secure authentication redirect. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "secure"
                    }
                ]
            }
        },
        {
            "name": "auth_redirect_scheme",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1206,
            "doc": {
                "summary": "Filters the authentication redirect scheme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Authentication redirect scheme. Default empty.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "auth_redirect",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1217,
            "doc": {
                "summary": "Fires before the authentication redirect.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "check_admin_referer",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1282,
            "doc": {
                "summary": "Fires once the admin request has been validated or not.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The nonce action.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    },
                    {
                        "name": "param",
                        "content": "False if the nonce is invalid, 1 if the nonce is valid and generated between 0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.",
                        "types": [
                            "false",
                            "int"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "check_ajax_referer",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1335,
            "doc": {
                "summary": "Fires once the Ajax request has been validated or not.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The Ajax nonce action.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    },
                    {
                        "name": "param",
                        "content": "False if the nonce is invalid, 1 if the nonce is valid and generated between 0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.",
                        "types": [
                            "false",
                            "int"
                        ],
                        "variable": "result"
                    }
                ]
            }
        },
        {
            "name": "wp_redirect",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1388,
            "doc": {
                "summary": "Filters the redirect location.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The path or URL to redirect to.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    },
                    {
                        "name": "param",
                        "content": "The HTTP response status code to use.",
                        "types": [
                            "int"
                        ],
                        "variable": "status"
                    }
                ]
            }
        },
        {
            "name": "wp_redirect_status",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1398,
            "doc": {
                "summary": "Filters the redirect HTTP response status code to use.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTTP response status code to use.",
                        "types": [
                            "int"
                        ],
                        "variable": "status"
                    },
                    {
                        "name": "param",
                        "content": "The path or URL to redirect to.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    }
                ]
            }
        },
        {
            "name": "x_redirect_by",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1425,
            "doc": {
                "summary": "Filters the X-Redirect-By header.",
                "description": "<p>Allows applications to identify themselves when they're doing a redirect.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The application doing the redirect.",
                        "types": [
                            "string"
                        ],
                        "variable": "x_redirect_by"
                    },
                    {
                        "name": "param",
                        "content": "Status code to use.",
                        "types": [
                            "int"
                        ],
                        "variable": "status"
                    },
                    {
                        "name": "param",
                        "content": "The path to redirect to.",
                        "types": [
                            "string"
                        ],
                        "variable": "location"
                    }
                ]
            }
        },
        {
            "name": "wp_safe_redirect_fallback",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1533,
            "doc": {
                "summary": "Filters the redirect fallback URL for when the provided redirect is not safe (local).",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The fallback URL to use by default.",
                        "types": [
                            "string"
                        ],
                        "variable": "fallback_url"
                    },
                    {
                        "name": "param",
                        "content": "The HTTP response status code to use.",
                        "types": [
                            "int"
                        ],
                        "variable": "status"
                    }
                ]
            }
        },
        {
            "name": "allowed_redirect_hosts",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1613,
            "doc": {
                "summary": "Filters the list of allowed hosts to redirect to.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of allowed host names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "hosts"
                    },
                    {
                        "name": "param",
                        "content": "The host name of the redirect destination; empty string if not set.",
                        "types": [
                            "string"
                        ],
                        "variable": "host"
                    }
                ]
            }
        },
        {
            "name": "comment_notification_recipients",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1663,
            "doc": {
                "summary": "Filters the list of email addresses to receive a comment notification.",
                "description": "<p>By default, only post authors are notified of comments. This filter allows others to be added.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of email addresses to receive a comment notification.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "emails"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "comment_notification_notify_author",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1686,
            "doc": {
                "summary": "Filters whether to notify comment authors of their comments on their own posts.",
                "description": "<p>By default, comment authors aren't notified of their comments on their own posts. This filter allows you to override that.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to notify the post author of their own comment.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "notify"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "comment_notification_text",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1819,
            "doc": {
                "summary": "Filters the comment notification email text.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.2"
                    },
                    {
                        "name": "param",
                        "content": "The comment notification email text.",
                        "types": [
                            "string"
                        ],
                        "variable": "notify_message"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "comment_notification_subject",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1829,
            "doc": {
                "summary": "Filters the comment notification email subject.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.2"
                    },
                    {
                        "name": "param",
                        "content": "The comment notification email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "comment_notification_headers",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1839,
            "doc": {
                "summary": "Filters the comment notification email headers.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.2"
                    },
                    {
                        "name": "param",
                        "content": "Headers for the comment notification email.",
                        "types": [
                            "string"
                        ],
                        "variable": "message_headers"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "notify_moderator",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1880,
            "doc": {
                "summary": "Filters whether to send the site moderator email notifications, overriding the site setting.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to notify blog moderator.",
                        "types": [
                            "bool"
                        ],
                        "variable": "maybe_notify"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the comment for the notification.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "comment_moderation_recipients",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 1992,
            "doc": {
                "summary": "Filters the list of recipients for comment moderation emails.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "List of email addresses to notify for comment moderation.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "emails"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "comment_moderation_text",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2002,
            "doc": {
                "summary": "Filters the comment moderation email text.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.2"
                    },
                    {
                        "name": "param",
                        "content": "Text of the comment moderation email.",
                        "types": [
                            "string"
                        ],
                        "variable": "notify_message"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "comment_moderation_subject",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2012,
            "doc": {
                "summary": "Filters the comment moderation email subject.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.2"
                    },
                    {
                        "name": "param",
                        "content": "Subject of the comment moderation email.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "comment_moderation_headers",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2022,
            "doc": {
                "summary": "Filters the comment moderation email headers.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Headers for the comment moderation email.",
                        "types": [
                            "string"
                        ],
                        "variable": "message_headers"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "comment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_password_change_notification_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2078,
            "doc": {
                "summary": "Filters the contents of the password change notification email sent to the site admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The intended recipient - site admin email address.<br>    @type string $subject The subject of the email.<br>    @type string $message The body of the email.<br>    @type string $headers The headers of the email.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "wp_password_change_notification_email"
                    },
                    {
                        "name": "param",
                        "content": "User object for user whose password was changed.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "blogname"
                    }
                ]
            }
        },
        {
            "name": "wp_send_new_user_notification_to_admin",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2130,
            "doc": {
                "summary": "Filters whether the admin is notified of a new user registration.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the email. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "User object for new user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_new_user_notification_email_admin",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2166,
            "doc": {
                "summary": "Filters the contents of the new user notification email sent to the site admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The intended recipient - site admin email address.<br>    @type string $subject The subject of the email.<br>    @type string $message The body of the email.<br>    @type string $headers The headers of the email.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "wp_new_user_notification_email_admin"
                    },
                    {
                        "name": "param",
                        "content": "User object for new user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "blogname"
                    }
                ]
            }
        },
        {
            "name": "wp_send_new_user_notification_to_user",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2188,
            "doc": {
                "summary": "Filters whether the user is notified of their new user registration.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the email. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "User object for new user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_new_user_notification_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2233,
            "doc": {
                "summary": "Filters the contents of the new user notification email sent to the new user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The intended recipient - New user email address.<br>    @type string $subject The subject of the email.<br>    @type string $message The body of the email.<br>    @type string $headers The headers of the email.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "wp_new_user_notification_email"
                    },
                    {
                        "name": "param",
                        "content": "User object for new user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "blogname"
                    }
                ]
            }
        },
        {
            "name": "nonce_life",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2271,
            "doc": {
                "summary": "Filters the lifespan of nonces in seconds.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "Added <code>$action<\/code> argument to allow for more targeted filters."
                    },
                    {
                        "name": "param",
                        "content": "Lifespan of nonces in seconds. Default 86,400 seconds, or one day.",
                        "types": [
                            "int"
                        ],
                        "variable": "lifespan"
                    },
                    {
                        "name": "param",
                        "content": "The nonce action, or -1 if none was provided.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "action"
                    }
                ]
            }
        },
        {
            "name": "nonce_user_logged_out",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2304,
            "doc": {
                "summary": "Filters whether the user who generated the nonce is logged out.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the nonce-owning user.",
                        "types": [
                            "int"
                        ],
                        "variable": "uid"
                    },
                    {
                        "name": "param",
                        "content": "The nonce action, or -1 if none was provided.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "action"
                    }
                ]
            }
        },
        {
            "name": "wp_verify_nonce_failed",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2336,
            "doc": {
                "summary": "Fires when nonce verification fails.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The invalid nonce.",
                        "types": [
                            "string"
                        ],
                        "variable": "nonce"
                    },
                    {
                        "name": "param",
                        "content": "The nonce action.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "action"
                    },
                    {
                        "name": "param",
                        "content": "The current user object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The user's session token.",
                        "types": [
                            "string"
                        ],
                        "variable": "token"
                    }
                ]
            }
        },
        {
            "name": "salt",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2414,
            "doc": {
                "summary": "Filters the WordPress salt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Cached salt for the given scheme.",
                        "types": [
                            "string"
                        ],
                        "variable": "cached_salt"
                    },
                    {
                        "name": "param",
                        "content": "Authentication scheme. Values include 'auth', 'secure_auth', 'logged_in', and 'nonce'.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "check_password",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2572,
            "doc": {
                "summary": "Filters whether the plaintext password matches the encrypted password.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the passwords match.",
                        "types": [
                            "bool"
                        ],
                        "variable": "check"
                    },
                    {
                        "name": "param",
                        "content": "The plaintext password.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    },
                    {
                        "name": "param",
                        "content": "The hashed password.",
                        "types": [
                            "string"
                        ],
                        "variable": "hash"
                    },
                    {
                        "name": "param",
                        "content": "User ID. Can be empty.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "random_password",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2631,
            "doc": {
                "summary": "Filters the randomly-generated password.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.3.0",
                        "description": "Added the <code>$length<\/code>, <code>$special_chars<\/code>, and <code>$extra_special_chars<\/code> parameters."
                    },
                    {
                        "name": "param",
                        "content": "The generated password.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    },
                    {
                        "name": "param",
                        "content": "The length of password to generate.",
                        "types": [
                            "int"
                        ],
                        "variable": "length"
                    },
                    {
                        "name": "param",
                        "content": "Whether to include standard special characters.",
                        "types": [
                            "bool"
                        ],
                        "variable": "special_chars"
                    },
                    {
                        "name": "param",
                        "content": "Whether to include other special characters.",
                        "types": [
                            "bool"
                        ],
                        "variable": "extra_special_chars"
                    }
                ]
            }
        },
        {
            "name": "wp_set_password",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2763,
            "doc": {
                "summary": "Fires after the user password is set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The plaintext password just set.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the user whose password was just set.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "pre_get_avatar",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2860,
            "doc": {
                "summary": "Allows the HTML for a user's avatar to be returned early.",
                "description": "<p>Returning a non-null value will effectively short-circuit get_avatar(), passing the value through the {@see 'get_avatar'} filter and returning early.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML for the user's avatar. Default null.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "avatar"
                    },
                    {
                        "name": "param",
                        "content": "The avatar to retrieve. Accepts a user_id, Gravatar MD5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "id_or_email"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to get_avatar_url(), after processing.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "get_avatar",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/pluggable.php",
            "line": 2944,
            "doc": {
                "summary": "Filters the HTML for a user's avatar.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.2.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "HTML for the user's avatar.",
                        "types": [
                            "string"
                        ],
                        "variable": "avatar"
                    },
                    {
                        "name": "param",
                        "content": "The avatar to retrieve. Accepts a user_id, Gravatar MD5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "id_or_email"
                    },
                    {
                        "name": "param",
                        "content": "Square avatar width and height in pixels to retrieve.",
                        "types": [
                            "int"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "URL for the default image or a default type. Accepts '404', 'retro', 'monsterid', 'wavatar', 'indenticon', 'mystery', 'mm', 'mysteryman', 'blank', or 'gravatar_default'.",
                        "types": [
                            "string"
                        ],
                        "variable": "default_value"
                    },
                    {
                        "name": "param",
                        "content": "Alternative text to use in the avatar image tag.",
                        "types": [
                            "string"
                        ],
                        "variable": "alt"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to get_avatar_data(), after processing.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "protected_title_format",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 140,
            "doc": {
                "summary": "Filters the text prepended to the post title for protected posts.",
                "description": "<p>The filter is only applied on the front end.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Text displayed before the post title.<br>Default 'Protected: %s'.",
                        "types": [
                            "string"
                        ],
                        "variable": "prepend"
                    },
                    {
                        "name": "param",
                        "content": "Current post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "private_title_format",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 159,
            "doc": {
                "summary": "Filters the text prepended to the post title of private posts.",
                "description": "<p>The filter is only applied on the front end.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Text displayed before the post title.<br>Default 'Private: %s'.",
                        "types": [
                            "string"
                        ],
                        "variable": "prepend"
                    },
                    {
                        "name": "param",
                        "content": "Current post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "the_title",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 173,
            "doc": {
                "summary": "Filters the post title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "The post title.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_title"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "the_guid",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 205,
            "doc": {
                "summary": "Filters the escaped Global Unique Identifier (guid) of the post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_the_guid()"
                    },
                    {
                        "name": "param",
                        "content": "Escaped Global Unique Identifier (guid) of the post.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_guid"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "get_the_guid",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 234,
            "doc": {
                "summary": "Filters the Global Unique Identifier (guid) of the post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Global Unique Identifier (guid) of the post.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_guid"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "the_content",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post-template.php",
            "line": 255,
            "doc": {
                "summary": "Filters the post content.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "Content of the current post.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "the_content_more_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 371,
            "doc": {
                "summary": "Filters the Read More link text.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Read More link element.",
                        "types": [
                            "string"
                        ],
                        "variable": "more_link_element"
                    },
                    {
                        "name": "param",
                        "content": "Read More text.",
                        "types": [
                            "string"
                        ],
                        "variable": "more_link_text"
                    }
                ]
            }
        },
        {
            "name": "the_excerpt",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post-template.php",
            "line": 396,
            "doc": {
                "summary": "Filters the displayed post excerpt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\get_the_excerpt()"
                    },
                    {
                        "name": "param",
                        "content": "The post excerpt.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_excerpt"
                    }
                ]
            }
        },
        {
            "name": "get_the_excerpt",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 431,
            "doc": {
                "summary": "Filters the retrieved post excerpt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Introduced the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The post excerpt.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_excerpt"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_class_taxonomies",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/post-template.php",
            "line": 567,
            "doc": {
                "summary": "Filters the taxonomies to generate classes for each individual term.",
                "description": "<p>Default is all public taxonomies registered to the post type.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "List of all taxonomy names to generate classes for.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of post class names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "classes"
                    },
                    {
                        "name": "param",
                        "content": "An array of additional class names added to the post.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "css_class"
                    }
                ]
            }
        },
        {
            "name": "post_class",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post-template.php",
            "line": 602,
            "doc": {
                "summary": "Filters the list of CSS class names for the current post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of post class names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "classes"
                    },
                    {
                        "name": "param",
                        "content": "An array of additional class names added to the post.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "css_class"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "body_class",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 859,
            "doc": {
                "summary": "Filters the list of CSS body class names for the current post or page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of body class names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "classes"
                    },
                    {
                        "name": "param",
                        "content": "An array of additional class names added to the body.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "css_class"
                    }
                ]
            }
        },
        {
            "name": "post_password_required",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 904,
            "doc": {
                "summary": "Filters whether a post requires the user to supply a password.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the user needs to supply a password. True if password has not been provided or is incorrect, false if password has been supplied or is not required.",
                        "types": [
                            "bool"
                        ],
                        "variable": "required"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_link_pages_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post-template.php",
            "line": 975,
            "doc": {
                "summary": "Filters the arguments used in retrieving page links for paginated posts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of page link arguments. See wp_link_pages() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "wp_link_pages_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 996,
            "doc": {
                "summary": "Filters the HTML output of individual page number links.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The page number HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    },
                    {
                        "name": "param",
                        "content": "Page number for paginated posts' page links.",
                        "types": [
                            "int"
                        ],
                        "variable": "i"
                    }
                ]
            }
        },
        {
            "name": "wp_link_pages",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 1035,
            "doc": {
                "summary": "Filters the HTML output of page links for paginated posts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML output of paginated posts' page links.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "An array or query string of arguments. See wp_link_pages() for information on accepted arguments.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "the_meta_key",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post-template.php",
            "line": 1146,
            "doc": {
                "summary": "Filters the HTML output of the li element in the post custom fields list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML output for the li element.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Meta key.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "Meta value.",
                        "types": [
                            "string"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "wp_dropdown_pages",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post-template.php",
            "line": 1241,
            "doc": {
                "summary": "Filters the HTML output of a list of pages as a dropdown.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "<code>$parsed_args<\/code> and <code>$pages<\/code> added as arguments."
                    },
                    {
                        "name": "param",
                        "content": "HTML output for dropdown list of pages.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "The parsed arguments array. See wp_dropdown_pages() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "Array of the page objects.",
                        "types": [
                            "\\WP_Post[]"
                        ],
                        "variable": "pages"
                    }
                ]
            }
        },
        {
            "name": "wp_list_pages_excludes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post-template.php",
            "line": 1331,
            "doc": {
                "summary": "Filters the array of pages to exclude from the pages list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of page IDs to exclude.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "exclude_array"
                    }
                ]
            }
        },
        {
            "name": "wp_list_pages",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post-template.php",
            "line": 1372,
            "doc": {
                "summary": "Filters the HTML output of the pages to list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "<code>$pages<\/code> added as arguments."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_list_pages()"
                    },
                    {
                        "name": "param",
                        "content": "HTML output of the pages list.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "An array of page-listing arguments. See wp_list_pages() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "Array of the page objects.",
                        "types": [
                            "\\WP_Post[]"
                        ],
                        "variable": "pages"
                    }
                ]
            }
        },
        {
            "name": "wp_page_menu_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post-template.php",
            "line": 1453,
            "doc": {
                "summary": "Filters the arguments used to generate a page-based menu.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_page_menu()"
                    },
                    {
                        "name": "param",
                        "content": "An array of page menu arguments. See wp_page_menu() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_page_menu",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 1528,
            "doc": {
                "summary": "Filters the HTML output of a page-based menu.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_page_menu()"
                    },
                    {
                        "name": "param",
                        "content": "The HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "menu"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments. See wp_page_menu() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_link_attributes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 1678,
            "doc": {
                "summary": "Filters the list of attachment link attributes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of attributes for the link markup, keyed on the attribute name.",
                        "types": [
                            "array"
                        ],
                        "variable": "attributes"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_link",
            "type": "filter",
            "numArgs": 7,
            "path": "\/wp-includes\/post-template.php",
            "line": 1703,
            "doc": {
                "summary": "Filters a retrieved attachment page link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "Added the <code>$attr<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The page link HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "link_html"
                    },
                    {
                        "name": "param",
                        "content": "Post ID or object. Can be 0 for the current global post.",
                        "types": [
                            "int",
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "Whether to add permalink to image. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "permalink"
                    },
                    {
                        "name": "param",
                        "content": "Whether to include an icon.",
                        "types": [
                            "bool"
                        ],
                        "variable": "icon"
                    },
                    {
                        "name": "param",
                        "content": "If string, will be link text.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Array or string of attributes.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "attr"
                    }
                ]
            }
        },
        {
            "name": "prepend_attachment",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post-template.php",
            "line": 1750,
            "doc": {
                "summary": "Filters the attachment markup to be prepended to the post content.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\prepend_attachment()"
                    },
                    {
                        "name": "param",
                        "content": "The attachment HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "p"
                    }
                ]
            }
        },
        {
            "name": "the_password_form",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-template.php",
            "line": 1788,
            "doc": {
                "summary": "Filters the HTML output for the protected post password form.",
                "description": "<p>If modifying the password field, please note that the core database schema limits the password field to 20 characters regardless of the value of the size attribute in the form input.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The password form HTML output.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_post_revision_title_expanded",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post-template.php",
            "line": 1965,
            "doc": {
                "summary": "Filters the formatted author and date for a revision.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The formatted string.",
                        "types": [
                            "string"
                        ],
                        "variable": "revision_date_author"
                    },
                    {
                        "name": "param",
                        "content": "The revision object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "revision"
                    },
                    {
                        "name": "param",
                        "content": "Whether to link to the revisions page, as passed into wp_post_revision_title_expanded().",
                        "types": [
                            "bool"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "has_post_thumbnail",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post-thumbnail-template.php",
            "line": 38,
            "doc": {
                "summary": "Filters whether a post has a post thumbnail.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "true if the post has a post thumbnail, otherwise false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "has_thumbnail"
                    },
                    {
                        "name": "param",
                        "content": "Post ID or WP_Post object. Default is global <code>$post<\/code>.",
                        "types": [
                            "int",
                            "\\WP_Post",
                            "null"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Post thumbnail ID or false if the post does not exist.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "thumbnail_id"
                    }
                ]
            }
        },
        {
            "name": "post_thumbnail_id",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-thumbnail-template.php",
            "line": 70,
            "doc": {
                "summary": "Filters the post thumbnail ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post thumbnail ID or false if the post does not exist.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "thumbnail_id"
                    },
                    {
                        "name": "param",
                        "content": "Post ID or WP_Post object. Default is global <code>$post<\/code>.",
                        "types": [
                            "int",
                            "\\WP_Post",
                            "null"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_thumbnail_size",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post-thumbnail-template.php",
            "line": 167,
            "doc": {
                "summary": "Filters the post thumbnail size.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$post_id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "begin_fetch_post_thumbnail_html",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post-thumbnail-template.php",
            "line": 183,
            "doc": {
                "summary": "Fires before fetching the post thumbnail HTML.",
                "description": "<p>Provides &quot;just in time&quot; filtering of all filters in wp_get_attachment_image().<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The post thumbnail ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_thumbnail_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "end_fetch_post_thumbnail_html",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post-thumbnail-template.php",
            "line": 217,
            "doc": {
                "summary": "Fires after fetching the post thumbnail HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The post thumbnail ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_thumbnail_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "post_thumbnail_html",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/post-thumbnail-template.php",
            "line": 235,
            "doc": {
                "summary": "Filters the post thumbnail HTML.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The post thumbnail HTML.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The post thumbnail ID, or 0 if there isn't one.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_thumbnail_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    },
                    {
                        "name": "param",
                        "content": "Query string or array of attributes.",
                        "types": [
                            "string",
                            "array"
                        ],
                        "variable": "attr"
                    }
                ]
            }
        },
        {
            "name": "post_thumbnail_url",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post-thumbnail-template.php",
            "line": 268,
            "doc": {
                "summary": "Filters the post thumbnail URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post thumbnail URL or false if the post does not exist.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "thumbnail_url"
                    },
                    {
                        "name": "param",
                        "content": "Post ID or WP_Post object. Default is global <code>$post<\/code>.",
                        "types": [
                            "int",
                            "\\WP_Post",
                            "null"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Registered image size to retrieve the source for or a flat array of height and width dimensions. Default 'post-thumbnail'.",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "size"
                    }
                ]
            }
        },
        {
            "name": "the_post_thumbnail_caption",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post-thumbnail-template.php",
            "line": 327,
            "doc": {
                "summary": "Filters the displayed post thumbnail caption.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Caption for the given attachment.",
                        "types": [
                            "string"
                        ],
                        "variable": "caption"
                    }
                ]
            }
        },
        {
            "name": "get_attached_file",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 745,
            "doc": {
                "summary": "Filters the attached file based on the given ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The file path to where the attached file should be, false otherwise.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "update_attached_file",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 773,
            "doc": {
                "summary": "Filters the path to the attached file to update.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the attached file to update.",
                        "types": [
                            "string"
                        ],
                        "variable": "file"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "_wp_relative_upload_path",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 811,
            "doc": {
                "summary": "Filters the relative path to an uploaded file.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Relative path to the file.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_path"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the file.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "get_post_status",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 1177,
            "doc": {
                "summary": "Filters the post status.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "5.7.0",
                        "description": "The attachment post type is now passed through this filter."
                    },
                    {
                        "name": "param",
                        "content": "The post status.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_status"
                    },
                    {
                        "name": "param",
                        "content": "The post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "registered_post_type",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 1711,
            "doc": {
                "summary": "Fires after a post type is registered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Converted the <code>$post_type<\/code> parameter to accept a <code>WP_Post_Type<\/code> object."
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Arguments used to register the post type.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type_object"
                    }
                ]
            }
        },
        {
            "name": "registered_post_type_{$post_type}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 1728,
            "doc": {
                "summary": "Fires after a specific post type is registered.",
                "description": "<p>The dynamic portion of the filter name, <code>$post_type<\/code>, refers to the post type key.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>registered_post_type_post<\/code><\/li> <li><code>registered_post_type_page<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Arguments used to register the post type.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type_object"
                    }
                ]
            }
        },
        {
            "name": "unregistered_post_type",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 1774,
            "doc": {
                "summary": "Fires after a post type was unregistered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post type key.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "post_type_labels_{$post_type}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 2006,
            "doc": {
                "summary": "Filters the labels of a specific post type.",
                "description": "<p>The dynamic portion of the hook name, <code>$post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>post_type_labels_post<\/code><\/li> <li><code>post_type_labels_page<\/code><\/li> <li><code>post_type_labels_attachment<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "see",
                        "content": "for the full list of labels.",
                        "reference": "\\get_post_type_labels()"
                    },
                    {
                        "name": "param",
                        "content": "Object with labels for the post type as member variables.",
                        "types": [
                            "object"
                        ],
                        "variable": "labels"
                    }
                ]
            }
        },
        {
            "name": "is_post_type_viewable",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 2275,
            "doc": {
                "summary": "Filters whether a post type is considered \"viewable\".",
                "description": "<p>The returned filtered value must be a boolean type to ensure <code>is_post_type_viewable()<\/code> only returns a boolean. This strictness is by design to maintain backwards-compatibility and guard against potential type errors in PHP 8.1+. Non-boolean values (even falsey and truthy values) will result in the function returning false.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post type is &quot;viewable&quot; (strict type).",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_viewable"
                    },
                    {
                        "name": "param",
                        "content": "Post type object.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "is_post_status_viewable",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 2323,
            "doc": {
                "summary": "Filters whether a post status is considered \"viewable\".",
                "description": "<p>The returned filtered value must be a boolean type to ensure <code>is_post_status_viewable()<\/code> only returns a boolean. This strictness is by design to maintain backwards-compatibility and guard against potential type errors in PHP 8.1+. Non-boolean values (even falsey and truthy values) will result in the function returning false.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post status is &quot;viewable&quot; (strict type).",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_viewable"
                    },
                    {
                        "name": "param",
                        "content": "Post status object.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "post_status"
                    }
                ]
            }
        },
        {
            "name": "is_sticky",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 2679,
            "doc": {
                "summary": "Filters whether a post is sticky.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether a post is sticky.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_sticky"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "edit_{$field}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 2784,
            "doc": {
                "summary": "Filters the value of a specific post field to edit.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the post field name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the post field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "{$field_no_prefix}_edit_pre",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 2797,
            "doc": {
                "summary": "Filters the value of a specific post field to edit.",
                "description": "<p>The dynamic portion of the hook name, <code>$field_no_prefix<\/code>, refers to the post field name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the post field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "pre_{$field}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 2824,
            "doc": {
                "summary": "Filters the value of a specific post field before saving.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the post field name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the post field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "{$field_no_prefix}_save_pre",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 2836,
            "doc": {
                "summary": "Filters the value of a specific field before saving.",
                "description": "<p>The dynamic portion of the hook name, <code>$field_no_prefix<\/code>, refers to the post field name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the post field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "{$field}_pre",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 2850,
            "doc": {
                "summary": "Filters the value of a specific post field before saving.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the post field name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the post field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "{$field}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 2871,
            "doc": {
                "summary": "Filters the value of a specific post field for display.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the post field name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the prefixed post field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Context for how to sanitize the field.<br>Accepts 'raw', 'edit', 'db', 'display', 'attribute', or 'js'. Default 'display'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "post_stuck",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 2924,
            "doc": {
                "summary": "Fires once a post has been added to the sticky list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the post that was stuck.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "post_unstuck",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 2968,
            "doc": {
                "summary": "Fires once a post has been removed from the sticky list.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the post that was unstuck.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "wp_count_posts",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 3072,
            "doc": {
                "summary": "Filters the post counts by status for the current post type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An object containing the current post_type's post counts by status.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "counts"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "The permission to determine if the posts are 'readable' by the current user.",
                        "types": [
                            "string"
                        ],
                        "variable": "perm"
                    }
                ]
            }
        },
        {
            "name": "wp_count_attachments",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 3122,
            "doc": {
                "summary": "Filters the attachment counts by mime type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An object containing the attachment counts by mime type.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "counts"
                    },
                    {
                        "name": "param",
                        "content": "Array or comma-separated list of MIME patterns.",
                        "types": [
                            "string",
                            "string[]"
                        ],
                        "variable": "mime_type"
                    }
                ]
            }
        },
        {
            "name": "post_mime_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 3226,
            "doc": {
                "summary": "Filters the default list of post mime types.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Default list of post mime types.",
                        "types": [
                            "array"
                        ],
                        "variable": "post_mime_types"
                    }
                ]
            }
        },
        {
            "name": "pre_delete_post",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 3393,
            "doc": {
                "summary": "Filters whether a post deletion should take place.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to go forward with deletion.",
                        "types": [
                            "\\WP_Post",
                            "false",
                            "null"
                        ],
                        "variable": "delete"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether to bypass the Trash.",
                        "types": [
                            "bool"
                        ],
                        "variable": "force_delete"
                    }
                ]
            }
        },
        {
            "name": "before_delete_post",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 3409,
            "doc": {
                "summary": "Fires before a post is deleted, at the start of wp_delete_post().",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_delete_post()"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "postid"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "delete_post",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 3461,
            "doc": {
                "summary": "Fires immediately before a post is deleted from the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "postid"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "deleted_post",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 3477,
            "doc": {
                "summary": "Fires immediately after a post is deleted from the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "postid"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "after_delete_post",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 3500,
            "doc": {
                "summary": "Fires after a post is deleted, at the conclusion of wp_delete_post().",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_delete_post()"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "postid"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "pre_trash_post",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 3572,
            "doc": {
                "summary": "Filters whether a post trashing should take place.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to go forward with trashing.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "trash"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_trash_post",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 3585,
            "doc": {
                "summary": "Fires before a post is sent to the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "trashed_post",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 3610,
            "doc": {
                "summary": "Fires after a post is sent to the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "pre_untrash_post",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 3650,
            "doc": {
                "summary": "Filters whether a post untrashing should take place.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The <code>$previous_status<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Whether to go forward with untrashing.",
                        "types": [
                            "bool",
                            "null"
                        ],
                        "variable": "untrash"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The status of the post at the point where it was trashed.",
                        "types": [
                            "string"
                        ],
                        "variable": "previous_status"
                    }
                ]
            }
        },
        {
            "name": "untrash_post",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 3664,
            "doc": {
                "summary": "Fires before a post is restored from the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The <code>$previous_status<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The status of the post at the point where it was trashed.",
                        "types": [
                            "string"
                        ],
                        "variable": "previous_status"
                    }
                ]
            }
        },
        {
            "name": "wp_untrash_post_status",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 3683,
            "doc": {
                "summary": "Filters the status that a post gets assigned when it is restored from the trash (untrashed).",
                "description": "<p>By default posts that are restored will be assigned a status of 'draft'. Return the value of <code>$previous_status<\/code> in order to assign the status that the post had before it was trashed. The <code>wp_untrash_post_set_previous_status()<\/code> function is available for this.<\/p> <p>Prior to WordPress 5.6.0, restored posts were always assigned their original status.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The new status of the post being restored.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_status"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the post being restored.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The status of the post at the point where it was trashed.",
                        "types": [
                            "string"
                        ],
                        "variable": "previous_status"
                    }
                ]
            }
        },
        {
            "name": "untrashed_post",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 3710,
            "doc": {
                "summary": "Fires after a post is restored from the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The <code>$previous_status<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The status of the post at the point where it was trashed.",
                        "types": [
                            "string"
                        ],
                        "variable": "previous_status"
                    }
                ]
            }
        },
        {
            "name": "trash_post_comments",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 3743,
            "doc": {
                "summary": "Fires before comments are sent to the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "trashed_post_comments",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 3771,
            "doc": {
                "summary": "Fires after comments are sent to the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Array of comment statuses.",
                        "types": [
                            "array"
                        ],
                        "variable": "statuses"
                    }
                ]
            }
        },
        {
            "name": "untrash_post_comments",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 3810,
            "doc": {
                "summary": "Fires before comments are restored for a post from the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "untrashed_post_comments",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 3838,
            "doc": {
                "summary": "Fires after comments are restored for a post from the Trash.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "wp_insert_post_empty_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 4137,
            "doc": {
                "summary": "Filters whether the post should be considered \"empty\".",
                "description": "<p>The post is considered &quot;empty&quot; if both:<\/p> <ol> <li>The post type supports the title, editor, and excerpt fields<\/li> <li>The title, editor, and excerpt fields are all empty<\/li> <\/ol> <p>Returning a truthy value from the filter will effectively short-circuit the new post being inserted and return 0. If $wp_error is true, a WP_Error will be returned instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post should be considered &quot;empty&quot;.",
                        "types": [
                            "bool"
                        ],
                        "variable": "maybe_empty"
                    },
                    {
                        "name": "param",
                        "content": "Array of post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "postarr"
                    }
                ]
            }
        },
        {
            "name": "wp_insert_post_parent",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/post.php",
            "line": 4307,
            "doc": {
                "summary": "Filters the post parent -- used to check for and prevent hierarchy loops.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post parent ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_parent"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Array of parsed post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "new_postarr"
                    },
                    {
                        "name": "param",
                        "content": "Array of sanitized, but otherwise unmodified post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "postarr"
                    }
                ]
            }
        },
        {
            "name": "add_trashed_suffix_to_trashed_posts",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 4333,
            "doc": {
                "summary": "Filters whether or not to add a `__trashed` suffix to trashed posts that match the name of the updated post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to attempt to add the suffix.",
                        "types": [
                            "bool"
                        ],
                        "variable": "add_trashed_suffix"
                    },
                    {
                        "name": "param",
                        "content": "The name of the post being updated.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_name"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "wp_insert_attachment_data",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/post.php",
            "line": 4401,
            "doc": {
                "summary": "Filters attachment post data before it is updated in or added to the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "since",
                        "content": "5.4.1",
                        "description": "The <code>$unsanitized_postarr<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "6.0.0",
                        "description": "The <code>$update<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "An array of slashed, sanitized, and processed attachment post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "An array of slashed and sanitized attachment post data, but not processed.",
                        "types": [
                            "array"
                        ],
                        "variable": "postarr"
                    },
                    {
                        "name": "param",
                        "content": "An array of slashed yet <em>unsanitized<\/em> and unprocessed attachment post data as originally passed to wp_insert_post().",
                        "types": [
                            "array"
                        ],
                        "variable": "unsanitized_postarr"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing attachment post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    }
                ]
            }
        },
        {
            "name": "wp_insert_post_data",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/post.php",
            "line": 4416,
            "doc": {
                "summary": "Filters slashed post data just before it is inserted into the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.4.1",
                        "description": "The <code>$unsanitized_postarr<\/code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "6.0.0",
                        "description": "The <code>$update<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "An array of slashed, sanitized, and processed post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "An array of sanitized (and slashed) but otherwise unmodified post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "postarr"
                    },
                    {
                        "name": "param",
                        "content": "An array of slashed yet <em>unsanitized<\/em> and unprocessed post data as originally passed to wp_insert_post().",
                        "types": [
                            "array"
                        ],
                        "variable": "unsanitized_postarr"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    }
                ]
            }
        },
        {
            "name": "pre_post_update",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 4431,
            "doc": {
                "summary": "Fires immediately before an existing post is updated in the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Array of unslashed post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    }
                ]
            }
        },
        {
            "name": "edit_attachment",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 4615,
            "doc": {
                "summary": "Fires once an existing attachment has been updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "attachment_updated",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 4628,
            "doc": {
                "summary": "Fires once an existing attachment has been updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object following the update.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post_after"
                    },
                    {
                        "name": "param",
                        "content": "Post object before the update.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post_before"
                    }
                ]
            }
        },
        {
            "name": "add_attachment",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 4638,
            "doc": {
                "summary": "Fires once an attachment has been added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "edit_post_{$post->post_type}",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 4661,
            "doc": {
                "summary": "Fires once an existing post has been updated.",
                "description": "<p>The dynamic portion of the hook name, <code>$post-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>edit_post_post<\/code><\/li> <li><code>edit_post_page<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "edit_post",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 4671,
            "doc": {
                "summary": "Fires once an existing post has been updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "post_updated",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 4684,
            "doc": {
                "summary": "Fires once an existing post has been updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object following the update.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post_after"
                    },
                    {
                        "name": "param",
                        "content": "Post object before the update.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post_before"
                    }
                ]
            }
        },
        {
            "name": "save_post_{$post->post_type}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 4704,
            "doc": {
                "summary": "Fires once a post has been saved.",
                "description": "<p>The dynamic portion of the hook name, <code>$post-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>save_post_post<\/code><\/li> <li><code>save_post_page<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    }
                ]
            }
        },
        {
            "name": "save_post",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 4715,
            "doc": {
                "summary": "Fires once a post has been saved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    }
                ]
            }
        },
        {
            "name": "wp_insert_post",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 4726,
            "doc": {
                "summary": "Fires once a post has been saved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    }
                ]
            }
        },
        {
            "name": "pre_wp_unique_post_slug",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/post.php",
            "line": 5005,
            "doc": {
                "summary": "Filters the post slug before it is generated to be unique.",
                "description": "<p>Returning a non-null value will short-circuit the unique slug generation, returning the passed value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Short-circuit return value.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "override_slug"
                    },
                    {
                        "name": "param",
                        "content": "The desired slug (post_name).",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The post status.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_status"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Post parent ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_parent"
                    }
                ]
            }
        },
        {
            "name": "wp_unique_post_slug_is_bad_attachment_slug",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 5032,
            "doc": {
                "summary": "Filters whether the post slug would make a bad attachment slug.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the slug would be bad as an attachment slug.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bad_slug"
                    },
                    {
                        "name": "param",
                        "content": "The post slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    }
                ]
            }
        },
        {
            "name": "wp_unique_post_slug_is_bad_hierarchical_slug",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/post.php",
            "line": 5068,
            "doc": {
                "summary": "Filters whether the post slug would make a bad hierarchical post slug.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post slug would be bad in a hierarchical post context.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bad_slug"
                    },
                    {
                        "name": "param",
                        "content": "The post slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Post parent ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_parent"
                    }
                ]
            }
        },
        {
            "name": "wp_unique_post_slug_is_bad_flat_slug",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 5124,
            "doc": {
                "summary": "Filters whether the post slug would be bad as a flat slug.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post slug would be bad as a flat slug.",
                        "types": [
                            "bool"
                        ],
                        "variable": "bad_slug"
                    },
                    {
                        "name": "param",
                        "content": "The post slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "wp_unique_post_slug",
            "type": "filter",
            "numArgs": 6,
            "path": "\/wp-includes\/post.php",
            "line": 5153,
            "doc": {
                "summary": "Filters the unique post slug.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The post slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "The post status.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_status"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Post parent ID",
                        "types": [
                            "int"
                        ],
                        "variable": "post_parent"
                    },
                    {
                        "name": "param",
                        "content": "The original post slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "original_slug"
                    }
                ]
            }
        },
        {
            "name": "default_category_post_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 5293,
            "doc": {
                "summary": "Filters post types (in addition to 'post') that require a default category.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of post type names. Default empty array.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_types"
                    }
                ]
            }
        },
        {
            "name": "transition_post_status",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 5345,
            "doc": {
                "summary": "Fires when a post is transitioned from one status to another.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "New post status.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_status"
                    },
                    {
                        "name": "param",
                        "content": "Old post status.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_status"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "{$old_status}_to_{$new_status}",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 5363,
            "doc": {
                "summary": "Fires when a post is transitioned from one status to another.",
                "description": "<p>The dynamic portions of the hook name, <code>$new_status<\/code> and <code>$old_status<\/code>, refer to the old and new post statuses, respectively.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>draft_to_publish<\/code><\/li> <li><code>publish_to_trash<\/code><\/li> <li><code>pending_to_draft<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "{$new_status}_{$post->post_type}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 5403,
            "doc": {
                "summary": "Fires when a post is transitioned from one status to another.",
                "description": "<p>The dynamic portions of the hook name, <code>$new_status<\/code> and <code>$post-&gt;post_type<\/code>, refer to the new post status and post type, respectively.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>draft_post<\/code><\/li> <li><code>future_post<\/code><\/li> <li><code>pending_post<\/code><\/li> <li><code>private_post<\/code><\/li> <li><code>publish_post<\/code><\/li> <li><code>trash_post<\/code><\/li> <li><code>draft_page<\/code><\/li> <li><code>future_page<\/code><\/li> <li><code>pending_page<\/code><\/li> <li><code>private_page<\/code><\/li> <li><code>publish_page<\/code><\/li> <li><code>trash_page<\/code><\/li> <li><code>publish_attachment<\/code><\/li> <li><code>trash_attachment<\/code><\/li> <\/ul> <p>Please note: When this action is hooked using a particular post status (like 'publish', as <code>publish_{$post-&gt;post_type}<\/code>), it will fire both when a post is first transitioned to that status from something else, as well as upon subsequent post updates (old and new status are both the same).<\/p> <p>Therefore, if you are looking to only fire a callback when a post is first transitioned to a status, use the {@see 'transition_post_status'} hook instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "5.9.0",
                        "description": "Added <code>$old_status<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Old post status.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_status"
                    }
                ]
            }
        },
        {
            "name": "wp_after_insert_post",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/post.php",
            "line": 5436,
            "doc": {
                "summary": "Fires once a post, its terms and meta data has been saved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "Null for new posts, the WP_Post object prior to the update for updated posts.",
                        "types": [
                            "null",
                            "\\WP_Post"
                        ],
                        "variable": "post_before"
                    }
                ]
            }
        },
        {
            "name": "add_ping",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 5482,
            "doc": {
                "summary": "Filters the new ping URL to add for the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "New ping URL to add.",
                        "types": [
                            "string"
                        ],
                        "variable": "new"
                    }
                ]
            }
        },
        {
            "name": "get_enclosed",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 5522,
            "doc": {
                "summary": "Filters the list of enclosures already enclosed for the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of enclosures for the given post.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "pung"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "get_pung",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 5552,
            "doc": {
                "summary": "Filters the list of already-pinged URLs for the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of URLs already pinged for the given post.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "pung"
                    }
                ]
            }
        },
        {
            "name": "get_to_ping",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 5581,
            "doc": {
                "summary": "Filters the list of URLs yet to ping for the given post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "List of URLs yet to ping.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "to_ping"
                    }
                ]
            }
        },
        {
            "name": "get_page_uri",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 5883,
            "doc": {
                "summary": "Filters the URI for a page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Page URI.",
                        "types": [
                            "string"
                        ],
                        "variable": "uri"
                    },
                    {
                        "name": "param",
                        "content": "Page object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "page"
                    }
                ]
            }
        },
        {
            "name": "get_pages",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 6207,
            "doc": {
                "summary": "Filters the retrieved list of pages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of page objects.",
                        "types": [
                            "\\WP_Post[]"
                        ],
                        "variable": "pages"
                    },
                    {
                        "name": "param",
                        "content": "Array of get_pages() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "pre_delete_attachment",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 6335,
            "doc": {
                "summary": "Filters whether an attachment deletion should take place.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to go forward with deletion.",
                        "types": [
                            "\\WP_Post",
                            "false",
                            "null"
                        ],
                        "variable": "delete"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Whether to bypass the Trash.",
                        "types": [
                            "bool"
                        ],
                        "variable": "force_delete"
                    }
                ]
            }
        },
        {
            "name": "delete_attachment",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 6360,
            "doc": {
                "summary": "Fires before an attachment is deleted, at the start of wp_delete_attachment().",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_metadata",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 6540,
            "doc": {
                "summary": "Filters the attachment meta data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of meta data for the given attachment.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "Attachment post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_update_attachment_metadata",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 6569,
            "doc": {
                "summary": "Filters the updated attachment meta data.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of updated attachment meta data.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "Attachment post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 6644,
            "doc": {
                "summary": "Filters the attachment URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "URL for the given attachment.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Attachment post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_caption",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 6683,
            "doc": {
                "summary": "Filters the attachment caption.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Caption for the given attachment.",
                        "types": [
                            "string"
                        ],
                        "variable": "caption"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "wp_get_attachment_thumb_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 6714,
            "doc": {
                "summary": "Filters the attachment thumbnail URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "URL for the attachment thumbnail.",
                        "types": [
                            "string"
                        ],
                        "variable": "thumbnail_url"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "icon_dir",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 6837,
            "doc": {
                "summary": "Filters the icon directory path.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Icon directory absolute path.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    }
                ]
            }
        },
        {
            "name": "icon_dir_uri",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 6846,
            "doc": {
                "summary": "Filters the icon directory URI.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Icon directory URI.",
                        "types": [
                            "string"
                        ],
                        "variable": "uri"
                    }
                ]
            }
        },
        {
            "name": "icon_dirs",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 6855,
            "doc": {
                "summary": "Filters the array of icon directory URIs.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of icon directory URIs keyed by directory absolute path.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "uris"
                    }
                ]
            }
        },
        {
            "name": "wp_mime_type_icon",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 6924,
            "doc": {
                "summary": "Filters the mime type icon.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the mime type icon.",
                        "types": [
                            "string"
                        ],
                        "variable": "icon"
                    },
                    {
                        "name": "param",
                        "content": "Mime type.",
                        "types": [
                            "string"
                        ],
                        "variable": "mime"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID. Will equal 0 if the function passed the mime type.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "pub_priv_sql_capability",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 7077,
            "doc": {
                "summary": "Filters the capability to read private posts for a custom post type when generating SQL for getting posts by author.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.2.0",
                        "description": "The hook transitioned from &quot;somewhat useless&quot; to &quot;totally useless&quot;."
                    },
                    {
                        "name": "param",
                        "content": "Capability.",
                        "types": [
                            "string"
                        ],
                        "variable": "cap"
                    }
                ]
            }
        },
        {
            "name": "get_lastpostdate",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 7154,
            "doc": {
                "summary": "Filters the most recent time that a post on the site was published.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post_type<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The most recent time that a post was published, in 'Y-m-d H:i:s' format. False on failure.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "lastpostdate"
                    },
                    {
                        "name": "param",
                        "content": "Location to use for getting the post published date.<br>See get_lastpostdate() for accepted <code>$timezone<\/code> values.",
                        "types": [
                            "string"
                        ],
                        "variable": "timezone"
                    },
                    {
                        "name": "param",
                        "content": "The post type to check.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "pre_get_lastpostmodified",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 7186,
            "doc": {
                "summary": "Pre-filter the return value of get_lastpostmodified() before the query is run.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The most recent time that a post was modified, in 'Y-m-d H:i:s' format, or false. Returning anything other than false will short-circuit the function.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "lastpostmodified"
                    },
                    {
                        "name": "param",
                        "content": "Location to use for getting the post modified date.<br>See get_lastpostdate() for accepted <code>$timezone<\/code> values.",
                        "types": [
                            "string"
                        ],
                        "variable": "timezone"
                    },
                    {
                        "name": "param",
                        "content": "The post type to check.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "get_lastpostmodified",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 7211,
            "doc": {
                "summary": "Filters the most recent time that a post on the site was modified.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post_type<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The most recent time that a post was modified, in 'Y-m-d H:i:s' format. False on failure.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "lastpostmodified"
                    },
                    {
                        "name": "param",
                        "content": "Location to use for getting the post modified date.<br>See get_lastpostdate() for accepted <code>$timezone<\/code> values.",
                        "types": [
                            "string"
                        ],
                        "variable": "timezone"
                    },
                    {
                        "name": "param",
                        "content": "The post type to check.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "clean_post_cache",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 7343,
            "doc": {
                "summary": "Fires immediately after the given post's cache is cleaned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "clean_page_cache",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 7355,
            "doc": {
                "summary": "Fires immediately after the given page's cache is cleaned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "clean_attachment_cache",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 7507,
            "doc": {
                "summary": "Fires after the given attachment's cache is cleaned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "private_to_published",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/post.php",
            "line": 7544,
            "doc": {
                "summary": "Fires when a post's status is transitioned from private to published.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "2.3.0",
                        "description": "Use {@see 'private_to_publish'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_publish_post",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/post.php",
            "line": 7602,
            "doc": {
                "summary": "Fires when _publish_post_hook() is called during an XML-RPC request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "wp_get_original_image_path",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 8015,
            "doc": {
                "summary": "Filters the path to the original image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to original image file.",
                        "types": [
                            "string"
                        ],
                        "variable": "original_image"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "wp_get_original_image_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 8057,
            "doc": {
                "summary": "Filters the URL to the original attachment image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "URL to original image.",
                        "types": [
                            "string"
                        ],
                        "variable": "original_image_url"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "use_block_editor_for_post",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 8108,
            "doc": {
                "summary": "Filters whether a post is able to be edited in the block editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post can be edited or not.",
                        "types": [
                            "bool"
                        ],
                        "variable": "use_block_editor"
                    },
                    {
                        "name": "param",
                        "content": "The post being checked.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "use_block_editor_for_post_type",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/post.php",
            "line": 8145,
            "doc": {
                "summary": "Filters whether a post is able to be edited in the block editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post type can be edited or not. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "use_block_editor"
                    },
                    {
                        "name": "param",
                        "content": "The post type being checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "old_slug_redirect_post_id",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/query.php",
            "line": 1093,
            "doc": {
                "summary": "Filters the old slug redirect post ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.3"
                    },
                    {
                        "name": "param",
                        "content": "The redirect post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "old_slug_redirect_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/query.php",
            "line": 1114,
            "doc": {
                "summary": "Filters the old slug redirect URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The redirect URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "rest_request_parameter_order",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-request.php",
            "line": 385,
            "doc": {
                "summary": "Filters the parameter priority order for a REST API request.",
                "description": "<p>The order affects which parameters are checked when using WP_REST_Request::get_param() and family. This acts similarly to PHP's <code>request_order<\/code> setting.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of types to check, in order of priority.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "order"
                    },
                    {
                        "name": "param",
                        "content": "The request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_request_from_url",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-request.php",
            "line": 1059,
            "doc": {
                "summary": "Filters the REST API request generated from a URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Generated request object, or false if URL could not be parsed.",
                        "types": [
                            "\\WP_REST_Request",
                            "false"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "URL the request was generated from.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "rest_response_link_curies",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-response.php",
            "line": 289,
            "doc": {
                "summary": "Filters extra CURIEs available on REST API responses.",
                "description": "<p>CURIEs allow a shortened version of URI relations. This allows a more usable form for custom relations than using the full URI. These work similarly to how XML namespaces work.<\/p> <p>Registered CURIES need to specify a name and URI template. This will automatically transform URI relations into their shortened version.<br>The shortened relation follows the format <code>{name}:{rel}<\/code>. <code>{rel}<\/code> in the URI template will be replaced with the <code>{rel}<\/code> part of the shortened relation.<\/p> <p>For example, a CURIE with name <code>example<\/code> and URI template <code>http:\/\/w.org\/{rel}<\/code> would transform a <code>http:\/\/w.org\/term<\/code> relation into <code>example:term<\/code>.<\/p> <p>Well-behaved clients should expand and normalize these back to their full URI relation, however some naive clients may not resolve these correctly, so adding new CURIEs may break backward compatibility.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Additional CURIEs to register with the REST API.",
                        "types": [
                            "array"
                        ],
                        "variable": "additional"
                    }
                ]
            }
        },
        {
            "name": "rest_authentication_errors",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 189,
            "doc": {
                "summary": "Filters REST API authentication errors.",
                "description": "<p>This is used to pass a WP_Error from an authentication method back to the API.<\/p> <p>Authentication methods should check first if they're being used, as multiple authentication methods can be enabled on a site (cookies, HTTP basic auth, OAuth). If the authentication method hooked in is not actually being attempted, null should be returned to indicate another authentication method should check instead. Similarly, callbacks should ensure the value is <code>null<\/code> before checking for errors.<\/p> <p>A WP_Error instance can be returned if an error occurs, and this should match the format used by API methods internally (that is, the <code>status<\/code> data should be used). A callback can return <code>true<\/code> to indicate that the authentication method was used, and it succeeded.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Error if authentication error, null if authentication method wasn't used, true if authentication succeeded.",
                        "types": [
                            "\\WP_Error",
                            "null",
                            "true"
                        ],
                        "variable": "errors"
                    }
                ]
            }
        },
        {
            "name": "rest_json_encode_options",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 258,
            "doc": {
                "summary": "Filters the JSON encoding options used to send the REST API response.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "JSON encoding options {@see \\json_encode()}.",
                        "types": [
                            "int"
                        ],
                        "variable": "options"
                    },
                    {
                        "name": "param",
                        "content": "Current request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_jsonp_enabled",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 302,
            "doc": {
                "summary": "Filters whether JSONP is enabled for the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether JSONP is enabled. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "jsonp_enabled"
                    }
                ]
            }
        },
        {
            "name": "rest_exposed_cors_headers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 333,
            "doc": {
                "summary": "Filters the list of response headers that are exposed to REST API CORS requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The list of response headers to expose.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "expose_headers"
                    }
                ]
            }
        },
        {
            "name": "rest_allowed_cors_headers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 357,
            "doc": {
                "summary": "Filters the list of request headers that are allowed for REST API CORS requests.",
                "description": "<p>The allowed headers are passed to the browser to specify which headers can be passed to the REST API. By default, we allow the Content-* headers needed to upload files to the media endpoints.<br>As well as the Authorization and Nonce headers for allowing authentication.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The list of request headers to allow.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "allow_headers"
                    }
                ]
            }
        },
        {
            "name": "rest_send_nocache_headers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 368,
            "doc": {
                "summary": "Filters whether to send nocache headers on a REST API request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send no-cache headers.",
                        "types": [
                            "bool"
                        ],
                        "variable": "rest_send_nocache_headers"
                    }
                ]
            }
        },
        {
            "name": "rest_enabled",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 388,
            "endLine": 398,
            "doc": {
                "summary": "Filters whether the REST API is enabled.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "4.7.0",
                        "description": "Use the {@see 'rest_authentication_errors'} filter to restrict access to the REST API."
                    },
                    {
                        "name": "param",
                        "content": "Whether the REST API is enabled. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "rest_enabled"
                    }
                ]
            }
        },
        {
            "name": "rest_post_dispatch",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 465,
            "doc": {
                "summary": "Filters the REST API response.",
                "description": "<p>Allows modification of the response before returning.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Applied to embedded responses."
                    },
                    {
                        "name": "param",
                        "content": "Result to send to the client. Usually a <code>WP_REST_Response<\/code>.",
                        "types": [
                            "\\WP_HTTP_Response"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Server instance.",
                        "types": [
                            "\\WP_REST_Server"
                        ],
                        "variable": "server"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_serve_request",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 494,
            "doc": {
                "summary": "Filters whether the REST API request has already been served.",
                "description": "<p>Allow sending the request manually - by returning true, the API result will not be sent to the client.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the request has already been served.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "served"
                    },
                    {
                        "name": "param",
                        "content": "Result to send to the client. Usually a <code>WP_REST_Response<\/code>.",
                        "types": [
                            "\\WP_HTTP_Response"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "Server instance.",
                        "types": [
                            "\\WP_REST_Server"
                        ],
                        "variable": "server"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_echo_response",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 517,
            "doc": {
                "summary": "Filters the REST API response.",
                "description": "<p>Allows modification of the response data after inserting embedded data (if any) and before echoing the response data.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.1"
                    },
                    {
                        "name": "param",
                        "content": "Response data to send to the client.",
                        "types": [
                            "array"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Server instance.",
                        "types": [
                            "\\WP_REST_Server"
                        ],
                        "variable": "server"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_envelope_response",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 789,
            "doc": {
                "summary": "Filters the enveloped form of a REST API response.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Envelope data.<br>    @type array $body    Response data.<br>    @type int   $status  The 3-digit HTTP status code.<br>    @type array $headers Map of header name to header value.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "envelope"
                    },
                    {
                        "name": "param",
                        "content": "Original response data.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    }
                ]
            }
        },
        {
            "name": "rest_endpoints",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 881,
            "doc": {
                "summary": "Filters the array of available REST API endpoints.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The available endpoints. An array of matching regex patterns, each mapped to an array of callbacks for the endpoint. These take the format <code>'\/path\/regex' =&gt; array( $callback, $bitmask )<\/code> or `'\/path\/regex' =&gt; array( array( $callback, $bitmask ).",
                        "types": [
                            "array"
                        ],
                        "variable": "endpoints"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_dispatch",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 984,
            "doc": {
                "summary": "Filters the pre-calculated result of a REST API dispatch request.",
                "description": "<p>Allow hijacking the request before dispatching by returning a non-empty. The returned value will be used to serve the request instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Response to replace the requested version with. Can be anything a normal endpoint can return, or null to not hijack the request.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Server instance.",
                        "types": [
                            "\\WP_REST_Server"
                        ],
                        "variable": "server"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_request_before_callbacks",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 1144,
            "doc": {
                "summary": "Filters the response before executing any REST API callbacks.",
                "description": "<p>Allows plugins to perform additional validation after a request is initialized and matched to a registered route, but before it is executed.<\/p> <p>Note that this filter will not be called for requests that fail to authenticate or match to a registered route.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Result to send to the client.<br>Usually a WP_REST_Response or WP_Error.",
                        "types": [
                            "\\WP_REST_Response",
                            "\\WP_HTTP_Response",
                            "\\WP_Error",
                            "mixed"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Route handler used for the request.",
                        "types": [
                            "array"
                        ],
                        "variable": "handler"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_dispatch_request",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 1175,
            "doc": {
                "summary": "Filters the REST API dispatch request result.",
                "description": "<p>Allow plugins to override dispatching the request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Added <code>$route<\/code> and <code>$handler<\/code> parameters."
                    },
                    {
                        "name": "param",
                        "content": "Dispatch result, will be used if not empty.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "dispatch_result"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "Route matched for the request.",
                        "types": [
                            "string"
                        ],
                        "variable": "route"
                    },
                    {
                        "name": "param",
                        "content": "Route handler used for the request.",
                        "types": [
                            "array"
                        ],
                        "variable": "handler"
                    }
                ]
            }
        },
        {
            "name": "rest_request_after_callbacks",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 1206,
            "doc": {
                "summary": "Filters the response immediately after executing any REST API callbacks.",
                "description": "<p>Allows plugins to perform any needed cleanup, for example, to undo changes made during the {@see 'rest_request_before_callbacks'} filter.<\/p> <p>Note that this filter will not be called for requests that fail to authenticate or match to a registered route.<\/p> <p>Note that an endpoint's <code>permission_callback<\/code> can still be called after this filter - see <code>rest_send_allow_header()<\/code>.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Result to send to the client.<br>Usually a WP_REST_Response or WP_Error.",
                        "types": [
                            "\\WP_REST_Response",
                            "\\WP_HTTP_Response",
                            "\\WP_Error",
                            "mixed"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Route handler used for the request.",
                        "types": [
                            "array"
                        ],
                        "variable": "handler"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_index",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 1287,
            "doc": {
                "summary": "Filters the REST API root index data.",
                "description": "<p>This contains the data describing the API. This includes information about supported authentication schemes, supported namespaces, routes available on the API, and a small amount of data about the site.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "6.0.0",
                        "description": "Added <code>$request<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Response data.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Request data.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_namespace_index",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 1421,
            "doc": {
                "summary": "Filters the REST API namespace index data.",
                "description": "<p>This typically is just the route data for the namespace, but you can add any data you'd like here.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Response data.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Request data. The namespace is passed as the 'namespace' parameter.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_endpoints_description",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 1450,
            "doc": {
                "summary": "Filters the publicly-visible data for a single REST API route.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Publicly-visible data for the route.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    }
                ]
            }
        },
        {
            "name": "rest_route_data",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 1465,
            "doc": {
                "summary": "Filters the publicly-visible data for REST API routes.",
                "description": "<p>This data is exposed on indexes and can be used by clients or developers to investigate the site and find out how to use it. It acts as a form of self-documentation.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Route data to expose in indexes, keyed by route.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "available"
                    },
                    {
                        "name": "param",
                        "content": "Internal route data as an associative array.",
                        "types": [
                            "array"
                        ],
                        "variable": "routes"
                    }
                ]
            }
        },
        {
            "name": "rest_get_max_batch_size",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/class-wp-rest-server.php",
            "line": 1575,
            "doc": {
                "summary": "Filters the maximum number of REST API requests that can be included in a batch.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The maximum size.",
                        "types": [
                            "int"
                        ],
                        "variable": "max_size"
                    }
                ]
            }
        },
        {
            "name": "rest_after_insert_application_password",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-application-passwords-controller.php",
            "line": 273,
            "doc": {
                "summary": "Fires after a single application password is completely created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated password item.",
                        "types": [
                            "array"
                        ],
                        "variable": "item"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating an application password, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_insert_application_password",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-application-passwords-controller.php",
            "line": 594,
            "doc": {
                "summary": "Filters an application password before it is inserted via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An object representing a single application password prepared for inserting or updating the database.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "prepared"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_application_password",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-application-passwords-controller.php",
            "line": 646,
            "doc": {
                "summary": "Filters the REST API response for an application password.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The application password array.",
                        "types": [
                            "array"
                        ],
                        "variable": "item"
                    },
                    {
                        "name": "param",
                        "content": "The request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_after_insert_attachment",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-attachments-controller.php",
            "line": 200,
            "doc": {
                "summary": "Fires after a single attachment is completely created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "attachment"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating an attachment, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_insert_attachment",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-attachments-controller.php",
            "line": 307,
            "doc": {
                "summary": "Fires after a single attachment is created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "attachment"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating an attachment, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "wp_edited_image_metadata",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-attachments-controller.php",
            "line": 667,
            "doc": {
                "summary": "Filters the meta data for the new image created by editing an existing image.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Meta data for the new image.",
                        "types": [
                            "array"
                        ],
                        "variable": "new_image_meta"
                    },
                    {
                        "name": "param",
                        "content": "Attachment post ID for the new image.",
                        "types": [
                            "int"
                        ],
                        "variable": "new_attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Attachment post ID for the edited (parent) image.",
                        "types": [
                            "int"
                        ],
                        "variable": "attachment_id"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_attachment",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-attachments-controller.php",
            "line": 843,
            "doc": {
                "summary": "Filters an attachment returned from the REST API.",
                "description": "<p>Allows modification of the attachment right before it is returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original attachment post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_autosave",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-autosaves-controller.php",
            "line": 447,
            "doc": {
                "summary": "Filters a revision returned from the REST API.",
                "description": "<p>Allows modification of the revision right before it is returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original revision object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_block_directory_collection_params",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-block-directory-controller.php",
            "line": 326,
            "doc": {
                "summary": "Filters REST API collection parameters for the block directory controller.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "JSON Schema-formatted collection parameters.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_params"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_block_type",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-block-types-controller.php",
            "line": 339,
            "doc": {
                "summary": "Filters a block type returned from the REST API.",
                "description": "<p>Allows modification of the block type data right before it is returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original block type object.",
                        "types": [
                            "\\WP_Block_Type"
                        ],
                        "variable": "block_type"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_comment_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 275,
            "doc": {
                "summary": "Filters WP_Comment_Query arguments when querying comments via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/developer.wordpress.org\/reference\/classes\/wp_comment_query\/"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for WP_Comment_Query.",
                        "types": [
                            "array"
                        ],
                        "variable": "prepared_args"
                    },
                    {
                        "name": "param",
                        "content": "The REST API request.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_allow_anonymous_comments",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 465,
            "doc": {
                "summary": "Filters whether comments can be created via the REST API without authentication.",
                "description": "<p>Enables creating comments for anonymous users.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow anonymous comments to be created. Default <code>false<\/code>.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow_anonymous"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_insert_comment",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 696,
            "doc": {
                "summary": "Filters a comment before it is inserted via the REST API.",
                "description": "<p>Allows modification of the comment right before it is inserted via wp_insert_comment().<br>Returning a WP_Error value from the filter will short-circuit insertion and allow skipping further processing.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.8.0",
                        "description": "<code>$prepared_comment<\/code> can now be a WP_Error to short-circuit insertion."
                    },
                    {
                        "name": "param",
                        "content": "The prepared comment data for wp_insert_comment().",
                        "types": [
                            "array",
                            "\\WP_Error"
                        ],
                        "variable": "prepared_comment"
                    },
                    {
                        "name": "param",
                        "content": "Request used to insert the comment.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_insert_comment",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 727,
            "doc": {
                "summary": "Fires after a comment is created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a comment, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_after_insert_comment",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 758,
            "doc": {
                "summary": "Fires completely after a comment is created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a comment, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_comment_trashable",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 969,
            "doc": {
                "summary": "Filters whether a comment can be trashed via the REST API.",
                "description": "<p>Return false to disable trash support for the comment.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the comment supports trashing.",
                        "types": [
                            "bool"
                        ],
                        "variable": "supports_trash"
                    },
                    {
                        "name": "param",
                        "content": "The comment object being considered for trashing support.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    }
                ]
            }
        },
        {
            "name": "rest_delete_comment",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 1024,
            "doc": {
                "summary": "Fires after a comment is deleted via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The deleted comment data.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "The response returned from the API.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_comment",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 1139,
            "doc": {
                "summary": "Filters a comment returned from the REST API.",
                "description": "<p>Allows modification of the comment right before it is returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "comment"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_preprocess_comment",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 1370,
            "doc": {
                "summary": "Filters a comment added via the REST API after it is prepared for insertion into the database.",
                "description": "<p>Allows modification of the comment right after it is prepared for the database.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The prepared comment data for <code>wp_insert_comment<\/code>.",
                        "types": [
                            "array"
                        ],
                        "variable": "prepared_comment"
                    },
                    {
                        "name": "param",
                        "content": "The current request.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_comment_collection_params",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-comments-controller.php",
            "line": 1694,
            "doc": {
                "summary": "Filters REST API collection parameters for the comments controller.",
                "description": "<p>This filter registers the collection parameter, but does not map the collection parameter to an internal WP_Comment_Query parameter. Use the <code>rest_comment_query<\/code> filter to set WP_Comment_Query parameters.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "JSON Schema-formatted collection parameters.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_params"
                    }
                ]
            }
        },
        {
            "name": "rest_insert_nav_menu_item",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-menu-items-controller.php",
            "line": 151,
            "doc": {
                "summary": "Fires after a single menu item is created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated menu item object.",
                        "types": [
                            "object"
                        ],
                        "variable": "nav_menu_item"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a menu item, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_after_insert_nav_menu_item",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-menu-items-controller.php",
            "line": 181,
            "doc": {
                "summary": "Fires after a single menu item is completely created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated menu item object.",
                        "types": [
                            "object"
                        ],
                        "variable": "nav_menu_item"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a menu item, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_delete_nav_menu_item",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-menu-items-controller.php",
            "line": 314,
            "doc": {
                "summary": "Fires immediately after a single menu item is deleted via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated menu item object.",
                        "types": [
                            "object"
                        ],
                        "variable": "nav_menu_item"
                    },
                    {
                        "name": "param",
                        "content": "The response data.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_insert_nav_menu_item",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-menu-items-controller.php",
            "line": 481,
            "doc": {
                "summary": "Filters a menu item before it is inserted via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An object representing a single menu item prepared for inserting or updating the database.",
                        "types": [
                            "object"
                        ],
                        "variable": "prepared_nav_item"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_nav_menu_item",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-menu-items-controller.php",
            "line": 637,
            "doc": {
                "summary": "Filters the menu item data for a REST API response.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Menu item setup by {@see \\wp_setup_nav_menu_item()}.",
                        "types": [
                            "object"
                        ],
                        "variable": "menu_item"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_menu_location",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-menu-locations-controller.php",
            "line": 209,
            "doc": {
                "summary": "Filters menu location data returned from the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original location object.",
                        "types": [
                            "object"
                        ],
                        "variable": "location"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_block_pattern",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-pattern-directory-controller.php",
            "line": 221,
            "doc": {
                "summary": "Filters the REST API response for a block pattern.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The unprepared block pattern.",
                        "types": [
                            "object"
                        ],
                        "variable": "raw_pattern"
                    },
                    {
                        "name": "param",
                        "content": "The request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_pattern_directory_collection_params",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-pattern-directory-controller.php",
            "line": 375,
            "doc": {
                "summary": "Filter collection parameters for the block pattern directory controller.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "JSON Schema-formatted collection parameters.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_params"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_plugin",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-plugins-controller.php",
            "line": 619,
            "doc": {
                "summary": "Filters plugin data for a REST API response.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The plugin item from {@see \\get_plugin_data()}.",
                        "types": [
                            "array"
                        ],
                        "variable": "item"
                    },
                    {
                        "name": "param",
                        "content": "The request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_status",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-post-statuses-controller.php",
            "line": 284,
            "doc": {
                "summary": "Filters a post status returned from the REST API.",
                "description": "<p>Allows modification of the status data right before it is returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original post status object.",
                        "types": [
                            "object"
                        ],
                        "variable": "status"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_post_type",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-post-types-controller.php",
            "line": 270,
            "doc": {
                "summary": "Filters a post type returned from the REST API.",
                "description": "<p>Allows modification of the post type data right before it is returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original post type object.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_{$this->post_type}_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 360,
            "doc": {
                "summary": "Filters WP_Query arguments when querying posts via the REST API.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_post_query<\/code><\/li> <li><code>rest_page_query<\/code><\/li> <li><code>rest_attachment_query<\/code><\/li> <\/ul> <p>Enables adding extra arguments or setting defaults for a post collection request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.7.0",
                        "description": "Moved after the <code>tax_query<\/code> query arg is generated."
                    },
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/developer.wordpress.org\/reference\/classes\/wp_query\/"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for WP_Query.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The REST API request.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_insert_{$this->post_type}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 708,
            "doc": {
                "summary": "Fires after a single post is created or updated via the REST API.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_insert_post<\/code><\/li> <li><code>rest_insert_page<\/code><\/li> <li><code>rest_insert_attachment<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a post, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_after_insert_{$this->post_type}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 772,
            "doc": {
                "summary": "Fires after a single post is completely created or updated via the REST API.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_after_insert_post<\/code><\/li> <li><code>rest_after_insert_page<\/code><\/li> <li><code>rest_after_insert_attachment<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a post, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_{$this->post_type}_trashable",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 1023,
            "doc": {
                "summary": "Filters whether a post is trashable.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_post_trashable<\/code><\/li> <li><code>rest_page_trashable<\/code><\/li> <li><code>rest_attachment_trashable<\/code><\/li> <\/ul> <p>Pass false to disable Trash support for the post.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post type support trashing.",
                        "types": [
                            "bool"
                        ],
                        "variable": "supports_trash"
                    },
                    {
                        "name": "param",
                        "content": "The Post object being considered for trashing support.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "rest_delete_{$this->post_type}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 1098,
            "doc": {
                "summary": "Fires immediately after a single post is deleted or trashed via the REST API.",
                "description": "<p>They dynamic portion of the hook name, <code>$this-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_delete_post<\/code><\/li> <li><code>rest_delete_page<\/code><\/li> <li><code>rest_delete_attachment<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The deleted or trashed post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "The response data.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_query_var-{$key}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 1126,
            "doc": {
                "summary": "Filters the query_vars used in get_items() for the constructed query.",
                "description": "<p>The dynamic portion of the hook name, <code>$key<\/code>, refers to the query_var key.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The query_var value.",
                        "types": [
                            "string"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_insert_{$this->post_type}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 1395,
            "doc": {
                "summary": "Filters a post before it is inserted via the REST API.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_pre_insert_post<\/code><\/li> <li><code>rest_pre_insert_page<\/code><\/li> <li><code>rest_pre_insert_attachment<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An object representing a single post prepared for inserting or updating the database.",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "prepared_post"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_{$this->post_type}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 2010,
            "doc": {
                "summary": "Filters the post data for a REST API response.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_prepare_post<\/code><\/li> <li><code>rest_prepare_page<\/code><\/li> <li><code>rest_prepare_attachment<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_{$this->post_type}_item_schema",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 2611,
            "doc": {
                "summary": "Filters the post's schema.",
                "description": "<p>The dynamic portion of the filter, <code>$this-&gt;post_type<\/code>, refers to the post type slug for the controller.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_post_item_schema<\/code><\/li> <li><code>rest_page_item_schema<\/code><\/li> <li><code>rest_attachment_item_schema<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Item schema data.",
                        "types": [
                            "array"
                        ],
                        "variable": "schema"
                    }
                ]
            }
        },
        {
            "name": "rest_{$this->post_type}_collection_params",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-posts-controller.php",
            "line": 2948,
            "doc": {
                "summary": "Filters collection parameters for the posts controller.",
                "description": "<p>The dynamic part of the filter <code>$this-&gt;post_type<\/code> refers to the post type slug for the controller.<\/p> <p>This filter registers the collection parameter, but does not map the collection parameter to an internal WP<em>Query parameter. Use the `rest<\/em>{$this-&gt;post_type}_query` filter to set WP_Query parameters.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "JSON Schema-formatted collection parameters.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_params"
                    },
                    {
                        "name": "param",
                        "content": "Post type object.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "rest_delete_revision",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-revisions-controller.php",
            "line": 484,
            "doc": {
                "summary": "Fires after a revision is deleted via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The revision object (if it was deleted or moved to the Trash successfully) or false or null (failure). If the revision was moved to the Trash, $result represents its new state; if it was deleted, $result represents its state before deletion.",
                        "types": [
                            "\\WP_Post",
                            "false",
                            "null"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_revision",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-revisions-controller.php",
            "line": 642,
            "doc": {
                "summary": "Filters a revision returned from the REST API.",
                "description": "<p>Allows modification of the revision right before it is returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original revision object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_get_setting",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-settings-controller.php",
            "line": 99,
            "doc": {
                "summary": "Filters the value of a setting recognized by the REST API.",
                "description": "<p>Allow hijacking the setting value and overriding the built-in behavior by returning a non-null value.  The returned value will be presented as the setting value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Value to use for the requested setting. Can be a scalar matching the registered schema for the setting, or null to follow the default get_option() behavior.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Setting name (as shown in REST API responses).",
                        "types": [
                            "string"
                        ],
                        "variable": "name"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to register_setting() for this setting.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_update_setting",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-settings-controller.php",
            "line": 170,
            "doc": {
                "summary": "Filters whether to preempt a setting value update via the REST API.",
                "description": "<p>Allows hijacking the setting update logic and overriding the built-in behavior by returning true.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to override the default behavior for updating the value of a setting.",
                        "types": [
                            "bool"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Setting name (as shown in REST API responses).",
                        "types": [
                            "string"
                        ],
                        "variable": "name"
                    },
                    {
                        "name": "param",
                        "content": "Updated setting value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to register_setting() for this setting.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "rest_save_sidebar",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-sidebars-controller.php",
            "line": 251,
            "doc": {
                "summary": "Fires after a sidebar is updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The updated sidebar.",
                        "types": [
                            "array"
                        ],
                        "variable": "sidebar"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_sidebar",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-sidebars-controller.php",
            "line": 388,
            "doc": {
                "summary": "Filters the REST API response for a sidebar.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The raw sidebar data.",
                        "types": [
                            "array"
                        ],
                        "variable": "raw_sidebar"
                    },
                    {
                        "name": "param",
                        "content": "The request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "site_health_test_rest_capability_{$check}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-site-health-controller.php",
            "line": 199,
            "doc": {
                "summary": "Filters the capability needed to run a given Site Health check.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The default capability required for this check.",
                        "types": [
                            "string"
                        ],
                        "variable": "default_capability"
                    },
                    {
                        "name": "param",
                        "content": "The Site Health check being performed.",
                        "types": [
                            "string"
                        ],
                        "variable": "check"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_taxonomy",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-taxonomies-controller.php",
            "line": 290,
            "doc": {
                "summary": "Filters a taxonomy returned from the REST API.",
                "description": "<p>Allows modification of the taxonomy data right before it is returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original taxonomy object.",
                        "types": [
                            "\\WP_Taxonomy"
                        ],
                        "variable": "item"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_{$this->taxonomy}_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-terms-controller.php",
            "line": 318,
            "doc": {
                "summary": "Filters get_terms() arguments when querying terms via the REST API.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_category_query<\/code><\/li> <li><code>rest_post_tag_query<\/code><\/li> <\/ul> <p>Enables adding extra arguments or setting defaults for a terms collection request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/developer.wordpress.org\/reference\/functions\/get_terms\/"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for get_terms().",
                        "types": [
                            "array"
                        ],
                        "variable": "prepared_args"
                    },
                    {
                        "name": "param",
                        "content": "The REST API request.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_insert_{$this->taxonomy}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-terms-controller.php",
            "line": 559,
            "doc": {
                "summary": "Fires after a single term is created or updated via the REST API.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_insert_category<\/code><\/li> <li><code>rest_insert_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a term, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_after_insert_{$this->taxonomy}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-terms-controller.php",
            "line": 594,
            "doc": {
                "summary": "Fires after a single term is completely created or updated via the REST API.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_after_insert_category<\/code><\/li> <li><code>rest_after_insert_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a term, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_delete_{$this->taxonomy}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-terms-controller.php",
            "line": 796,
            "doc": {
                "summary": "Fires after a single term is deleted via the REST API.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_delete_category<\/code><\/li> <li><code>rest_delete_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The deleted term.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "The response data.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_insert_{$this->taxonomy}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-terms-controller.php",
            "line": 859,
            "doc": {
                "summary": "Filters term data before inserting term via the REST API.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_pre_insert_category<\/code><\/li> <li><code>rest_pre_insert_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "object"
                        ],
                        "variable": "prepared_term"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_{$this->taxonomy}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-terms-controller.php",
            "line": 940,
            "doc": {
                "summary": "Filters the term data for a REST API response.",
                "description": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>rest_prepare_category<\/code><\/li> <li><code>rest_prepare_post_tag<\/code><\/li> <\/ul> <p>Allows modification of the term data right before it is returned.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The original term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "item"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_{$this->taxonomy}_collection_params",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-terms-controller.php",
            "line": 1193,
            "doc": {
                "summary": "Filters collection parameters for the terms controller.",
                "description": "<p>The dynamic part of the filter <code>$this-&gt;taxonomy<\/code> refers to the taxonomy slug for the controller.<\/p> <p>This filter registers the collection parameter, but does not map the collection parameter to an internal WP_Term<em>Query parameter.  Use the `rest<\/em>{$this-&gt;taxonomy}_query` filter to set WP_Term_Query parameters.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "JSON Schema-formatted collection parameters.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_params"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy object.",
                        "types": [
                            "\\WP_Taxonomy"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_theme",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-themes-controller.php",
            "line": 347,
            "doc": {
                "summary": "Filters theme data returned from the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "Theme object used to create response.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "theme"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_themes_collection_params",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-themes-controller.php",
            "line": 628,
            "doc": {
                "summary": "Filters REST API collection parameters for the themes controller.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "JSON Schema-formatted collection parameters.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_params"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_url_details",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-url-details-controller.php",
            "line": 187,
            "doc": {
                "summary": "Filters the URL data for the response.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The requested URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "HTTP response body from the remote URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "remote_url_response"
                    }
                ]
            }
        },
        {
            "name": "rest_url_details_http_request_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-url-details-controller.php",
            "line": 252,
            "doc": {
                "summary": "Filters the HTTP request args for URL data retrieval.",
                "description": "<p>Can be used to adjust response size limit and other WP_Http::request() args.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Arguments used for the HTTP request.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The attempted URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "rest_url_details_cache_expiration",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-url-details-controller.php",
            "line": 479,
            "doc": {
                "summary": "Filters the cache expiration.",
                "description": "<p>Can be used to adjust the time until expiration in seconds for the cache of the data retrieved for the given URL.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The time until cache expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "ttl"
                    }
                ]
            }
        },
        {
            "name": "rest_user_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php",
            "line": 333,
            "doc": {
                "summary": "Filters WP_User_Query arguments when querying users via the REST API.",
                "tags": [
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/developer.wordpress.org\/reference\/classes\/wp_user_query\/"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for WP_User_Query.",
                        "types": [
                            "array"
                        ],
                        "variable": "prepared_args"
                    },
                    {
                        "name": "param",
                        "content": "The REST API request.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_insert_user",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php",
            "line": 618,
            "doc": {
                "summary": "Fires immediately after a user is created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated user object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a user, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_after_insert_user",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php",
            "line": 650,
            "doc": {
                "summary": "Fires after a user is completely created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated user object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a user, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_delete_user",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php",
            "line": 940,
            "doc": {
                "summary": "Fires immediately after a user is deleted via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The user data.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The response returned from the API.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_user",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php",
            "line": 1083,
            "doc": {
                "summary": "Filters user data returned from the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "User object used to create response.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_pre_insert_user",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php",
            "line": 1183,
            "doc": {
                "summary": "Filters user data before insertion via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "User object.",
                        "types": [
                            "object"
                        ],
                        "variable": "prepared_user"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_user_collection_params",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-users-controller.php",
            "line": 1606,
            "doc": {
                "summary": "Filters REST API collection parameters for the users controller.",
                "description": "<p>This filter registers the collection parameter, but does not map the collection parameter to an internal WP_User_Query parameter.  Use the <code>rest_user_query<\/code> filter to set WP_User_Query arguments.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "JSON Schema-formatted collection parameters.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_params"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_widget_type",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-widget-types-controller.php",
            "line": 351,
            "doc": {
                "summary": "Filters the REST API response for a widget type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The array of widget data.",
                        "types": [
                            "array"
                        ],
                        "variable": "widget_type"
                    },
                    {
                        "name": "param",
                        "content": "The request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_delete_widget",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-widgets-controller.php",
            "line": 468,
            "doc": {
                "summary": "Fires after a widget is deleted via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the widget marked for deletion.",
                        "types": [
                            "string"
                        ],
                        "variable": "widget_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the sidebar the widget was deleted from.",
                        "types": [
                            "string"
                        ],
                        "variable": "sidebar_id"
                    },
                    {
                        "name": "param",
                        "content": "The response data, or WP_Error object on failure.",
                        "types": [
                            "\\WP_REST_Response",
                            "\\WP_Error"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_after_save_widget",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-widgets-controller.php",
            "line": 649,
            "doc": {
                "summary": "Fires after a widget is created or updated via the REST API.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the widget being saved.",
                        "types": [
                            "string"
                        ],
                        "variable": "id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the sidebar containing the widget being saved.",
                        "types": [
                            "string"
                        ],
                        "variable": "sidebar_id"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a widget, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "creating"
                    }
                ]
            }
        },
        {
            "name": "rest_prepare_widget",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/rest-api\/endpoints\/class-wp-rest-widgets-controller.php",
            "line": 742,
            "doc": {
                "summary": "Filters the REST API response for a widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The response object, or WP_Error object on failure.",
                        "types": [
                            "\\WP_REST_Response",
                            "\\WP_Error"
                        ],
                        "variable": "response"
                    },
                    {
                        "name": "param",
                        "content": "The registered widget data.",
                        "types": [
                            "array"
                        ],
                        "variable": "widget"
                    },
                    {
                        "name": "param",
                        "content": "Request used to generate the response.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_post_format_search_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/search\/class-wp-rest-post-format-search-handler.php",
            "line": 58,
            "doc": {
                "summary": "Filters the query arguments for a REST API search request.",
                "description": "<p>Enables adding extra arguments or setting defaults for a post format search request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Key value array of query var to query value.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_args"
                    },
                    {
                        "name": "param",
                        "content": "The request used.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_post_search_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/search\/class-wp-rest-post-search-handler.php",
            "line": 90,
            "doc": {
                "summary": "Filters the query arguments for a REST API search request.",
                "description": "<p>Enables adding extra arguments or setting defaults for a post search request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Key value array of query var to query value.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_args"
                    },
                    {
                        "name": "param",
                        "content": "The request used.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "rest_term_search_query",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api\/search\/class-wp-rest-term-search-handler.php",
            "line": 91,
            "doc": {
                "summary": "Filters the query arguments for a REST API search request.",
                "description": "<p>Enables adding extra arguments or setting defaults for a term search request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Key value array of query var to query value.",
                        "types": [
                            "array"
                        ],
                        "variable": "query_args"
                    },
                    {
                        "name": "param",
                        "content": "The request used.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "wp_rest_search_handlers",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api.php",
            "line": 307,
            "doc": {
                "summary": "Filters the search handlers to use in the REST search controller.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "List of search handlers to use in the controller. Each search handler instance must extend the <code>WP_REST_Search_Handler<\/code> class.<br>Default is only a handler for posts.",
                        "types": [
                            "array"
                        ],
                        "variable": "search_handlers"
                    }
                ]
            }
        },
        {
            "name": "rest_url_prefix",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api.php",
            "line": 431,
            "doc": {
                "summary": "Filters the REST URL prefix.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "URL prefix. Default 'wp-json'.",
                        "types": [
                            "string"
                        ],
                        "variable": "prefix"
                    }
                ]
            }
        },
        {
            "name": "rest_url",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/rest-api.php",
            "line": 505,
            "doc": {
                "summary": "Filters the REST URL.",
                "description": "<p>Use this filter to adjust the url returned by the get_rest_url() function.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "REST URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    },
                    {
                        "name": "param",
                        "content": "REST route.",
                        "types": [
                            "string"
                        ],
                        "variable": "path"
                    },
                    {
                        "name": "param",
                        "content": "Blog ID.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "blog_id"
                    },
                    {
                        "name": "param",
                        "content": "Sanitization scheme.",
                        "types": [
                            "string"
                        ],
                        "variable": "scheme"
                    }
                ]
            }
        },
        {
            "name": "wp_rest_server_class",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api.php",
            "line": 564,
            "doc": {
                "summary": "Filters the REST Server Class.",
                "description": "<p>This filter allows you to adjust the server class used by the REST API, using a different class to handle requests.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the server class. Default 'WP_REST_Server'.",
                        "types": [
                            "string"
                        ],
                        "variable": "class_name"
                    }
                ]
            }
        },
        {
            "name": "rest_api_init",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api.php",
            "line": 577,
            "doc": {
                "summary": "Fires when preparing to serve a REST API request.",
                "description": "<p>Endpoint objects should be created and register their hooks on this action rather than another action to ensure they're only loaded when needed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Server object.",
                        "types": [
                            "\\WP_REST_Server"
                        ],
                        "variable": "wp_rest_server"
                    }
                ]
            }
        },
        {
            "name": "rest_avatar_sizes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api.php",
            "line": 1242,
            "doc": {
                "summary": "Filters the REST avatar sizes.",
                "description": "<p>Use this filter to adjust the array of sizes returned by the <code>rest_get_avatar_sizes<\/code> function.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of int values that are the pixel sizes for avatars.<br>Default <code>[ 24, 48, 96 ]<\/code>.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "sizes"
                    }
                ]
            }
        },
        {
            "name": "rest_route_for_post",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api.php",
            "line": 3113,
            "doc": {
                "summary": "Filters the REST API route for a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The route path.",
                        "types": [
                            "string"
                        ],
                        "variable": "route"
                    },
                    {
                        "name": "param",
                        "content": "The post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "rest_route_for_post_type_items",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api.php",
            "line": 3147,
            "doc": {
                "summary": "Filters the REST API route for a post type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The route path.",
                        "types": [
                            "string"
                        ],
                        "variable": "route"
                    },
                    {
                        "name": "param",
                        "content": "The post type object.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "rest_route_for_term",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api.php",
            "line": 3181,
            "doc": {
                "summary": "Filters the REST API route for a term.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The route path.",
                        "types": [
                            "string"
                        ],
                        "variable": "route"
                    },
                    {
                        "name": "param",
                        "content": "The term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "term"
                    }
                ]
            }
        },
        {
            "name": "rest_route_for_taxonomy_items",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/rest-api.php",
            "line": 3214,
            "doc": {
                "summary": "Filters the REST API route for a taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The route path.",
                        "types": [
                            "string"
                        ],
                        "variable": "route"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy object.",
                        "types": [
                            "\\WP_Taxonomy"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "rest_queried_resource_route",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rest-api.php",
            "line": 3242,
            "doc": {
                "summary": "Filters the REST route for the currently queried object.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The route with a leading slash, or an empty string.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "_wp_post_revision_fields",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/revision.php",
            "line": 54,
            "doc": {
                "summary": "Filters the list of fields saved in post revisions.",
                "description": "<p>Included by default: 'post_title', 'post_content' and 'post_excerpt'.<\/p> <p>Disallowed fields: 'ID', 'post_name', 'post_parent', 'post_date', 'post_date_gmt', 'post_status', 'post_type', 'comment_count', and 'post_author'.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The <code>$post<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "List of fields to revision. Contains 'post_title', 'post_content', and 'post_excerpt' by default.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "fields"
                    },
                    {
                        "name": "param",
                        "content": "A post array being processed for insertion as a post revision.",
                        "types": [
                            "array"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_save_post_revision_check_for_changes",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/revision.php",
            "line": 160,
            "doc": {
                "summary": "Filters whether the post has changed since the latest revision.",
                "description": "<p>By default a revision is saved only if one of the revisioned fields has changed.<br>This filter can override that so a revision is saved even if nothing has changed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to check for changes before saving a new revision.<br>Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "check_for_changes"
                    },
                    {
                        "name": "param",
                        "content": "The latest revision post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "latest_revision"
                    },
                    {
                        "name": "param",
                        "content": "The post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_save_post_revision_post_has_changed",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/revision.php",
            "line": 182,
            "doc": {
                "summary": "Filters whether a post has changed.",
                "description": "<p>By default a revision is saved only if one of the revisioned fields has changed.<br>This filter allows for additional checks to determine if there were changes.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the post has changed.",
                        "types": [
                            "bool"
                        ],
                        "variable": "post_has_changed"
                    },
                    {
                        "name": "param",
                        "content": "The latest revision post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "latest_revision"
                    },
                    {
                        "name": "param",
                        "content": "The post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_save_post_revision_revisions_before_deletion",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/revision.php",
            "line": 211,
            "endLine": 215,
            "doc": {
                "summary": "Filters the revisions to be considered for deletion.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of revisions, or an empty array if none.",
                        "types": [
                            "\\WP_Post[]"
                        ],
                        "variable": "revisions"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the post to save as a revision.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    }
                ]
            }
        },
        {
            "name": "_wp_put_post_revision",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/revision.php",
            "line": 365,
            "doc": {
                "summary": "Fires once a revision has been saved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post revision ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "revision_id"
                    }
                ]
            }
        },
        {
            "name": "wp_restore_post_revision",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/revision.php",
            "line": 459,
            "doc": {
                "summary": "Fires after a post revision has been restored.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post revision ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "revision_id"
                    }
                ]
            }
        },
        {
            "name": "wp_delete_post_revision",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/revision.php",
            "line": 492,
            "doc": {
                "summary": "Fires once a post revision has been deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post revision ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "revision_id"
                    },
                    {
                        "name": "param",
                        "content": "Post revision object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "revision"
                    }
                ]
            }
        },
        {
            "name": "wp_revisions_to_keep",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/revision.php",
            "line": 678,
            "doc": {
                "summary": "Filters the number of revisions to save for the given post.",
                "description": "<p>Overrides the value of WP_POST_REVISIONS.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of revisions to store.",
                        "types": [
                            "int"
                        ],
                        "variable": "num"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "wp_{$post->post_type}_revisions_to_keep",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/revision.php",
            "line": 698,
            "doc": {
                "summary": "Filters the number of revisions to save for the given post by its post type.",
                "description": "<p>Overrides both the value of WP_POST_REVISIONS and the {@see 'wp_revisions_to_keep'} filter.<\/p> <p>The dynamic portion of the hook name, <code>$post-&gt;post_type<\/code>, refers to the post type slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>wp_post_revisions_to_keep<\/code><\/li> <li><code>wp_page_revisions_to_keep<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Number of revisions to store.",
                        "types": [
                            "int"
                        ],
                        "variable": "num"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    }
                ]
            }
        },
        {
            "name": "url_to_postid",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/rewrite.php",
            "line": 501,
            "doc": {
                "summary": "Filters the URL to derive the post ID from.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The URL to derive the post ID from.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "wp_robots",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/robots-template.php",
            "line": 32,
            "doc": {
                "summary": "Filters the directives to be included in the 'robots' meta tag.",
                "description": "<p>The meta tag will only be included as necessary.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of directives. Every key must be the name of the directive, and the corresponding value must either be a string to provide as value for the directive or a boolean <code>true<\/code> if it is a boolean directive, i.e. without a value.",
                        "types": [
                            "array"
                        ],
                        "variable": "robots"
                    }
                ]
            }
        },
        {
            "name": "load_feed_engine",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/rss.php",
            "line": 27,
            "doc": {
                "summary": "Fires before MagpieRSS is loaded, to optionally replace it.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "heartbeat_settings",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 801,
            "doc": {
                "summary": "Filters the Heartbeat settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Heartbeat settings array.",
                        "types": [
                            "array"
                        ],
                        "variable": "settings"
                    }
                ]
            }
        },
        {
            "name": "mejs_settings",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 1129,
            "doc": {
                "summary": "Filters the MediaElement configuration settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "MediaElement settings array.",
                        "types": [
                            "array"
                        ],
                        "variable": "mejs_settings"
                    }
                ]
            }
        },
        {
            "name": "print_head_scripts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2042,
            "doc": {
                "summary": "Filters whether to print the head scripts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to print the head scripts. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "print"
                    }
                ]
            }
        },
        {
            "name": "print_footer_scripts",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2077,
            "doc": {
                "summary": "Filters whether to print the footer scripts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to print the footer scripts. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "print"
                    }
                ]
            }
        },
        {
            "name": "wp_print_footer_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2177,
            "doc": {
                "summary": "Fires when footer scripts are printed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "wp_enqueue_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2194,
            "doc": {
                "summary": "Fires when scripts and styles are enqueued.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "print_admin_styles",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2222,
            "doc": {
                "summary": "Filters whether to print the admin styles.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to print the admin styles. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "print"
                    }
                ]
            }
        },
        {
            "name": "print_late_styles",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2258,
            "doc": {
                "summary": "Filters whether to print the styles queued too late for the HTML head.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to print the 'late' styles. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "print"
                    }
                ]
            }
        },
        {
            "name": "enqueue_block_assets",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2390,
            "doc": {
                "summary": "Fires after enqueuing block assets for both editor and front-end.",
                "description": "<p>Call <code>add_action<\/code> on any hook before 'wp_enqueue_scripts'.<\/p> <p>In the function call you supply, simply use <code>wp_enqueue_script<\/code> and <code>wp_enqueue_style<\/code> to add your functionality to the Gutenberg editor.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    }
                ]
            }
        },
        {
            "name": "should_load_block_editor_scripts_and_styles",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2534,
            "doc": {
                "summary": "Filters the flag that decides whether or not block editor scripts and styles are going to be enqueued on the current screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Current value of the flag.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_block_editor_screen"
                    }
                ]
            }
        },
        {
            "name": "should_load_separate_core_block_assets",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2574,
            "doc": {
                "summary": "Filters whether block styles should be loaded separately.",
                "description": "<p>Returning false loads all core block assets, regardless of whether they are rendered in a page or not. Returning true loads core block assets only when they are rendered.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether separate assets will be loaded.<br>Default false (all block assets are loaded, even when not used).",
                        "types": [
                            "bool"
                        ],
                        "variable": "load_separate_assets"
                    }
                ]
            }
        },
        {
            "name": "wp_script_attributes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2781,
            "doc": {
                "summary": "Filters attributes to be added to a script tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Key-value pairs representing <code>&lt;script&gt;<\/code> tag attributes.<br>Only the attribute name is added to the <code>&lt;script&gt;<\/code> tag for entries with a boolean value, and that are true.",
                        "types": [
                            "array"
                        ],
                        "variable": "attributes"
                    }
                ]
            }
        },
        {
            "name": "wp_inline_script_attributes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2826,
            "doc": {
                "summary": "Filters attributes to be added to a script tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Key-value pairs representing <code>&lt;script&gt;<\/code> tag attributes.<br>Only the attribute name is added to the <code>&lt;script&gt;<\/code> tag for entries with a boolean value, and that are true.",
                        "types": [
                            "array"
                        ],
                        "variable": "attributes"
                    },
                    {
                        "name": "param",
                        "content": "Inline JavaScript code.",
                        "types": [
                            "string"
                        ],
                        "variable": "javascript"
                    }
                ]
            }
        },
        {
            "name": "styles_inline_size_limit",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/script-loader.php",
            "line": 2871,
            "doc": {
                "summary": "The maximum size of inlined styles in bytes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The file-size threshold, in bytes. Default 20000.",
                        "types": [
                            "int"
                        ],
                        "variable": "total_inline_limit"
                    }
                ]
            }
        },
        {
            "name": "pre_do_shortcode_tag",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/shortcodes.php",
            "line": 348,
            "doc": {
                "summary": "Filters whether to call a shortcode callback.",
                "description": "<p>Returning a non-false value from filter will short-circuit the shortcode generation process, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Short-circuit return value. Either false or the value to replace the shortcode with.",
                        "types": [
                            "false",
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Shortcode name.",
                        "types": [
                            "string"
                        ],
                        "variable": "tag"
                    },
                    {
                        "name": "param",
                        "content": "Shortcode attributes array or empty string.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "Regular expression match array.",
                        "types": [
                            "array"
                        ],
                        "variable": "m"
                    }
                ]
            }
        },
        {
            "name": "do_shortcode_tag",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/shortcodes.php",
            "line": 367,
            "doc": {
                "summary": "Filters the output created by a shortcode callback.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Shortcode output.",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    },
                    {
                        "name": "param",
                        "content": "Shortcode name.",
                        "types": [
                            "string"
                        ],
                        "variable": "tag"
                    },
                    {
                        "name": "param",
                        "content": "Shortcode attributes array or empty string.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "Regular expression match array.",
                        "types": [
                            "array"
                        ],
                        "variable": "m"
                    }
                ]
            }
        },
        {
            "name": "shortcode_atts_{$shortcode}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/shortcodes.php",
            "line": 609,
            "doc": {
                "summary": "Filters shortcode attributes.",
                "description": "<p>If the third parameter of the shortcode_atts() function is present then this filter is available.<br>The third parameter, $shortcode, is the name of the shortcode.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$shortcode<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The output array of shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "out"
                    },
                    {
                        "name": "param",
                        "content": "The supported attributes and their defaults.",
                        "types": [
                            "array"
                        ],
                        "variable": "pairs"
                    },
                    {
                        "name": "param",
                        "content": "The user defined shortcode attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "atts"
                    },
                    {
                        "name": "param",
                        "content": "The shortcode name.",
                        "types": [
                            "string"
                        ],
                        "variable": "shortcode"
                    }
                ]
            }
        },
        {
            "name": "strip_shortcodes_tagnames",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/shortcodes.php",
            "line": 649,
            "doc": {
                "summary": "Filters the list of shortcode tags to remove from the content.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of shortcode tags to remove.",
                        "types": [
                            "array"
                        ],
                        "variable": "tags_to_remove"
                    },
                    {
                        "name": "param",
                        "content": "Content shortcodes are being removed from.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_index_entry",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/sitemaps\/class-wp-sitemaps-provider.php",
            "line": 126,
            "doc": {
                "summary": "Filters the sitemap entry for the sitemap index.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Sitemap entry for the post.",
                        "types": [
                            "array"
                        ],
                        "variable": "sitemap_entry"
                    },
                    {
                        "name": "param",
                        "content": "Object empty name.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    },
                    {
                        "name": "param",
                        "content": "Object subtype name.<br>Empty string if the object type does not support subtypes.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_subtype"
                    },
                    {
                        "name": "param",
                        "content": "Page number of results.",
                        "types": [
                            "int"
                        ],
                        "variable": "page"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_add_provider",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/sitemaps\/class-wp-sitemaps-registry.php",
            "line": 50,
            "doc": {
                "summary": "Filters the sitemap provider before it is added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Instance of a WP_Sitemaps_Provider.",
                        "types": [
                            "\\WP_Sitemaps_Provider"
                        ],
                        "variable": "provider"
                    },
                    {
                        "name": "param",
                        "content": "Name of the sitemap provider.",
                        "types": [
                            "string"
                        ],
                        "variable": "name"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_stylesheet_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/class-wp-sitemaps-renderer.php",
            "line": 84,
            "doc": {
                "summary": "Filters the URL for the sitemap stylesheet.",
                "description": "<p>If a falsey value is returned, no stylesheet will be used and the &quot;raw&quot; XML of the sitemap will be displayed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Full URL for the sitemaps XSL file.",
                        "types": [
                            "string"
                        ],
                        "variable": "sitemap_url"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_stylesheet_index_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/class-wp-sitemaps-renderer.php",
            "line": 115,
            "doc": {
                "summary": "Filters the URL for the sitemap index stylesheet.",
                "description": "<p>If a falsey value is returned, no stylesheet will be used and the &quot;raw&quot; XML of the sitemap index will be displayed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Full URL for the sitemaps index XSL file.",
                        "types": [
                            "string"
                        ],
                        "variable": "sitemap_url"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_stylesheet_content",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/class-wp-sitemaps-stylesheet.php",
            "line": 151,
            "doc": {
                "summary": "Filters the content of the sitemap stylesheet.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Full content for the XML stylesheet.",
                        "types": [
                            "string"
                        ],
                        "variable": "xsl_content"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_stylesheet_index_content",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/class-wp-sitemaps-stylesheet.php",
            "line": 249,
            "doc": {
                "summary": "Filters the content of the sitemap index stylesheet.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Full content for the XML stylesheet.",
                        "types": [
                            "string"
                        ],
                        "variable": "xsl_content"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_stylesheet_css",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/class-wp-sitemaps-stylesheet.php",
            "line": 315,
            "doc": {
                "summary": "Filters the CSS only for the sitemap stylesheet.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "CSS to be applied to default XSL file.",
                        "types": [
                            "string"
                        ],
                        "variable": "css"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_enabled",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/class-wp-sitemaps.php",
            "line": 105,
            "doc": {
                "summary": "Filters whether XML Sitemaps are enabled or not.",
                "description": "<p>When XML Sitemaps are disabled via this filter, rewrite rules are still in place to ensure a 404 is returned.<\/p>",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Sitemaps::register_rewrites()"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether XML Sitemaps are enabled or not.<br>Defaults to true for public sites.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_enabled"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_post_types",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-posts.php",
            "line": 49,
            "doc": {
                "summary": "Filters the list of post object sub types available within the sitemap.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of registered post type objects keyed by their name.",
                        "types": [
                            "\\WP_Post_Type[]"
                        ],
                        "variable": "post_types"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_posts_pre_url_list",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-posts.php",
            "line": 87,
            "endLine": 92,
            "doc": {
                "summary": "Filters the posts URL list before it is generated.",
                "description": "<p>Returning a non-null value will effectively short-circuit the generation, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The URL list. Default null.",
                        "types": [
                            "array[]",
                            "null"
                        ],
                        "variable": "url_list"
                    },
                    {
                        "name": "param",
                        "content": "Post type name.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Page of results.",
                        "types": [
                            "int"
                        ],
                        "variable": "page_num"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_posts_show_on_front_entry",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-posts.php",
            "line": 122,
            "doc": {
                "summary": "Filters the sitemap entry for the home page when the 'show_on_front' option equals 'posts'.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Sitemap entry for the home page.",
                        "types": [
                            "array"
                        ],
                        "variable": "sitemap_entry"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_posts_entry",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-posts.php",
            "line": 140,
            "doc": {
                "summary": "Filters the sitemap entry for an individual post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Sitemap entry for the post.",
                        "types": [
                            "array"
                        ],
                        "variable": "sitemap_entry"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "post"
                    },
                    {
                        "name": "param",
                        "content": "Name of the post_type.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_posts_pre_max_num_pages",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-posts.php",
            "line": 176,
            "doc": {
                "summary": "Filters the max number of pages before it is generated.",
                "description": "<p>Passing a non-null value will short-circuit the generation, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The maximum number of pages. Default null.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "max_num_pages"
                    },
                    {
                        "name": "param",
                        "content": "Post type name.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_posts_query_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-posts.php",
            "line": 213,
            "endLine": 227,
            "doc": {
                "summary": "Filters the query arguments for post type sitemap queries.",
                "tags": [
                    {
                        "name": "see",
                        "content": "for a full list of arguments.",
                        "reference": "\\WP_Query"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "Added <code>ignore_sticky_posts<\/code> default parameter."
                    },
                    {
                        "name": "param",
                        "content": "Array of WP_Query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Post type name.",
                        "types": [
                            "string"
                        ],
                        "variable": "post_type"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_taxonomies",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-taxonomies.php",
            "line": 47,
            "doc": {
                "summary": "Filters the list of taxonomy object subtypes available within the sitemap.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of registered taxonomy objects keyed by their name.",
                        "types": [
                            "\\WP_Taxonomy[]"
                        ],
                        "variable": "taxonomies"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_taxonomies_pre_url_list",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-taxonomies.php",
            "line": 83,
            "endLine": 88,
            "doc": {
                "summary": "Filters the taxonomies URL list before it is generated.",
                "description": "<p>Returning a non-null value will effectively short-circuit the generation, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The URL list. Default null.",
                        "types": [
                            "array[]",
                            "null"
                        ],
                        "variable": "url_list"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Page of results.",
                        "types": [
                            "int"
                        ],
                        "variable": "page_num"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_taxonomies_entry",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-taxonomies.php",
            "line": 128,
            "doc": {
                "summary": "Filters the sitemap entry for an individual term.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "since",
                        "content": "6.0.0",
                        "description": "Added <code>$term<\/code> argument containing the term object."
                    },
                    {
                        "name": "param",
                        "content": "Sitemap entry for the term.",
                        "types": [
                            "array"
                        ],
                        "variable": "sitemap_entry"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "term"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_taxonomies_pre_max_num_pages",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-taxonomies.php",
            "line": 165,
            "doc": {
                "summary": "Filters the max number of pages for a taxonomy sitemap before it is generated.",
                "description": "<p>Passing a non-null value will short-circuit the generation, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The maximum number of pages. Default null.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "max_num_pages"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_taxonomies_query_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-taxonomies.php",
            "line": 197,
            "endLine": 208,
            "doc": {
                "summary": "Filters the taxonomy terms query arguments.",
                "description": "<p>Allows modification of the taxonomy query arguments before querying.<\/p>",
                "tags": [
                    {
                        "name": "see",
                        "content": "for a full list of arguments",
                        "reference": "\\WP_Term_Query"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of WP_Term_Query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_users_pre_url_list",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-users.php",
            "line": 51,
            "endLine": 55,
            "doc": {
                "summary": "Filters the users URL list before it is generated.",
                "description": "<p>Returning a non-null value will effectively short-circuit the generation, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The URL list. Default null.",
                        "types": [
                            "array[]",
                            "null"
                        ],
                        "variable": "url_list"
                    },
                    {
                        "name": "param",
                        "content": "Page of results.",
                        "types": [
                            "int"
                        ],
                        "variable": "page_num"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_users_entry",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-users.php",
            "line": 81,
            "doc": {
                "summary": "Filters the sitemap entry for an individual user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Sitemap entry for the user.",
                        "types": [
                            "array"
                        ],
                        "variable": "sitemap_entry"
                    },
                    {
                        "name": "param",
                        "content": "User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_users_pre_max_num_pages",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-users.php",
            "line": 111,
            "doc": {
                "summary": "Filters the max number of pages for a user sitemap before it is generated.",
                "description": "<p>Returning a non-null value will effectively short-circuit the generation, returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The maximum number of pages. Default null.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "max_num_pages"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_users_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps\/providers\/class-wp-sitemaps-users.php",
            "line": 153,
            "endLine": 159,
            "doc": {
                "summary": "Filters the query arguments for authors with public posts.",
                "description": "<p>Allows modification of the authors query arguments before querying.<\/p>",
                "tags": [
                    {
                        "name": "see",
                        "content": "for a full list of arguments",
                        "reference": "\\WP_User_Query"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of WP_User_Query arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_init",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/sitemaps.php",
            "line": 39,
            "doc": {
                "summary": "Fires when initializing the Sitemaps object.",
                "description": "<p>Additional sitemaps should be registered on this hook.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Sitemaps object.",
                        "types": [
                            "\\WP_Sitemaps"
                        ],
                        "variable": "wp_sitemaps"
                    }
                ]
            }
        },
        {
            "name": "wp_sitemaps_max_urls",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/sitemaps.php",
            "line": 90,
            "doc": {
                "summary": "Filters the maximum number of URLs displayed on a sitemap.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The maximum number of URLs included in a sitemap. Default 2000.",
                        "types": [
                            "int"
                        ],
                        "variable": "max_urls"
                    },
                    {
                        "name": "param",
                        "content": "Object type for sitemap to be filtered (e.g. 'post', 'term', 'user').",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    }
                ]
            }
        },
        {
            "name": "post_format_rewrite_base",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 45,
            "doc": {
                "summary": "Filters the post formats rewrite base.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Context of the rewrite base. Default 'type'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "registered_taxonomy",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 531,
            "doc": {
                "summary": "Fires after a taxonomy is registered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Object type or array of object types.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "object_type"
                    },
                    {
                        "name": "param",
                        "content": "Array of taxonomy registration arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "registered_taxonomy_{$taxonomy}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 549,
            "doc": {
                "summary": "Fires after a specific taxonomy is registered.",
                "description": "<p>The dynamic portion of the filter name, <code>$taxonomy<\/code>, refers to the taxonomy key.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>registered_taxonomy_category<\/code><\/li> <li><code>registered_taxonomy_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Object type or array of object types.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "object_type"
                    },
                    {
                        "name": "param",
                        "content": "Array of taxonomy registration arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "unregistered_taxonomy",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 593,
            "doc": {
                "summary": "Fires after a taxonomy is unregistered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "taxonomy_labels_{$taxonomy}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 703,
            "doc": {
                "summary": "Filters the labels of a specific taxonomy.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>taxonomy_labels_category<\/code><\/li> <li><code>taxonomy_labels_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "see",
                        "content": "for the full list of taxonomy labels.",
                        "reference": "\\get_taxonomy_labels()"
                    },
                    {
                        "name": "param",
                        "content": "Object with labels for the taxonomy as member variables.",
                        "types": [
                            "object"
                        ],
                        "variable": "labels"
                    }
                ]
            }
        },
        {
            "name": "registered_taxonomy_for_object_type",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 748,
            "doc": {
                "summary": "Fires after a taxonomy is registered for an object type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Name of the object type.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    }
                ]
            }
        },
        {
            "name": "unregistered_taxonomy_for_object_type",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 790,
            "doc": {
                "summary": "Fires after a taxonomy is unregistered for an object type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Name of the object type.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    }
                ]
            }
        },
        {
            "name": "get_term",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 970,
            "doc": {
                "summary": "Filters a taxonomy term object.",
                "description": "<p>The {@see 'get_$taxonomy'} hook is also available for targeting a specific taxonomy.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "<code>$_term<\/code> is now a <code>WP_Term<\/code> object."
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "_term"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "get_{$taxonomy}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 989,
            "doc": {
                "summary": "Filters a taxonomy term object.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the slug of the term's taxonomy.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>get_category<\/code><\/li> <li><code>get_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "<code>$_term<\/code> is now a <code>WP_Term<\/code> object."
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "_term"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "get_terms",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1326,
            "doc": {
                "summary": "Filters the found terms.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Added the <code>$term_query<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Array of found terms.",
                        "types": [
                            "array"
                        ],
                        "variable": "terms"
                    },
                    {
                        "name": "param",
                        "content": "An array of taxonomies if known.",
                        "types": [
                            "array",
                            "null"
                        ],
                        "variable": "taxonomies"
                    },
                    {
                        "name": "param",
                        "content": "An array of get_terms() arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Term_Query object.",
                        "types": [
                            "\\WP_Term_Query"
                        ],
                        "variable": "term_query"
                    }
                ]
            }
        },
        {
            "name": "term_exists_default_query_args",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1545,
            "doc": {
                "summary": "Filters default query arguments for checking if a term exists.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments passed to get_terms().",
                        "types": [
                            "array"
                        ],
                        "variable": "defaults"
                    },
                    {
                        "name": "param",
                        "content": "The term to check. Accepts term ID, slug, or name.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy name to use. An empty string indicates the search is against all taxonomies.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "ID of parent term under which to confine the exists search.<br>Null indicates the search is unconfined.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "parent_term"
                    }
                ]
            }
        },
        {
            "name": "edit_term_{$field}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1715,
            "doc": {
                "summary": "Filters a term field to edit before it is sanitized.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the term field.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the term field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "edit_{$taxonomy}_{$field}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1728,
            "doc": {
                "summary": "Filters the taxonomy field to edit before it is sanitized.",
                "description": "<p>The dynamic portions of the filter name, <code>$taxonomy<\/code> and <code>$field<\/code>, refer to the taxonomy slug and taxonomy field, respectively.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the taxonomy field to edit.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    }
                ]
            }
        },
        {
            "name": "pre_term_{$field}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1747,
            "doc": {
                "summary": "Filters a term field value before it is sanitized.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the term field.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the term field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "pre_{$taxonomy}_{$field}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1759,
            "doc": {
                "summary": "Filters a taxonomy field before it is sanitized.",
                "description": "<p>The dynamic portions of the filter name, <code>$taxonomy<\/code> and <code>$field<\/code>, refer to the taxonomy slug and field name, respectively.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the taxonomy field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "pre_category_nicename",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1772,
            "doc": {
                "summary": "Filters the category nicename before it is sanitized.",
                "description": "<p>Use the {@see 'pre<em>$taxonomy<\/em>$field'} hook instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The category nicename.",
                        "types": [
                            "string"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "term_{$field}_rss",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1786,
            "doc": {
                "summary": "Filters the term field for use in RSS.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the term field.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the term field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_{$field}_rss",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1798,
            "doc": {
                "summary": "Filters the taxonomy field for use in RSS.",
                "description": "<p>The dynamic portions of the hook name, <code>$taxonomy<\/code>, and <code>$field<\/code>, refer to the taxonomy slug and field name, respectively.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the taxonomy field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "term_{$field}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1814,
            "doc": {
                "summary": "Filters the term field sanitized for display.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the term field name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the term field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Context to retrieve the term field value.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "{$taxonomy}_{$field}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 1828,
            "doc": {
                "summary": "Filters the taxonomy field sanitized for display.",
                "description": "<p>The dynamic portions of the filter name, <code>$taxonomy<\/code>, and <code>$field<\/code>, refer to the taxonomy slug and taxonomy field, respectively.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the taxonomy field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Context to retrieve the taxonomy field value.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "pre_delete_term",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2002,
            "doc": {
                "summary": "Fires when deleting a term, before any modifications are made to posts or terms.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "edit_term_taxonomies",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2022,
            "doc": {
                "summary": "Fires immediately before a term to delete's children are reassigned a parent.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs for the given term.",
                        "types": [
                            "array"
                        ],
                        "variable": "edit_tt_ids"
                    }
                ]
            }
        },
        {
            "name": "edited_term_taxonomies",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2037,
            "doc": {
                "summary": "Fires immediately after a term to delete's children are reassigned a parent.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs for the given term.",
                        "types": [
                            "array"
                        ],
                        "variable": "edit_tt_ids"
                    }
                ]
            }
        },
        {
            "name": "delete_term_taxonomy",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2091,
            "doc": {
                "summary": "Fires immediately before a term taxonomy ID is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    }
                ]
            }
        },
        {
            "name": "deleted_term_taxonomy",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2102,
            "doc": {
                "summary": "Fires immediately after a term taxonomy ID is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    }
                ]
            }
        },
        {
            "name": "delete_term",
            "type": "action",
            "numArgs": 5,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2126,
            "doc": {
                "summary": "Fires after a term is deleted from the database and the cache is cleaned.",
                "description": "<p>The {@see 'delete_$taxonomy'} hook is also available for targeting a specific taxonomy.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Introduced the <code>$object_ids<\/code> argument."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Copy of the already-deleted term.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "deleted_term"
                    },
                    {
                        "name": "param",
                        "content": "List of term object IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "object_ids"
                    }
                ]
            }
        },
        {
            "name": "delete_{$taxonomy}",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2147,
            "doc": {
                "summary": "Fires after a term in a specific taxonomy is deleted.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the specific taxonomy the term belonged to.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>delete_category<\/code><\/li> <li><code>delete_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Introduced the <code>$object_ids<\/code> argument."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Copy of the already-deleted term.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "deleted_term"
                    },
                    {
                        "name": "param",
                        "content": "List of term object IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "object_ids"
                    }
                ]
            }
        },
        {
            "name": "wp_get_object_terms_args",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2215,
            "doc": {
                "summary": "Filters arguments for retrieving object terms.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments for retrieving terms for the given object(s).<br>See {@see \\wp_get_object_terms()} for details.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Array of object IDs.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "object_ids"
                    },
                    {
                        "name": "param",
                        "content": "Array of taxonomy names to retrieve terms from.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    }
                ]
            }
        },
        {
            "name": "get_object_terms",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2263,
            "doc": {
                "summary": "Filters the terms for a given object or objects.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of terms or a count thereof as a numeric string.",
                        "types": [
                            "\\WP_Term[]",
                            "int[]",
                            "string[]",
                            "string"
                        ],
                        "variable": "terms"
                    },
                    {
                        "name": "param",
                        "content": "Array of object IDs for which terms were retrieved.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "object_ids"
                    },
                    {
                        "name": "param",
                        "content": "Array of taxonomy names from which terms were retrieved.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "taxonomies"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for retrieving terms for the given object(s). See wp_get_object_terms() for details.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_get_object_terms",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2282,
            "doc": {
                "summary": "Filters the terms for a given object or objects.",
                "description": "<p>The <code>$taxonomies<\/code> parameter passed to this filter is formatted as a SQL fragment. The {@see 'get_object_terms'} filter is recommended as an alternative.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of terms or a count thereof as a numeric string.",
                        "types": [
                            "\\WP_Term[]",
                            "int[]",
                            "string[]",
                            "string"
                        ],
                        "variable": "terms"
                    },
                    {
                        "name": "param",
                        "content": "Comma separated list of object IDs for which terms were retrieved.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_ids"
                    },
                    {
                        "name": "param",
                        "content": "SQL fragment of taxonomy names from which terms were retrieved.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomies"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for retrieving terms for the given object(s). See wp_get_object_terms() for details.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "pre_insert_term",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2349,
            "doc": {
                "summary": "Filters a term before it is sanitized and inserted into the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The term name to add, or a WP_Error object if there's an error.",
                        "types": [
                            "string",
                            "\\WP_Error"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Array or query string of arguments passed to wp_insert_term().",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_insert_term_data",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2491,
            "doc": {
                "summary": "Filters term data before it is inserted into the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Term data to be inserted.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_insert_term_duplicate_term_check",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2550,
            "doc": {
                "summary": "Filters the duplicate term check that takes place during term creation.",
                "description": "<p>Term parent + taxonomy + slug combinations are meant to be unique, and wp_insert_term() performs a last-minute confirmation of this uniqueness before allowing a new term to be created. Plugins with different uniqueness requirements may use this filter to bypass or modify the duplicate-term check.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Duplicate term row from terms table, if found.",
                        "types": [
                            "object"
                        ],
                        "variable": "duplicate_term"
                    },
                    {
                        "name": "param",
                        "content": "Term being inserted.",
                        "types": [
                            "string"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "term_taxonomy_id for the newly created term.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    }
                ]
            }
        },
        {
            "name": "create_term",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2580,
            "doc": {
                "summary": "Fires immediately after a new term is created, before the term cache is cleaned.",
                "description": "<p>The {@see 'create_$taxonomy'} hook is also available for targeting a specific taxonomy.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "create_{$taxonomy}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2600,
            "doc": {
                "summary": "Fires after a new term is created for a specific taxonomy.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the slug of the taxonomy the term was created for.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>create_category<\/code><\/li> <li><code>create_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "term_id_filter",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2612,
            "doc": {
                "summary": "Filters the term ID after a new term is created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "created_term",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2630,
            "doc": {
                "summary": "Fires after a new term is created, and after the term cache has been cleaned.",
                "description": "<p>The {@see 'created_$taxonomy'} hook is also available for targeting a specific taxonomy.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "created_{$taxonomy}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2650,
            "doc": {
                "summary": "Fires after a new term in a specific taxonomy is created, and after the term cache has been cleaned.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>created_category<\/code><\/li> <li><code>created_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "saved_term",
            "type": "action",
            "numArgs": 5,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2667,
            "doc": {
                "summary": "Fires after a term has been saved, and the term cache has been cleared.",
                "description": "<p>The {@see 'saved_$taxonomy'} hook is also available for targeting a specific taxonomy.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing term being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "saved_{$taxonomy}",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2688,
            "doc": {
                "summary": "Fires after a term in a specific taxonomy has been saved, and the term cache has been cleared.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>saved_category<\/code><\/li> <li><code>saved_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing term being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "add_term_relationship",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2788,
            "doc": {
                "summary": "Fires immediately before an object-term relationship is added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$taxonomy<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "added_term_relationship",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2808,
            "doc": {
                "summary": "Fires immediately after an object-term relationship is added.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$taxonomy<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "set_object_terms",
            "type": "action",
            "numArgs": 6,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2875,
            "doc": {
                "summary": "Fires after an object's terms have been set.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of object term IDs or slugs.",
                        "types": [
                            "array"
                        ],
                        "variable": "terms"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "tt_ids"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Whether to append new terms to the old terms.",
                        "types": [
                            "bool"
                        ],
                        "variable": "append"
                    },
                    {
                        "name": "param",
                        "content": "Old array of term taxonomy IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "old_tt_ids"
                    }
                ]
            }
        },
        {
            "name": "delete_term_relationships",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2954,
            "doc": {
                "summary": "Fires immediately before an object-term relationship is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$taxonomy<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "tt_ids"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "deleted_term_relationships",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 2971,
            "doc": {
                "summary": "Fires immediately after an object-term relationship is deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$taxonomy<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "tt_ids"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "wp_unique_term_slug_is_bad_slug",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3050,
            "doc": {
                "summary": "Filters whether the proposed unique term slug is bad.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the slug needs to be made unique with a suffix.",
                        "types": [
                            "bool"
                        ],
                        "variable": "needs_suffix"
                    },
                    {
                        "name": "param",
                        "content": "The slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "object"
                        ],
                        "variable": "term"
                    }
                ]
            }
        },
        {
            "name": "wp_unique_term_slug",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3081,
            "doc": {
                "summary": "Filters the unique term slug.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Unique term slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "slug"
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "object"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "Slug originally passed to the function for testing.",
                        "types": [
                            "string"
                        ],
                        "variable": "original_slug"
                    }
                ]
            }
        },
        {
            "name": "wp_update_term_parent",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3220,
            "doc": {
                "summary": "Filters the term parent.",
                "description": "<p>Hook to this filter to see if it will cause a hierarchy loop.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the parent term.",
                        "types": [
                            "int"
                        ],
                        "variable": "parent_term"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "An array of potentially altered update arguments for the given term.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "edit_terms",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3253,
            "doc": {
                "summary": "Fires immediately before the given terms are edited.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_update_term_data",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3267,
            "doc": {
                "summary": "Filters term data before it is updated in the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Term data to be updated.",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "edited_terms",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3287,
            "doc": {
                "summary": "Fires immediately after a term is updated in the database, but before its term-taxonomy relationship is updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "edit_term_taxonomy",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3299,
            "doc": {
                "summary": "Fires immediate before a term-taxonomy relationship is updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "edited_term_taxonomy",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3313,
            "doc": {
                "summary": "Fires immediately after a term-taxonomy relationship is updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "edit_term",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3329,
            "doc": {
                "summary": "Fires after a term has been updated, but before the term cache has been cleaned.",
                "description": "<p>The {@see 'edit_$taxonomy'} hook is also available for targeting a specific taxonomy.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "edit_{$taxonomy}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3349,
            "doc": {
                "summary": "Fires after a term in a specific taxonomy has been updated, but before the term cache has been cleaned.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>edit_category<\/code><\/li> <li><code>edit_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "edited_term",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3370,
            "doc": {
                "summary": "Fires after a term has been updated, and the term cache has been cleaned.",
                "description": "<p>The {@see 'edited_$taxonomy'} hook is also available for targeting a specific taxonomy.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "edited_{$taxonomy}",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3390,
            "doc": {
                "summary": "Fires after a term for a specific taxonomy has been updated, and the term cache has been cleaned.",
                "description": "<p>The dynamic portion of the hook name, <code>$taxonomy<\/code>, refers to the taxonomy slug.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>edited_category<\/code><\/li> <li><code>edited_post_tag<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "clean_object_term_cache",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3555,
            "doc": {
                "summary": "Fires after the object term cache has been cleaned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of object IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "object_ids"
                    },
                    {
                        "name": "param",
                        "content": "Object type.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    }
                ]
            }
        },
        {
            "name": "clean_term_cache",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3617,
            "doc": {
                "summary": "Fires once after each taxonomy's term cache has been cleaned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Added the <code>$clean_taxonomy<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of term IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "ids"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Whether or not to clean taxonomy-wide caches",
                        "types": [
                            "bool"
                        ],
                        "variable": "clean_taxonomy"
                    }
                ]
            }
        },
        {
            "name": "clean_taxonomy_cache",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 3646,
            "doc": {
                "summary": "Fires after a taxonomy's caches have been cleaned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "update_post_term_count_statuses",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 4076,
            "doc": {
                "summary": "Filters the post statuses for updating the term count.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "List of post statuses to include in the count. Default is 'publish'.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "post_statuses"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy object.",
                        "types": [
                            "\\WP_Taxonomy"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "split_shared_term",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 4273,
            "doc": {
                "summary": "Fires after a previously shared taxonomy term is split into two separate terms.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the formerly shared term.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new term created for the $term_taxonomy_id.",
                        "types": [
                            "int"
                        ],
                        "variable": "new_term_id"
                    },
                    {
                        "name": "param",
                        "content": "ID for the term_taxonomy row affected by the split.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_taxonomy_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy for the split term.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "pre_term_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 4581,
            "doc": {
                "summary": "Filters the permalink structure for a term before token replacement occurs.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The permalink structure for the term's taxonomy.",
                        "types": [
                            "string"
                        ],
                        "variable": "termlink"
                    },
                    {
                        "name": "param",
                        "content": "The term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "term"
                    }
                ]
            }
        },
        {
            "name": "tag_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 4625,
            "doc": {
                "summary": "Filters the tag link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "2.5.0",
                        "description": "Deprecated in favor of {@see 'term_link'} filter."
                    },
                    {
                        "name": "since",
                        "content": "5.4.1",
                        "description": "Restored (un-deprecated)."
                    },
                    {
                        "name": "param",
                        "content": "Tag link URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "termlink"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    }
                ]
            }
        },
        {
            "name": "category_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 4638,
            "doc": {
                "summary": "Filters the category link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "2.5.0",
                        "description": "Deprecated in favor of {@see 'term_link'} filter."
                    },
                    {
                        "name": "since",
                        "content": "5.4.1",
                        "description": "Restored (un-deprecated)."
                    },
                    {
                        "name": "param",
                        "content": "Category link URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "termlink"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "term_id"
                    }
                ]
            }
        },
        {
            "name": "term_link",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 4650,
            "doc": {
                "summary": "Filters the term link.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Term link URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "termlink"
                    },
                    {
                        "name": "param",
                        "content": "Term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "term"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "taxonomy"
                    }
                ]
            }
        },
        {
            "name": "get_ancestors",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/taxonomy.php",
            "line": 4912,
            "doc": {
                "summary": "Filters a given object's ancestors.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.1",
                        "description": "Introduced the <code>$resource_type<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of IDs of object ancestors.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "ancestors"
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "object_id"
                    },
                    {
                        "name": "param",
                        "content": "Type of object.",
                        "types": [
                            "string"
                        ],
                        "variable": "object_type"
                    },
                    {
                        "name": "param",
                        "content": "Type of resource $object_type is.",
                        "types": [
                            "string"
                        ],
                        "variable": "resource_type"
                    }
                ]
            }
        },
        {
            "name": "template_redirect",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/template-loader.php",
            "line": 13,
            "doc": {
                "summary": "Fires before determining which template to load.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ]
            }
        },
        {
            "name": "exit_on_http_head",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/template-loader.php",
            "line": 26,
            "doc": {
                "summary": "Filters whether to allow 'HEAD' requests to generate content.",
                "description": "<p>Provides a significant performance bump by exiting before the page content loads for 'HEAD' requests. See #14348.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to exit without generating any content for 'HEAD' requests. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "exit"
                    }
                ]
            }
        },
        {
            "name": "do_robots",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/template-loader.php",
            "line": 37,
            "doc": {
                "summary": "Fired when the template loader determines a robots.txt request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "do_favicon",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/template-loader.php",
            "line": 45,
            "doc": {
                "summary": "Fired when the template loader determines a favicon.ico request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    }
                ]
            }
        },
        {
            "name": "template_include",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/template-loader.php",
            "line": 104,
            "doc": {
                "summary": "Filters the path of the current template before including it.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The path of the template to include.",
                        "types": [
                            "string"
                        ],
                        "variable": "template"
                    }
                ]
            }
        },
        {
            "name": "{$type}_template_hierarchy",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/template.php",
            "line": 62,
            "doc": {
                "summary": "Filters the list of template filenames that are searched for when retrieving a template to use.",
                "description": "<p>The dynamic portion of the hook name, <code>$type<\/code>, refers to the filename -- minus the file extension and any non-alphanumeric characters delimiting words -- of the file to load.<br>The last element in the array should always be the fallback template for this query type.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>404_template_hierarchy<\/code><\/li> <li><code>archive_template_hierarchy<\/code><\/li> <li><code>attachment_template_hierarchy<\/code><\/li> <li><code>author_template_hierarchy<\/code><\/li> <li><code>category_template_hierarchy<\/code><\/li> <li><code>date_template_hierarchy<\/code><\/li> <li><code>embed_template_hierarchy<\/code><\/li> <li><code>frontpage_template_hierarchy<\/code><\/li> <li><code>home_template_hierarchy<\/code><\/li> <li><code>index_template_hierarchy<\/code><\/li> <li><code>page_template_hierarchy<\/code><\/li> <li><code>paged_template_hierarchy<\/code><\/li> <li><code>privacypolicy_template_hierarchy<\/code><\/li> <li><code>search_template_hierarchy<\/code><\/li> <li><code>single_template_hierarchy<\/code><\/li> <li><code>singular_template_hierarchy<\/code><\/li> <li><code>tag_template_hierarchy<\/code><\/li> <li><code>taxonomy_template_hierarchy<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "A list of template candidates, in descending order of priority.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "templates"
                    }
                ]
            }
        },
        {
            "name": "{$type}_template",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/template.php",
            "line": 103,
            "doc": {
                "summary": "Filters the path of the queried template by type.",
                "description": "<p>The dynamic portion of the hook name, <code>$type<\/code>, refers to the filename -- minus the file extension and any non-alphanumeric characters delimiting words -- of the file to load.<br>This hook also applies to various types of files loaded as part of the Template Hierarchy.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>404_template<\/code><\/li> <li><code>archive_template<\/code><\/li> <li><code>attachment_template<\/code><\/li> <li><code>author_template<\/code><\/li> <li><code>category_template<\/code><\/li> <li><code>date_template<\/code><\/li> <li><code>embed_template<\/code><\/li> <li><code>frontpage_template<\/code><\/li> <li><code>home_template<\/code><\/li> <li><code>index_template<\/code><\/li> <li><code>page_template<\/code><\/li> <li><code>paged_template<\/code><\/li> <li><code>privacypolicy_template<\/code><\/li> <li><code>search_template<\/code><\/li> <li><code>single_template<\/code><\/li> <li><code>singular_template<\/code><\/li> <li><code>tag_template<\/code><\/li> <li><code>taxonomy_template<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.8.0",
                        "description": "The <code>$type<\/code> and <code>$templates<\/code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "Path to the template. See locate_template().",
                        "types": [
                            "string"
                        ],
                        "variable": "template"
                    },
                    {
                        "name": "param",
                        "content": "Sanitized filename without extension.",
                        "types": [
                            "string"
                        ],
                        "variable": "type"
                    },
                    {
                        "name": "param",
                        "content": "A list of template candidates, in descending order of priority.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "templates"
                    }
                ]
            }
        },
        {
            "name": "wp_before_load_template",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/template.php",
            "line": 780,
            "doc": {
                "summary": "Fires before a template file is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The full path to the template file.",
                        "types": [
                            "string"
                        ],
                        "variable": "_template_file"
                    },
                    {
                        "name": "param",
                        "content": "Whether to require_once or require.",
                        "types": [
                            "bool"
                        ],
                        "variable": "load_once"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the template.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "wp_after_load_template",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/template.php",
            "line": 797,
            "doc": {
                "summary": "Fires after a template file is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The full path to the template file.",
                        "types": [
                            "string"
                        ],
                        "variable": "_template_file"
                    },
                    {
                        "name": "param",
                        "content": "Whether to require_once or require.",
                        "types": [
                            "bool"
                        ],
                        "variable": "load_once"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the template.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "embed_thumbnail_id",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme-compat\/embed-content.php",
            "line": 32,
            "doc": {
                "summary": "Filters the thumbnail image ID for use in the embed template.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID, or false if there is none.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "thumbnail_id"
                    }
                ]
            }
        },
        {
            "name": "embed_thumbnail_image_size",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme-compat\/embed-content.php",
            "line": 59,
            "doc": {
                "summary": "Filters the thumbnail image size for use in the embed template.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Added <code>$thumbnail_id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Thumbnail image size.",
                        "types": [
                            "string"
                        ],
                        "variable": "image_size"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "thumbnail_id"
                    }
                ]
            }
        },
        {
            "name": "embed_thumbnail_image_shape",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme-compat\/embed-content.php",
            "line": 75,
            "doc": {
                "summary": "Filters the thumbnail shape for use in the embed template.",
                "description": "<p>Rectangular images are shown above the title while square images are shown next to the content.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Added <code>$thumbnail_id<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Thumbnail image shape. Either 'rectangular' or 'square'.",
                        "types": [
                            "string"
                        ],
                        "variable": "shape"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "thumbnail_id"
                    }
                ]
            }
        },
        {
            "name": "embed_content",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/theme-compat\/embed-content.php",
            "line": 109,
            "doc": {
                "summary": "Prints additional content after the embed excerpt.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ]
            }
        },
        {
            "name": "embed_content_meta",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/theme-compat\/embed-content.php",
            "line": 122,
            "doc": {
                "summary": "Prints additional meta content in the embed template.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ]
            }
        },
        {
            "name": "embed_footer",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/theme-compat\/footer-embed.php",
            "line": 18,
            "doc": {
                "summary": "Prints scripts or data before the closing body tag in the embed template.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ]
            }
        },
        {
            "name": "embed_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/theme-compat\/header-embed.php",
            "line": 29,
            "doc": {
                "summary": "Prints scripts or data in the embed template head tag.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ]
            }
        },
        {
            "name": "stylesheet",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 181,
            "doc": {
                "summary": "Filters the name of current stylesheet.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the current stylesheet.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    }
                ]
            }
        },
        {
            "name": "stylesheet_directory",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/theme.php",
            "line": 205,
            "doc": {
                "summary": "Filters the stylesheet directory path for the active theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Absolute path to the active theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet_dir"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the active theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Absolute path to themes directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "theme_root"
                    }
                ]
            }
        },
        {
            "name": "stylesheet_directory_uri",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/theme.php",
            "line": 229,
            "doc": {
                "summary": "Filters the stylesheet directory URI.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Stylesheet directory URI.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet_dir_uri"
                    },
                    {
                        "name": "param",
                        "content": "Name of the activated theme's directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Themes root URI.",
                        "types": [
                            "string"
                        ],
                        "variable": "theme_root_uri"
                    }
                ]
            }
        },
        {
            "name": "stylesheet_uri",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme.php",
            "line": 253,
            "doc": {
                "summary": "Filters the URI of the active theme stylesheet.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Stylesheet URI for the active theme\/child theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet_uri"
                    },
                    {
                        "name": "param",
                        "content": "Stylesheet directory URI for the active theme\/child theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet_dir_uri"
                    }
                ]
            }
        },
        {
            "name": "locale_stylesheet_uri",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme.php",
            "line": 297,
            "doc": {
                "summary": "Filters the localized stylesheet URI.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Localized stylesheet URI.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet_uri"
                    },
                    {
                        "name": "param",
                        "content": "Stylesheet directory URI.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet_dir_uri"
                    }
                ]
            }
        },
        {
            "name": "template",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 315,
            "doc": {
                "summary": "Filters the name of the active theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "active theme's directory name.",
                        "types": [
                            "string"
                        ],
                        "variable": "template"
                    }
                ]
            }
        },
        {
            "name": "template_directory",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/theme.php",
            "line": 339,
            "doc": {
                "summary": "Filters the active theme directory path.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The path of the active theme directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_dir"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the active theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "template"
                    },
                    {
                        "name": "param",
                        "content": "Absolute path to the themes directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "theme_root"
                    }
                ]
            }
        },
        {
            "name": "template_directory_uri",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/theme.php",
            "line": 363,
            "doc": {
                "summary": "Filters the active theme directory URI.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The URI of the active theme directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "template_dir_uri"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the active theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "template"
                    },
                    {
                        "name": "param",
                        "content": "The themes root URI.",
                        "types": [
                            "string"
                        ],
                        "variable": "theme_root_uri"
                    }
                ]
            }
        },
        {
            "name": "wp_cache_themes_persistently",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme.php",
            "line": 475,
            "doc": {
                "summary": "Filters whether to get the cache of the registered theme directories.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to get the cache of the theme directories. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "cache_expiration"
                    },
                    {
                        "name": "param",
                        "content": "The class or function name calling the filter.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "theme_root",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 609,
            "doc": {
                "summary": "Filters the absolute path to the themes directory.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Absolute path to themes directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "theme_root"
                    }
                ]
            }
        },
        {
            "name": "theme_root_uri",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/theme.php",
            "line": 662,
            "doc": {
                "summary": "Filters the URI for themes directory.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The URI for themes directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "theme_root_uri"
                    },
                    {
                        "name": "param",
                        "content": "WordPress web address which is set in General Options.",
                        "types": [
                            "string"
                        ],
                        "variable": "siteurl"
                    },
                    {
                        "name": "param",
                        "content": "The stylesheet or template name of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet_or_template"
                    }
                ]
            }
        },
        {
            "name": "switch_theme",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/theme.php",
            "line": 835,
            "doc": {
                "summary": "Fires after the theme is switched.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Introduced the <code>$old_theme<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Name of the new theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_name"
                    },
                    {
                        "name": "param",
                        "content": "WP_Theme instance of the new theme.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "new_theme"
                    },
                    {
                        "name": "param",
                        "content": "WP_Theme instance of the old theme.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "old_theme"
                    }
                ]
            }
        },
        {
            "name": "validate_current_theme",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 866,
            "doc": {
                "summary": "Filters whether to validate the active theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to validate the active theme. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "validate"
                    }
                ]
            }
        },
        {
            "name": "theme_mod_{$name}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 1026,
            "doc": {
                "summary": "Filters the theme modification, or 'theme_mod', value.",
                "description": "<p>The dynamic portion of the hook name, <code>$name<\/code>, refers to the key name of the modification array. For example, 'header_textcolor', 'header_image', and so on depending on the theme options.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The value of the active theme modification.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "current_mod"
                    }
                ]
            }
        },
        {
            "name": "pre_set_theme_mod_{$name}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme.php",
            "line": 1068,
            "doc": {
                "summary": "Filters the theme modification, or 'theme_mod', value on save.",
                "description": "<p>The dynamic portion of the hook name, <code>$name<\/code>, refers to the key name of the modification array. For example, 'header_textcolor', 'header_image', and so on depending on the theme options.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The new value of the theme modification.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "The current value of the theme modification.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "old_value"
                    }
                ]
            }
        },
        {
            "name": "get_header_image",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 1195,
            "doc": {
                "summary": "Filters the header image URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Header image URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "get_header_image_tag_attributes",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme.php",
            "line": 1274,
            "doc": {
                "summary": "Filters the list of header image attributes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of the attributes for the image tag.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    },
                    {
                        "name": "param",
                        "content": "The custom header object returned by 'get_custom_header()'.",
                        "types": [
                            "object"
                        ],
                        "variable": "header"
                    }
                ]
            }
        },
        {
            "name": "get_header_image_tag",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/theme.php",
            "line": 1294,
            "doc": {
                "summary": "Filters the markup of header images.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The HTML image tag markup being filtered.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "The custom header object returned by 'get_custom_header()'.",
                        "types": [
                            "object"
                        ],
                        "variable": "header"
                    },
                    {
                        "name": "param",
                        "content": "Array of the attributes for the image tag.",
                        "types": [
                            "array"
                        ],
                        "variable": "attr"
                    }
                ]
            }
        },
        {
            "name": "get_header_video_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 1606,
            "doc": {
                "summary": "Filters the header video URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.3"
                    },
                    {
                        "name": "param",
                        "content": "Header video URL, if available.",
                        "types": [
                            "string"
                        ],
                        "variable": "url"
                    }
                ]
            }
        },
        {
            "name": "header_video_settings",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 1669,
            "doc": {
                "summary": "Filters header video settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of header video settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "settings"
                    }
                ]
            }
        },
        {
            "name": "is_header_video_active",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 1716,
            "doc": {
                "summary": "Filters whether the custom header video is eligible to show on the current page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the custom header video should be shown. Returns the value of the theme setting for the <code>custom-header<\/code>'s <code>video-active-callback<\/code>.<br>If no callback is set, the default value is that of <code>is_front_page()<\/code>.",
                        "types": [
                            "bool"
                        ],
                        "variable": "show_video"
                    }
                ]
            }
        },
        {
            "name": "wp_get_custom_css",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme.php",
            "line": 1980,
            "doc": {
                "summary": "Filters the custom CSS output into the head element.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "CSS pulled in from the Custom CSS post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "css"
                    },
                    {
                        "name": "param",
                        "content": "The theme stylesheet name.",
                        "types": [
                            "string"
                        ],
                        "variable": "stylesheet"
                    }
                ]
            }
        },
        {
            "name": "update_custom_css_data",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme.php",
            "line": 2052,
            "doc": {
                "summary": "Filters the `css` (`post_content`) and `preprocessed` (`post_content_filtered`) args for a `custom_css` post being updated.",
                "description": "<p>This filter can be used by plugin that offer CSS pre-processors, to store the original pre-processed CSS in <code>post_content_filtered<\/code> and then store processed CSS in <code>post_content<\/code>.<br>When used in this way, the <code>post_content_filtered<\/code> should be supplied as the setting value instead of <code>post_content<\/code> via a the <code>customize_value_custom_css<\/code> filter, for example:<\/p> <pre><code>\nadd_filter( 'customize_value_custom_css', function( $value, $setting ) {\n    $post = wp_get_custom_css_post( $setting->stylesheet );\n    if ( $post && ! empty( $post->post_content_filtered ) ) {\n        $css = $post->post_content_filtered;\n    }\n    return $css;\n}, 10, 2 );\n<\/code><\/pre>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Custom CSS data.<br>    @type string $css          CSS stored in <code>post_content<\/code>.<br>    @type string $preprocessed Pre-processed CSS stored in <code>post_content_filtered<\/code>.<br>                               Normally empty string.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "{     The args passed into <code>wp_update_custom_css_post()<\/code> merged with defaults.<br>    @type string $css          The original CSS passed in to be updated.<br>    @type string $preprocessed The original preprocessed CSS passed in to be updated.<br>    @type string $stylesheet   The stylesheet (theme) being updated.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "editor_stylesheets",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/theme.php",
            "line": 2201,
            "doc": {
                "summary": "Filters the array of URLs of stylesheets applied to the editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of URLs of stylesheets to be applied to the editor.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "stylesheets"
                    }
                ]
            }
        },
        {
            "name": "get_theme_starter_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/theme.php",
            "line": 2526,
            "doc": {
                "summary": "Filters the expanded array of starter content.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of starter content.",
                        "types": [
                            "array"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Array of theme-specific starter content configuration.",
                        "types": [
                            "array"
                        ],
                        "variable": "config"
                    }
                ]
            }
        },
        {
            "name": "current_theme_supports-{$feature}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/theme.php",
            "line": 3124,
            "doc": {
                "summary": "Filters whether the active theme supports a specific feature.",
                "description": "<p>The dynamic portion of the hook name, <code>$feature<\/code>, refers to the specific theme feature. See add_theme_support() for the list of possible values.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the active theme supports the given feature. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "supports"
                    },
                    {
                        "name": "param",
                        "content": "Array of arguments for the feature.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "The theme feature.",
                        "types": [
                            "string"
                        ],
                        "variable": "feature"
                    }
                ]
            }
        },
        {
            "name": "after_switch_theme",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/theme.php",
            "line": 3401,
            "doc": {
                "summary": "Fires on the first WP load after a theme switch if the old theme still exists.",
                "description": "<p>This action fires multiple times and the parameters differs according to the context, if the old theme exists or not.<br>If the old theme is missing, the parameter will be the slug of the old theme.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Old theme name.",
                        "types": [
                            "string"
                        ],
                        "variable": "old_name"
                    },
                    {
                        "name": "param",
                        "content": "WP_Theme instance of the old theme.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "old_theme"
                    }
                ]
            }
        },
        {
            "name": "core_version_check_locale",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/update.php",
            "line": 71,
            "doc": {
                "summary": "Filters the locale requested for WordPress core translations.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Current locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "locale"
                    }
                ]
            }
        },
        {
            "name": "core_version_check_query_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/update.php",
            "line": 163,
            "doc": {
                "summary": "Filters the query arguments sent as part of the core version check.",
                "description": "<p>WARNING: Changing this data may result in your site not receiving security updates.<br>Please exercise extreme caution.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Version check query arguments.<br>    @type string $version            WordPress version number.<br>    @type string $php                PHP version number.<br>    @type string $locale             The locale to retrieve updates for.<br>    @type string $mysql              MySQL version number.<br>    @type string $local_package      The value of the $wp_local_package global, when set.<br>    @type int    $blogs              Number of sites on this WordPress installation.<br>    @type int    $users              Number of users on this WordPress installation.<br>    @type int    $multisite_enabled  Whether this WordPress installation uses Multisite.<br>    @type int    $initial_db_version Database version of WordPress at time of installation.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "query"
                    }
                ]
            }
        },
        {
            "name": "wp_maybe_auto_update",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/update.php",
            "line": 290,
            "doc": {
                "summary": "Fires during wp_cron, starting the auto-update process.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    }
                ]
            }
        },
        {
            "name": "plugins_update_check_locales",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/update.php",
            "line": 405,
            "doc": {
                "summary": "Filters the locales requested for plugin translations.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The default value of the <code>$locales<\/code> parameter changed to include all locales."
                    },
                    {
                        "name": "param",
                        "content": "Plugin locales. Default is all available locales of the site.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "locales"
                    }
                ]
            }
        },
        {
            "name": "update_plugins_{$hostname}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/update.php",
            "line": 511,
            "doc": {
                "summary": "Filters the update response for a given plugin hostname.",
                "description": "<p>The dynamic portion of the hook name, <code>$hostname<\/code>, refers to the hostname of the URI specified in the <code>Update URI<\/code> header field.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "{     The plugin update data with the latest details. Default false.<br>    @type string $id           Optional. ID of the plugin for update purposes, should be a URI                                specified in the <code>Update URI<\/code> header field.<br>    @type string $slug         Slug of the plugin.<br>    @type string $version      The version of the plugin.<br>    @type string $url          The URL for details of the plugin.<br>    @type string $package      Optional. The update ZIP for the plugin.<br>    @type string $tested       Optional. The version of WordPress the plugin is tested against.<br>    @type string $requires_php Optional. The version of PHP which the plugin requires.<br>    @type bool   $autoupdate   Optional. Whether the plugin should automatically update.<br>    @type array  $icons        Optional. Array of plugin icons.<br>    @type array  $banners      Optional. Array of plugin banners.<br>    @type array  $banners_rtl  Optional. Array of plugin RTL banners.<br>    @type array  $translations {         Optional. List of translation updates for the plugin.<br>        @type string $language   The language the translation update is for.<br>        @type string $version    The version of the plugin this translation is for.<br>                                 This is not the version of the language file.<br>        @type string $updated    The update timestamp of the translation file.<br>                                 Should be a date in the <code>YYYY-MM-DD HH:MM:SS<\/code> format.<br>        @type string $package    The ZIP location containing the translation update.<br>        @type string $autoupdate Whether the translation should be automatically installed.<br>    } }",
                        "types": [
                            "array",
                            "false"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "Plugin headers.",
                        "types": [
                            "array"
                        ],
                        "variable": "plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "Plugin filename.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "Installed locales to look up translations for.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "locales"
                    }
                ]
            }
        },
        {
            "name": "themes_update_check_locales",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/update.php",
            "line": 687,
            "doc": {
                "summary": "Filters the locales requested for theme translations.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The default value of the <code>$locales<\/code> parameter changed to include all locales."
                    },
                    {
                        "name": "param",
                        "content": "Theme locales. Default is all available locales of the site.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "locales"
                    }
                ]
            }
        },
        {
            "name": "update_themes_{$hostname}",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/update.php",
            "line": 793,
            "doc": {
                "summary": "Filters the update response for a given theme hostname.",
                "description": "<p>The dynamic portion of the hook name, <code>$hostname<\/code>, refers to the hostname of the URI specified in the <code>Update URI<\/code> header field.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "{     The theme update data with the latest details. Default false.<br>    @type string $id           Optional. ID of the theme for update purposes, should be a URI                                specified in the <code>Update URI<\/code> header field.<br>    @type string $theme        Directory name of the theme.<br>    @type string $version      The version of the theme.<br>    @type string $url          The URL for details of the theme.<br>    @type string $package      Optional. The update ZIP for the theme.<br>    @type string $tested       Optional. The version of WordPress the theme is tested against.<br>    @type string $requires_php Optional. The version of PHP which the theme requires.<br>    @type bool   $autoupdate   Optional. Whether the theme should automatically update.<br>    @type array  $translations {         Optional. List of translation updates for the theme.<br>        @type string $language   The language the translation update is for.<br>        @type string $version    The version of the theme this translation is for.<br>                                 This is not the version of the language file.<br>        @type string $updated    The update timestamp of the translation file.<br>                                 Should be a date in the <code>YYYY-MM-DD HH:MM:SS<\/code> format.<br>        @type string $package    The ZIP location containing the translation update.<br>        @type string $autoupdate Whether the translation should be automatically installed.<br>    } }",
                        "types": [
                            "array",
                            "false"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "Theme headers.",
                        "types": [
                            "array"
                        ],
                        "variable": "theme_data"
                    },
                    {
                        "name": "param",
                        "content": "Theme stylesheet.",
                        "types": [
                            "string"
                        ],
                        "variable": "theme_stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Installed locales to look up translations for.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "locales"
                    }
                ]
            }
        },
        {
            "name": "wp_get_update_data",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/update.php",
            "line": 976,
            "doc": {
                "summary": "Filters the returned array of update data for plugins, themes, and WordPress core.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Fetched update data.<br>    @type array   $counts       An array of counts for available plugin, theme, and WordPress updates.<br>    @type string  $update_title Titles of available updates.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "update_data"
                    },
                    {
                        "name": "param",
                        "content": "An array of update counts and UI strings for available updates.",
                        "types": [
                            "array"
                        ],
                        "variable": "titles"
                    }
                ]
            }
        },
        {
            "name": "wp_authenticate",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 78,
            "doc": {
                "summary": "Fires before the user is authenticated.",
                "description": "<p>The variables passed to the callbacks are passed by reference, and can be modified by callback functions.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "todo",
                        "content": "Decide whether to deprecate the wp_authenticate action."
                    },
                    {
                        "name": "param",
                        "content": "Username (passed by reference).",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "User password (passed by reference).",
                        "types": [
                            "string"
                        ],
                        "variable": "user_password"
                    }
                ]
            }
        },
        {
            "name": "secure_signon_cookie",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 99,
            "doc": {
                "summary": "Filters whether to use a secure sign-on cookie.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to use a secure sign-on cookie.",
                        "types": [
                            "bool"
                        ],
                        "variable": "secure_cookie"
                    },
                    {
                        "name": "param",
                        "content": "{     Array of entered sign-on data.<br>    @type string $user_login    Username.<br>    @type string $user_password Password entered.<br>    @type bool   $remember      Whether to 'remember' the user. Increases the time                                 that the cookie will be kept. Default false.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "credentials"
                    }
                ]
            }
        },
        {
            "name": "wp_login",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 121,
            "doc": {
                "summary": "Fires after the user has successfully logged in.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Username.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object of the logged-in user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_authenticate_user",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 180,
            "doc": {
                "summary": "Filters whether the given user can be authenticated with the provided password.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_User or WP_Error object if a previous callback failed authentication.",
                        "types": [
                            "\\WP_User",
                            "\\WP_Error"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "Password to check against the user.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    }
                ]
            }
        },
        {
            "name": "application_password_is_api_request",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 347,
            "doc": {
                "summary": "Filters whether this is an API request that Application Passwords can be used on.",
                "description": "<p>By default, Application Passwords is available for the REST API and XML-RPC.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "If this is an acceptable API request.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_api_request"
                    }
                ]
            }
        },
        {
            "name": "application_password_failed_authentication",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 393,
            "doc": {
                "summary": "Fires when an application password failed to authenticate the user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The authentication error.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "error"
                    }
                ]
            }
        },
        {
            "name": "wp_authenticate_application_password_errors",
            "type": "action",
            "numArgs": 4,
            "path": "\/wp-includes\/user.php",
            "line": 427,
            "doc": {
                "summary": "Fires when an application password has been successfully checked as valid.",
                "description": "<p>This allows for plugins to add additional constraints to prevent an application password from being used.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "error"
                    },
                    {
                        "name": "param",
                        "content": "The user authenticating.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The details about the application password.",
                        "types": [
                            "array"
                        ],
                        "variable": "item"
                    },
                    {
                        "name": "param",
                        "content": "The raw supplied password.",
                        "types": [
                            "string"
                        ],
                        "variable": "password"
                    }
                ]
            }
        },
        {
            "name": "application_password_did_authenticate",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 446,
            "doc": {
                "summary": "Fires after an application password was used for authentication.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user who was authenticated.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The application password used.",
                        "types": [
                            "array"
                        ],
                        "variable": "item"
                    }
                ]
            }
        },
        {
            "name": "check_is_user_spammed",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 514,
            "doc": {
                "summary": "Filters whether the user has been marked as a spammer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the user is considered a spammer.",
                        "types": [
                            "bool"
                        ],
                        "variable": "spammed"
                    },
                    {
                        "name": "param",
                        "content": "User to check against.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "get_usernumposts",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/user.php",
            "line": 584,
            "doc": {
                "summary": "Filters the number of posts a user has written.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "Added <code>$post_type<\/code> argument."
                    },
                    {
                        "name": "since",
                        "content": "4.3.1",
                        "description": "Added <code>$public_only<\/code> argument."
                    },
                    {
                        "name": "param",
                        "content": "The user's post count.",
                        "types": [
                            "int"
                        ],
                        "variable": "count"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "userid"
                    },
                    {
                        "name": "param",
                        "content": "Single post type or array of post types to count the number of posts for.",
                        "types": [
                            "string",
                            "array"
                        ],
                        "variable": "post_type"
                    },
                    {
                        "name": "param",
                        "content": "Whether to limit counted posts to public posts.",
                        "types": [
                            "bool"
                        ],
                        "variable": "public_only"
                    }
                ]
            }
        },
        {
            "name": "get_user_option_{$option}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 698,
            "doc": {
                "summary": "Filters a specific user option value.",
                "description": "<p>The dynamic portion of the hook name, <code>$option<\/code>, refers to the user option name.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Value for the user's option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option being retrieved.",
                        "types": [
                            "string"
                        ],
                        "variable": "option"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object of the user whose option is being retrieved.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_list_users_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 841,
            "doc": {
                "summary": "Filters the query arguments for the list of all users of the site.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The query arguments for get_users().",
                        "types": [
                            "array"
                        ],
                        "variable": "query_args"
                    },
                    {
                        "name": "param",
                        "content": "The arguments passed to wp_list_users() combined with the defaults.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "pre_get_blogs_of_user",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 953,
            "doc": {
                "summary": "Filters the list of a user's sites before it is populated.",
                "description": "<p>Returning a non-null value from the filter will effectively short circuit get_blogs_of_user(), returning that value instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of site objects of which the user is a member.",
                        "types": [
                            "null",
                            "object[]"
                        ],
                        "variable": "sites"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether the returned array should contain all sites, including those marked 'deleted', 'archived', or 'spam'. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "all"
                    }
                ]
            }
        },
        {
            "name": "get_blogs_of_user",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 1045,
            "doc": {
                "summary": "Filters the list of sites a user belongs to.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "An array of site objects belonging to the user.",
                        "types": [
                            "object[]"
                        ],
                        "variable": "sites"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether the returned sites array should contain all sites, including those marked 'deleted', 'archived', or 'spam'. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "all"
                    }
                ]
            }
        },
        {
            "name": "pre_count_users",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 1244,
            "doc": {
                "summary": "Filters the user count before queries are run.",
                "description": "<p>Return a non-null value to cause count_users() to return early.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The value to return instead. Default null to continue with the query.",
                        "types": [
                            "null",
                            "array"
                        ],
                        "variable": "result"
                    },
                    {
                        "name": "param",
                        "content": "Optional. The computational strategy to use when counting the users.<br>Accepts either 'time' or 'memory'. Default 'time'.",
                        "types": [
                            "string"
                        ],
                        "variable": "strategy"
                    },
                    {
                        "name": "param",
                        "content": "The site ID to count users for.",
                        "types": [
                            "int"
                        ],
                        "variable": "site_id"
                    }
                ]
            }
        },
        {
            "name": "wp_is_large_user_count",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 1477,
            "doc": {
                "summary": "Filters whether the site is considered large, based on its number of users.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the site has a large number of users.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_large_user_count"
                    },
                    {
                        "name": "param",
                        "content": "The total number of users.",
                        "types": [
                            "int"
                        ],
                        "variable": "count"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network. <code>null<\/code> represents the current network.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "network_id"
                    }
                ]
            }
        },
        {
            "name": "wp_dropdown_users_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 1665,
            "doc": {
                "summary": "Filters the query arguments for the list of users in the dropdown.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The query arguments for get_users().",
                        "types": [
                            "array"
                        ],
                        "variable": "query_args"
                    },
                    {
                        "name": "param",
                        "content": "The arguments passed to wp_dropdown_users() combined with the defaults.",
                        "types": [
                            "array"
                        ],
                        "variable": "parsed_args"
                    }
                ]
            }
        },
        {
            "name": "wp_dropdown_users",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 1731,
            "doc": {
                "summary": "Filters the wp_dropdown_users() HTML output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML output generated by wp_dropdown_users().",
                        "types": [
                            "string"
                        ],
                        "variable": "output"
                    }
                ]
            }
        },
        {
            "name": "edit_user_{$field}",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 1789,
            "doc": {
                "summary": "Filters a user field value in the 'edit' context.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the prefixed user field being filtered, such as 'user_login', 'user_email', 'first_name', etc.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the prefixed user field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "pre_user_{$field}",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 1813,
            "doc": {
                "summary": "Filters the value of a user field in the 'db' context.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the prefixed user field being filtered, such as 'user_login', 'user_email', 'first_name', etc.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the prefixed user field.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    }
                ]
            }
        },
        {
            "name": "user_{$field}",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 1835,
            "doc": {
                "summary": "Filters the value of a user field in a standard context.",
                "description": "<p>The dynamic portion of the hook name, <code>$field<\/code>, refers to the prefixed user field being filtered, such as 'user_login', 'user_email', 'first_name', etc.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The user object value to sanitize.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "value"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The context to filter within.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "clean_user_cache",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 1919,
            "doc": {
                "summary": "Fires immediately after the given user's cache is cleaned.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "username_exists",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 1951,
            "doc": {
                "summary": "Filters whether the given username exists.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID associated with the username, or false if the username does not exist.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The username to check for existence.",
                        "types": [
                            "string"
                        ],
                        "variable": "username"
                    }
                ]
            }
        },
        {
            "name": "email_exists",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 1983,
            "doc": {
                "summary": "Filters whether the given email exists.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID associated with the email, or false if the email does not exist.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The email to check for existence.",
                        "types": [
                            "string"
                        ],
                        "variable": "email"
                    }
                ]
            }
        },
        {
            "name": "validate_username",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 2007,
            "doc": {
                "summary": "Filters whether the provided username is valid.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.1"
                    },
                    {
                        "name": "param",
                        "content": "Whether given username is valid.",
                        "types": [
                            "bool"
                        ],
                        "variable": "valid"
                    },
                    {
                        "name": "param",
                        "content": "Username to check.",
                        "types": [
                            "string"
                        ],
                        "variable": "username"
                    }
                ]
            }
        },
        {
            "name": "pre_user_login",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2114,
            "doc": {
                "summary": "Filters a username after it has been sanitized.",
                "description": "<p>This filter is called before the user is created or updated.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "Username after it has been sanitized.",
                        "types": [
                            "string"
                        ],
                        "variable": "sanitized_user_login"
                    }
                ]
            }
        },
        {
            "name": "illegal_user_logins",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2137,
            "doc": {
                "summary": "Filters the list of disallowed usernames.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of disallowed usernames.",
                        "types": [
                            "array"
                        ],
                        "variable": "usernames"
                    }
                ]
            }
        },
        {
            "name": "pre_user_nicename",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2162,
            "doc": {
                "summary": "Filters a user's nicename before the user is created or updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The user's nicename.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_nicename"
                    }
                ]
            }
        },
        {
            "name": "pre_user_email",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2191,
            "doc": {
                "summary": "Filters a user's email before the user is created or updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The user's email.",
                        "types": [
                            "string"
                        ],
                        "variable": "raw_user_email"
                    }
                ]
            }
        },
        {
            "name": "pre_user_url",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2214,
            "doc": {
                "summary": "Filters a user's URL before the user is created or updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The user's URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "raw_user_url"
                    }
                ]
            }
        },
        {
            "name": "pre_user_nickname",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2242,
            "doc": {
                "summary": "Filters a user's nickname before the user is created or updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The user's nickname.",
                        "types": [
                            "string"
                        ],
                        "variable": "nickname"
                    }
                ]
            }
        },
        {
            "name": "pre_user_first_name",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2253,
            "doc": {
                "summary": "Filters a user's first name before the user is created or updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The user's first name.",
                        "types": [
                            "string"
                        ],
                        "variable": "first_name"
                    }
                ]
            }
        },
        {
            "name": "pre_user_last_name",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2264,
            "doc": {
                "summary": "Filters a user's last name before the user is created or updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The user's last name.",
                        "types": [
                            "string"
                        ],
                        "variable": "last_name"
                    }
                ]
            }
        },
        {
            "name": "pre_user_display_name",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2294,
            "doc": {
                "summary": "Filters a user's display name before the user is created or updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The user's display name.",
                        "types": [
                            "string"
                        ],
                        "variable": "display_name"
                    }
                ]
            }
        },
        {
            "name": "pre_user_description",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2305,
            "doc": {
                "summary": "Filters a user's description before the user is created or updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.3"
                    },
                    {
                        "name": "param",
                        "content": "The user's description.",
                        "types": [
                            "string"
                        ],
                        "variable": "description"
                    }
                ]
            }
        },
        {
            "name": "wp_pre_insert_user_data",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/user.php",
            "line": 2357,
            "doc": {
                "summary": "Filters user data before the record is created or updated.",
                "description": "<p>It only includes data in the users table, not any user metadata.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$userdata<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "{     Values and keys for the user.<br>    @type string $user_login      The user's login. Only included if $update == false     @type string $user_pass       The user's password.<br>    @type string $user_email      The user's email.<br>    @type string $user_url        The user's url.<br>    @type string $user_nicename   The user's nice name. Defaults to a URL-safe version of user's login     @type string $display_name    The user's display name.<br>    @type string $user_registered MySQL timestamp describing the moment when the user registered. Defaults to                                   the current UTC timestamp.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "data"
                    },
                    {
                        "name": "param",
                        "content": "Whether the user is being updated rather than created.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user to be updated, or NULL if the user is being created.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The raw array of data passed to wp_insert_user().",
                        "types": [
                            "array"
                        ],
                        "variable": "userdata"
                    }
                ]
            }
        },
        {
            "name": "insert_user_meta",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/user.php",
            "line": 2407,
            "doc": {
                "summary": "Filters a user's meta values and keys immediately after the user is created or updated and before any user meta is inserted or updated.",
                "description": "<p>Does not include contact methods. These are added using <code>wp_get_user_contact_methods( $user )<\/code>.<\/p> <p>For custom meta fields, see the {@see 'insert_custom_user_meta'} filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$userdata<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "{     Default meta values and keys for the user.<br>    @type string   $nickname             The user's nickname. Default is the user's username.<br>    @type string   $first_name           The user's first name.<br>    @type string   $last_name            The user's last name.<br>    @type string   $description          The user's description.<br>    @type string   $rich_editing         Whether to enable the rich-editor for the user. Default 'true'.<br>    @type string   $syntax_highlighting  Whether to enable the rich code editor for the user. Default 'true'.<br>    @type string   $comment_shortcuts    Whether to enable keyboard shortcuts for the user. Default 'false'.<br>    @type string   $admin_color          The color scheme for a user's admin screen. Default 'fresh'.<br>    @type int|bool $use_ssl              Whether to force SSL on the user's admin area. 0|false if SSL                                          is not forced.<br>    @type string   $show_admin_bar_front Whether to show the admin bar on the front end for the user.<br>                                         Default 'true'.<br>    @type string   $locale               User's locale. Default empty.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    },
                    {
                        "name": "param",
                        "content": "User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "Whether the user is being updated rather than created.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "The raw array of data passed to wp_insert_user().",
                        "types": [
                            "array"
                        ],
                        "variable": "userdata"
                    }
                ]
            }
        },
        {
            "name": "insert_custom_user_meta",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/user.php",
            "line": 2427,
            "doc": {
                "summary": "Filters a user's custom meta values and keys immediately after the user is created or updated and before any user meta is inserted or updated.",
                "description": "<p>For non-custom meta fields, see the {@see 'insert_user_meta'} filter.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of custom user meta values keyed by meta key.",
                        "types": [
                            "array"
                        ],
                        "variable": "custom_meta"
                    },
                    {
                        "name": "param",
                        "content": "User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "Whether the user is being updated rather than created.",
                        "types": [
                            "bool"
                        ],
                        "variable": "update"
                    },
                    {
                        "name": "param",
                        "content": "The raw array of data passed to wp_insert_user().",
                        "types": [
                            "array"
                        ],
                        "variable": "userdata"
                    }
                ]
            }
        },
        {
            "name": "profile_update",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 2461,
            "doc": {
                "summary": "Fires immediately after an existing user is updated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$userdata<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "Object containing user's data prior to update.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "old_user_data"
                    },
                    {
                        "name": "param",
                        "content": "The raw array of data passed to wp_insert_user().",
                        "types": [
                            "array"
                        ],
                        "variable": "userdata"
                    }
                ]
            }
        },
        {
            "name": "make_spam_user",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2472,
            "doc": {
                "summary": "Fires after the user is marked as a SPAM user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user marked as SPAM.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "make_ham_user",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2481,
            "doc": {
                "summary": "Fires after the user is marked as a HAM user. Opposite of SPAM.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user marked as HAM.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "user_register",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 2494,
            "doc": {
                "summary": "Fires immediately after a new user is registered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$userdata<\/code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    },
                    {
                        "name": "param",
                        "content": "The raw array of data passed to wp_insert_user().",
                        "types": [
                            "array"
                        ],
                        "variable": "userdata"
                    }
                ]
            }
        },
        {
            "name": "send_password_change_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 2560,
            "doc": {
                "summary": "Filters whether to send the password change email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "see",
                        "content": "For <code>$user<\/code> and <code>$userdata<\/code> fields.",
                        "reference": "\\wp_insert_user()"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the email.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "The original user array.",
                        "types": [
                            "array"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The updated user array.",
                        "types": [
                            "array"
                        ],
                        "variable": "userdata"
                    }
                ]
            }
        },
        {
            "name": "send_email_change_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 2575,
            "doc": {
                "summary": "Filters whether to send the email change email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "see",
                        "content": "For <code>$user<\/code> and <code>$userdata<\/code> fields.",
                        "reference": "\\wp_insert_user()"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the email.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "The original user array.",
                        "types": [
                            "array"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The updated user array.",
                        "types": [
                            "array"
                        ],
                        "variable": "userdata"
                    }
                ]
            }
        },
        {
            "name": "password_change_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 2642,
            "doc": {
                "summary": "Filters the contents of the email sent when the user's password is changed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The intended recipients. Add emails in a comma separated string.<br>    @type string $subject The subject of the email.<br>    @type string $message The content of the email.<br>        The following strings have a special meaning and will get replaced dynamically:<br>        - ###USERNAME###    The current user's username.<br>        - ###ADMIN_EMAIL### The admin email in case this was unexpected.<br>        - ###EMAIL###       The user's email address.<br>        - ###SITENAME###    The name of the site.<br>        - ###SITEURL###     The URL to the site.<br>    @type string $headers Headers. Add headers in a newline (\\r\\n) separated string.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "pass_change_email"
                    },
                    {
                        "name": "param",
                        "content": "The original user array.",
                        "types": [
                            "array"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The updated user array.",
                        "types": [
                            "array"
                        ],
                        "variable": "userdata"
                    }
                ]
            }
        },
        {
            "name": "email_change_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 2701,
            "doc": {
                "summary": "Filters the contents of the email sent when the user's email is changed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "{     Used to build wp_mail().<br>    @type string $to      The intended recipients.<br>    @type string $subject The subject of the email.<br>    @type string $message The content of the email.<br>        The following strings have a special meaning and will get replaced dynamically:<br>        - ###USERNAME###    The current user's username.<br>        - ###ADMIN_EMAIL### The admin email in case this was unexpected.<br>        - ###NEW_EMAIL###   The new email address.<br>        - ###EMAIL###       The old email address.<br>        - ###SITENAME###    The name of the site.<br>        - ###SITEURL###     The URL to the site.<br>    @type string $headers Headers.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_change_email"
                    },
                    {
                        "name": "param",
                        "content": "The original user array.",
                        "types": [
                            "array"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "The updated user array.",
                        "types": [
                            "array"
                        ],
                        "variable": "userdata"
                    }
                ]
            }
        },
        {
            "name": "user_contactmethods",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 2810,
            "doc": {
                "summary": "Filters the user contact methods.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of contact method labels keyed by contact method.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "methods"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object or null if none was provided.",
                        "types": [
                            "\\WP_User",
                            "null"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "password_hint",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2845,
            "doc": {
                "summary": "Filters the text describing the site's password complexity policy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The password hint text.",
                        "types": [
                            "string"
                        ],
                        "variable": "hint"
                    }
                ]
            }
        },
        {
            "name": "retreive_password",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 2875,
            "doc": {
                "summary": "Fires before a new password is retrieved.",
                "description": "<p>Use the {@see 'retrieve_password'} hook instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "1.5.1",
                        "description": "Misspelled. Use {@see 'retrieve_password'} hook instead."
                    },
                    {
                        "name": "param",
                        "content": "The user login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    }
                ]
            }
        },
        {
            "name": "retrieve_password",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2884,
            "doc": {
                "summary": "Fires before a new password is retrieved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The user login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    }
                ]
            }
        },
        {
            "name": "allow_password_reset",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 2899,
            "doc": {
                "summary": "Filters whether to allow a password to be reset.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to allow the password to be reset. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "allow"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the user attempting to reset a password.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "retrieve_password_key",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 2918,
            "doc": {
                "summary": "Fires when a password reset key is generated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The username for the user.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "The generated password reset key.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    }
                ]
            }
        },
        {
            "name": "password_reset_expiration",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 2990,
            "doc": {
                "summary": "Filters the expiration time of password reset keys.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The expiration time in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    }
                ]
            }
        },
        {
            "name": "password_reset_key_expired",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 3028,
            "doc": {
                "summary": "Filters the return value of check_password_reset_key() when an old-style key is used.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0",
                        "description": "Previously plain-text keys were stored in the database."
                    },
                    {
                        "name": "since",
                        "content": "4.3.0",
                        "description": "Previously key hashes were stored without an expiration time."
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object denoting an expired key.<br>Return a WP_User object to validate the key.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "return"
                    },
                    {
                        "name": "param",
                        "content": "The matched user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "lostpassword_user_data",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 3085,
            "doc": {
                "summary": "Filters the user data during a password reset request.",
                "description": "<p>Allows, for example, custom validation using data other than username or email address.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object if found, false if the user does not exist.",
                        "types": [
                            "\\WP_User",
                            "false"
                        ],
                        "variable": "user_data"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object containing any errors generated by using invalid credentials.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    }
                ]
            }
        },
        {
            "name": "lostpassword_post",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 3098,
            "doc": {
                "summary": "Fires before errors are returned from a password reset request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$errors<\/code> parameter."
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "Added the <code>$user_data<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object containing any errors generated by using invalid credentials.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object if found, false if the user does not exist.",
                        "types": [
                            "\\WP_User",
                            "false"
                        ],
                        "variable": "user_data"
                    }
                ]
            }
        },
        {
            "name": "lostpassword_errors",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 3115,
            "doc": {
                "summary": "Filters the errors encountered on a password reset request.",
                "description": "<p>The filtered WP_Error object may, for example, contain errors for an invalid username or email address. A WP_Error object should always be returned, but may or may not contain errors.<\/p> <p>If any errors are present in $errors, this will abort the password reset request.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object containing any errors generated by using invalid credentials.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object if found, false if the user does not exist.",
                        "types": [
                            "\\WP_User",
                            "false"
                        ],
                        "variable": "user_data"
                    }
                ]
            }
        },
        {
            "name": "send_retrieve_password_email",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 3137,
            "doc": {
                "summary": "Filters whether to send the retrieve password email.",
                "description": "<p>Return false to disable sending the email.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to send the email.",
                        "types": [
                            "bool"
                        ],
                        "variable": "send"
                    },
                    {
                        "name": "param",
                        "content": "The username for the user.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user_data"
                    }
                ]
            }
        },
        {
            "name": "retrieve_password_title",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 3198,
            "doc": {
                "summary": "Filters the subject of the password reset email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$user_login<\/code> and <code>$user_data<\/code> parameters."
                    },
                    {
                        "name": "param",
                        "content": "Email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "The username for the user.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user_data"
                    }
                ]
            }
        },
        {
            "name": "retrieve_password_message",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/user.php",
            "line": 3213,
            "doc": {
                "summary": "Filters the message body of the password reset mail.",
                "description": "<p>If the filtered message is empty, the password reset email will not be sent.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "Added <code>$user_login<\/code> and <code>$user_data<\/code> parameters."
                    },
                    {
                        "name": "param",
                        "content": "Email message.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    },
                    {
                        "name": "param",
                        "content": "The activation key.",
                        "types": [
                            "string"
                        ],
                        "variable": "key"
                    },
                    {
                        "name": "param",
                        "content": "The username for the user.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_login"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user_data"
                    }
                ]
            }
        },
        {
            "name": "retrieve_password_notification_email",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/user.php",
            "line": 3248,
            "doc": {
                "summary": "Filters the contents of the reset password notification email sent to the user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{     The default notification email arguments. Used to build wp_mail().<br>    @type string $to      The intended recipient - user email address.<br>    @type string $subject The subject of the email.<br>    @type string $message The body of the email.<br>    @type string $headers The headers of the email.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "defaults"
                    },
                    {
                        "name": "type",
                        "content": "string  $key        The activation key."
                    },
                    {
                        "name": "type",
                        "content": "string  $user_login The username for the user."
                    },
                    {
                        "name": "type",
                        "content": "WP_User $user_data  WP_User object."
                    }
                ]
            }
        },
        {
            "name": "password_reset",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 3297,
            "doc": {
                "summary": "Fires before the user's password is reset.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "New user password.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_pass"
                    }
                ]
            }
        },
        {
            "name": "after_password_reset",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 3310,
            "doc": {
                "summary": "Fires after the user's password is reset.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "New user password.",
                        "types": [
                            "string"
                        ],
                        "variable": "new_pass"
                    }
                ]
            }
        },
        {
            "name": "user_registration_email",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 3333,
            "doc": {
                "summary": "Filters the email address of a user being registered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The email address of the new user.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    }
                ]
            }
        },
        {
            "name": "register_post",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 3379,
            "doc": {
                "summary": "Fires when submitting registration form data, before the user is created.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The submitted username after being sanitized.",
                        "types": [
                            "string"
                        ],
                        "variable": "sanitized_user_login"
                    },
                    {
                        "name": "param",
                        "content": "The submitted email.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "Contains any errors with submitted username and email, e.g., an empty field, an invalid username or email, or an existing username or email.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    }
                ]
            }
        },
        {
            "name": "registration_errors",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 3397,
            "doc": {
                "summary": "Filters the errors encountered when a new user is being registered.",
                "description": "<p>The filtered WP_Error object may, for example, contain errors for an invalid or existing username or email address. A WP_Error object should always be returned, but may or may not contain errors.<\/p> <p>If any errors are present in $errors, this will abort the user's registration.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object containing any errors encountered during registration.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    },
                    {
                        "name": "param",
                        "content": "User's username after it has been sanitized.",
                        "types": [
                            "string"
                        ],
                        "variable": "sanitized_user_login"
                    },
                    {
                        "name": "param",
                        "content": "User's email.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    }
                ]
            }
        },
        {
            "name": "register_new_user",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 3433,
            "doc": {
                "summary": "Fires after a new user registration has been recorded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly registered user.",
                        "types": [
                            "int"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "determine_current_user",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 3620,
            "doc": {
                "summary": "Filters the current user.",
                "description": "<p>The default filters use this to determine the current user from the request's cookies, if available.<\/p> <p>Returning a value of false will effectively short-circuit setting the current user.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "User ID if one has been determined, false otherwise.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "user_id"
                    }
                ]
            }
        },
        {
            "name": "new_user_email_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 3726,
            "doc": {
                "summary": "Filters the text of the email sent when a change of user email address is attempted.",
                "description": "<p>The following strings have a special meaning and will get replaced dynamically:<\/p> <ul> <li> <h3>USERNAME###  The current user's username.<\/h3> <\/li> <li> <h3>ADMIN_URL### The link to click on to confirm the email change.<\/h3> <\/li> <li> <h3>EMAIL###     The new email.<\/h3> <\/li> <li> <h3>SITENAME###  The name of the site.<\/h3> <\/li> <li> <h3>SITEURL###   The URL to the site.<\/h3> <\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "This filter is no longer Multisite specific."
                    },
                    {
                        "name": "param",
                        "content": "Text in the email.",
                        "types": [
                            "string"
                        ],
                        "variable": "email_text"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the new user email address.<br>    @type string $hash     The secure hash used in the confirmation link URL.<br>    @type string $newemail The proposed new email address.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "new_user_email"
                    }
                ]
            }
        },
        {
            "name": "wp_privacy_additional_user_profile_data",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 3883,
            "doc": {
                "summary": "Filters the user's profile data for the privacy exporter.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of name-value pairs of additional user data items. Default empty array.<br>    @type string $name  The user-facing name of an item name-value pair,e.g. 'IP Address'.<br>    @type string $value The user-facing value of an item data pair, e.g. '50.60.70.0'.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "additional_user_profile_data"
                    },
                    {
                        "name": "param",
                        "content": "The user whose data is being exported.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    },
                    {
                        "name": "param",
                        "content": "An array of reserved names. Any item in <code>$additional_user_data<\/code> that uses one of these for its <code>name<\/code> will not be included in the export.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "reserved_names"
                    }
                ]
            }
        },
        {
            "name": "user_request_confirmed_email_to",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 4064,
            "doc": {
                "summary": "Filters the recipient of the data request confirmation notification.",
                "description": "<p>In a Multisite environment, this will default to the email address of the network admin because, by default, single site admins do not have the capabilities required to process requests. Some networks may wish to delegate those capabilities to a single-site admin, or a dedicated person responsible for managing privacy requests.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The email address of the notification recipient.",
                        "types": [
                            "string"
                        ],
                        "variable": "admin_email"
                    },
                    {
                        "name": "param",
                        "content": "The request that is initiating the notification.",
                        "types": [
                            "\\WP_User_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "user_request_confirmed_email_subject",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 4102,
            "doc": {
                "summary": "Filters the subject of the user request confirmation email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.8"
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The name of the site.",
                        "types": [
                            "string"
                        ],
                        "variable": "sitename"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request     User request object.<br>    @type string          $user_email  The email address confirming a request     @type string          $description Description of the action being performed so the user knows what the email is for.<br>    @type string          $manage_url  The link to click manage privacy requests of this type.<br>    @type string          $sitename    The site name sending the mail.<br>    @type string          $siteurl     The site URL sending the mail.<br>    @type string          $admin_email The administrator email receiving the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_confirmed_action_email_content",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 4154,
            "endLine": 4164,
            "doc": {
                "summary": "Filters the body of the user request confirmation email.",
                "description": "<p>The email is sent to an administrator when a user request is confirmed.<\/p> <p>The following strings have a special meaning and will get replaced dynamically:<\/p> <h3>SITENAME###    The name of the site.<\/h3> <h3>USER_EMAIL###  The user email for the request.<\/h3> <h3>DESCRIPTION### Description of the action being performed so the user knows what the email is for.<\/h3> <h3>MANAGE_URL###  The URL to manage requests.<\/h3> <h3>SITEURL###     The URL to the site.<\/h3>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.8.0",
                        "description": "Use {@see 'user_request_confirmed_email_content'} instead.<br>For user erasure fulfillment email content use {@see 'user_erasure_fulfillment_email_content'} instead."
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request     User request object.<br>    @type string          $user_email  The email address confirming a request     @type string          $description Description of the action being performed                                        so the user knows what the email is for.<br>    @type string          $manage_url  The link to click manage privacy requests of this type.<br>    @type string          $sitename    The site name sending the mail.<br>    @type string          $siteurl     The site URL sending the mail.<br>    @type string          $admin_email The administrator email receiving the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_request_confirmed_email_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 4193,
            "doc": {
                "summary": "Filters the body of the user request confirmation email.",
                "description": "<p>The email is sent to an administrator when a user request is confirmed.<br>The following strings have a special meaning and will get replaced dynamically:<\/p> <h3>SITENAME###    The name of the site.<\/h3> <h3>USER_EMAIL###  The user email for the request.<\/h3> <h3>DESCRIPTION### Description of the action being performed so the user knows what the email is for.<\/h3> <h3>MANAGE_URL###  The URL to manage requests.<\/h3> <h3>SITEURL###     The URL to the site.<\/h3>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request     User request object.<br>    @type string          $user_email  The email address confirming a request     @type string          $description Description of the action being performed so the user knows what the email is for.<br>    @type string          $manage_url  The link to click manage privacy requests of this type.<br>    @type string          $sitename    The site name sending the mail.<br>    @type string          $siteurl     The site URL sending the mail.<br>    @type string          $admin_email The administrator email receiving the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_request_confirmed_email_headers",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/user.php",
            "line": 4224,
            "doc": {
                "summary": "Filters the headers of the user request confirmation email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The email headers.",
                        "types": [
                            "string",
                            "array"
                        ],
                        "variable": "headers"
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "The request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request     User request object.<br>    @type string          $user_email  The email address confirming a request     @type string          $description Description of the action being performed so the user knows what the email is for.<br>    @type string          $manage_url  The link to click manage privacy requests of this type.<br>    @type string          $sitename    The site name sending the mail.<br>    @type string          $siteurl     The site URL sending the mail.<br>    @type string          $admin_email The administrator email receiving the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_erasure_fulfillment_email_to",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 4270,
            "doc": {
                "summary": "Filters the recipient of the data erasure fulfillment notification.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The email address of the notification recipient.",
                        "types": [
                            "string"
                        ],
                        "variable": "user_email"
                    },
                    {
                        "name": "param",
                        "content": "The request that is initiating the notification.",
                        "types": [
                            "\\WP_User_Request"
                        ],
                        "variable": "request"
                    }
                ]
            }
        },
        {
            "name": "user_erasure_complete_email_subject",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 4306,
            "endLine": 4311,
            "doc": {
                "summary": "Filters the subject of the email sent when an erasure request is completed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.8"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.8.0",
                        "description": "Use {@see 'user_erasure_fulfillment_email_subject'} instead."
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The name of the site.",
                        "types": [
                            "string"
                        ],
                        "variable": "sitename"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request            User request object.<br>    @type string          $message_recipient  The address that the email will be sent to. Defaults                                               to the value of <code>$request-&gt;email<\/code>, but can be changed                                               by the <code>user_erasure_fulfillment_email_to<\/code> filter.<br>    @type string          $privacy_policy_url Privacy policy URL.<br>    @type string          $sitename           The site name sending the mail.<br>    @type string          $siteurl            The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_erasure_fulfillment_email_subject",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 4332,
            "doc": {
                "summary": "Filters the subject of the email sent when an erasure request is completed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The name of the site.",
                        "types": [
                            "string"
                        ],
                        "variable": "sitename"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request            User request object.<br>    @type string          $message_recipient  The address that the email will be sent to. Defaults                                               to the value of <code>$request-&gt;email<\/code>, but can be changed                                               by the <code>user_erasure_fulfillment_email_to<\/code> filter.<br>    @type string          $privacy_policy_url Privacy policy URL.<br>    @type string          $sitename           The site name sending the mail.<br>    @type string          $siteurl            The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_confirmed_action_email_content",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 4394,
            "endLine": 4404,
            "doc": {
                "summary": "Filters the body of the data erasure fulfillment notification.",
                "description": "<p>The email is sent to a user when their data erasure request is fulfilled by an administrator.<\/p> <p>The following strings have a special meaning and will get replaced dynamically:<\/p> <h3>SITENAME###           The name of the site.<\/h3> <h3>PRIVACY_POLICY_URL### Privacy policy page URL.<\/h3> <h3>SITEURL###            The URL to the site.<\/h3>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.8.0",
                        "description": "Use {@see 'user_erasure_fulfillment_email_content'} instead.<br>For user request confirmation email content use {@see 'user_request_confirmed_email_content'} instead."
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request            User request object.<br>    @type string          $message_recipient  The address that the email will be sent to. Defaults                                               to the value of <code>$request-&gt;email<\/code>, but can be changed                                               by the <code>user_erasure_fulfillment_email_to<\/code> filter.<br>    @type string          $privacy_policy_url Privacy policy URL.<br>    @type string          $sitename           The site name sending the mail.<br>    @type string          $siteurl            The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_erasure_fulfillment_email_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 4433,
            "doc": {
                "summary": "Filters the body of the data erasure fulfillment notification.",
                "description": "<p>The email is sent to a user when their data erasure request is fulfilled by an administrator.<\/p> <p>The following strings have a special meaning and will get replaced dynamically:<\/p> <h3>SITENAME###           The name of the site.<\/h3> <h3>PRIVACY_POLICY_URL### Privacy policy page URL.<\/h3> <h3>SITEURL###            The URL to the site.<\/h3>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request            User request object.<br>    @type string          $message_recipient  The address that the email will be sent to. Defaults                                               to the value of <code>$request-&gt;email<\/code>, but can be changed                                               by the <code>user_erasure_fulfillment_email_to<\/code> filter.<br>    @type string          $privacy_policy_url Privacy policy URL.<br>    @type string          $sitename           The site name sending the mail.<br>    @type string          $siteurl            The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_erasure_complete_email_headers",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 4463,
            "endLine": 4468,
            "doc": {
                "summary": "Filters the headers of the data erasure fulfillment notification.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.8.0",
                        "description": "Use {@see 'user_erasure_fulfillment_email_headers'} instead."
                    },
                    {
                        "name": "param",
                        "content": "The email headers.",
                        "types": [
                            "string",
                            "array"
                        ],
                        "variable": "headers"
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "The request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request            User request object.<br>    @type string          $message_recipient  The address that the email will be sent to. Defaults                                               to the value of <code>$request-&gt;email<\/code>, but can be changed                                               by the <code>user_erasure_fulfillment_email_to<\/code> filter.<br>    @type string          $privacy_policy_url Privacy policy URL.<br>    @type string          $sitename           The site name sending the mail.<br>    @type string          $siteurl            The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_erasure_fulfillment_email_headers",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/user.php",
            "line": 4491,
            "doc": {
                "summary": "Filters the headers of the data erasure fulfillment notification.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The email headers.",
                        "types": [
                            "string",
                            "array"
                        ],
                        "variable": "headers"
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "The request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request            User request object.<br>    @type string          $message_recipient  The address that the email will be sent to. Defaults                                               to the value of <code>$request-&gt;email<\/code>, but can be changed                                               by the <code>user_erasure_fulfillment_email_to<\/code> filter.<br>    @type string          $privacy_policy_url Privacy policy URL.<br>    @type string          $sitename           The site name sending the mail.<br>    @type string          $siteurl            The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_request_action_confirmed_message",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 4537,
            "doc": {
                "summary": "Filters the message displayed to a user when they confirm a data request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The message to the user.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the request being confirmed.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    }
                ]
            }
        },
        {
            "name": "user_request_action_description",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 4643,
            "doc": {
                "summary": "Filters the user action description.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The default description.",
                        "types": [
                            "string"
                        ],
                        "variable": "description"
                    },
                    {
                        "name": "param",
                        "content": "The name of the request.",
                        "types": [
                            "string"
                        ],
                        "variable": "action_name"
                    }
                ]
            }
        },
        {
            "name": "user_request_action_email_subject",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/user.php",
            "line": 4708,
            "doc": {
                "summary": "Filters the subject of the email sent when an account action is attempted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The name of the site.",
                        "types": [
                            "string"
                        ],
                        "variable": "sitename"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request     User request object.<br>    @type string          $email       The email address this is being sent to.<br>    @type string          $description Description of the action being performed so the user knows what the email is for.<br>    @type string          $confirm_url The link to click on to confirm the account action.<br>    @type string          $sitename    The site name sending the mail.<br>    @type string          $siteurl     The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_request_action_email_content",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 4753,
            "doc": {
                "summary": "Filters the text of the email sent when an account action is attempted.",
                "description": "<p>The following strings have a special meaning and will get replaced dynamically:<\/p> <h3>DESCRIPTION### Description of the action being performed so the user knows what the email is for.<\/h3> <h3>CONFIRM_URL### The link to click on to confirm the account action.<\/h3> <h3>SITENAME###    The name of the site.<\/h3> <h3>SITEURL###     The URL to the site.<\/h3>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "Text in the email.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request     User request object.<br>    @type string          $email       The email address this is being sent to.<br>    @type string          $description Description of the action being performed so the user knows what the email is for.<br>    @type string          $confirm_url The link to click on to confirm the account action.<br>    @type string          $sitename    The site name sending the mail.<br>    @type string          $siteurl     The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_request_action_email_headers",
            "type": "filter",
            "numArgs": 5,
            "path": "\/wp-includes\/user.php",
            "line": 4783,
            "doc": {
                "summary": "Filters the headers of the email sent when an account action is attempted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The email headers.",
                        "types": [
                            "string",
                            "array"
                        ],
                        "variable": "headers"
                    },
                    {
                        "name": "param",
                        "content": "The email subject.",
                        "types": [
                            "string"
                        ],
                        "variable": "subject"
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "The request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    },
                    {
                        "name": "param",
                        "content": "{     Data relating to the account action email.<br>    @type WP_User_Request $request     User request object.<br>    @type string          $email       The email address this is being sent to.<br>    @type string          $description Description of the action being performed so the user knows what the email is for.<br>    @type string          $confirm_url The link to click on to confirm the account action.<br>    @type string          $sitename    The site name sending the mail.<br>    @type string          $siteurl     The site URL sending the mail.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "email_data"
                    }
                ]
            }
        },
        {
            "name": "user_request_key_expiration",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 4870,
            "doc": {
                "summary": "Filters the expiration time of confirm keys.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The expiration time in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "expiration"
                    }
                ]
            }
        },
        {
            "name": "wp_is_application_passwords_available",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/user.php",
            "line": 4935,
            "doc": {
                "summary": "Filters whether Application Passwords is available.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "True if available, false otherwise.",
                        "types": [
                            "bool"
                        ],
                        "variable": "available"
                    }
                ]
            }
        },
        {
            "name": "wp_is_application_passwords_available_for_user",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/user.php",
            "line": 4970,
            "doc": {
                "summary": "Filters whether Application Passwords is available for a specific user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "True if available, false otherwise.",
                        "types": [
                            "bool"
                        ],
                        "variable": "available"
                    },
                    {
                        "name": "param",
                        "content": "The user to check.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "use_google_chrome_frame",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/vars.php",
            "line": 82,
            "doc": {
                "summary": "Filters whether Google Chrome Frame should be used, if available.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to use the Google Chrome Frame. Default is the value of is_admin().",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_admin"
                    }
                ]
            }
        },
        {
            "name": "wp_is_mobile",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/vars.php",
            "line": 170,
            "doc": {
                "summary": "Filters whether the request should be treated as coming from a mobile device or not.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the request is from a mobile device or not.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_mobile"
                    }
                ]
            }
        },
        {
            "name": "navigation_widgets_format",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/widgets\/class-wp-nav-menu-widget.php",
            "line": 72,
            "doc": {
                "summary": "Filters the HTML format of widgets with navigation links.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The type of markup to use in widgets with navigation links.<br>Accepts 'html5', 'xhtml'.",
                        "types": [
                            "string"
                        ],
                        "variable": "format"
                    }
                ]
            }
        },
        {
            "name": "widget_nav_menu_args",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-includes\/widgets\/class-wp-nav-menu-widget.php",
            "line": 109,
            "doc": {
                "summary": "Filters the arguments for the Navigation Menu widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "{     An array of arguments passed to wp_nav_menu() to retrieve a navigation menu.<br>    @type callable|bool $fallback_cb Callback to fire if the menu doesn't exist. Default empty.<br>    @type mixed         $menu        Menu ID, slug, or name.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "nav_menu_args"
                    },
                    {
                        "name": "param",
                        "content": "Nav menu object for the current menu.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "nav_menu"
                    },
                    {
                        "name": "param",
                        "content": "Display arguments for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_archives_dropdown_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-archives.php",
            "line": 76,
            "endLine": 84,
            "doc": {
                "summary": "Filters the arguments for the Archives widget drop-down.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_get_archives()"
                    },
                    {
                        "name": "param",
                        "content": "An array of Archives widget drop-down arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Settings for the current Archives widget instance.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_archives_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-archives.php",
            "line": 154,
            "endLine": 161,
            "doc": {
                "summary": "Filters the arguments for the Archives widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_get_archives()"
                    },
                    {
                        "name": "param",
                        "content": "An array of Archives option arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_block_content",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/widgets\/class-wp-widget-block.php",
            "line": 77,
            "endLine": 82,
            "doc": {
                "summary": "Filters the content of the Block widget before output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "Current Block widget instance.",
                        "types": [
                            "\\WP_Widget_Block"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "widget_block_dynamic_classname",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-block.php",
            "line": 167,
            "doc": {
                "summary": "The classname used in the block widget's container HTML.",
                "description": "<p>This can be set according to the name of the block contained by the block widget.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The classname to be used in the block widget's container HTML, e.g. 'widget_block widget_text'.",
                        "types": [
                            "string"
                        ],
                        "variable": "classname"
                    },
                    {
                        "name": "param",
                        "content": "The name of the block contained by the block widget, e.g. 'core\/paragraph'.",
                        "types": [
                            "string"
                        ],
                        "variable": "block_name"
                    }
                ]
            }
        },
        {
            "name": "widget_categories_dropdown_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-categories.php",
            "line": 91,
            "doc": {
                "summary": "Filters the arguments for the Categories widget drop-down.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_dropdown_categories()"
                    },
                    {
                        "name": "param",
                        "content": "An array of Categories widget drop-down arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "cat_args"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_categories_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-categories.php",
            "line": 140,
            "doc": {
                "summary": "Filters the arguments for the Categories widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of Categories widget options.",
                        "types": [
                            "array"
                        ],
                        "variable": "cat_args"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_custom_html_content",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/widgets\/class-wp-widget-custom-html.php",
            "line": 162,
            "doc": {
                "summary": "Filters the content of the Custom HTML widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.1"
                    },
                    {
                        "name": "param",
                        "content": "The widget content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "Current Custom HTML widget instance.",
                        "types": [
                            "\\WP_Widget_Custom_HTML"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "widget_links_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-links.php",
            "line": 80,
            "doc": {
                "summary": "Filters the arguments for the Links widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_list_bookmarks()"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to retrieve the links list.",
                        "types": [
                            "array"
                        ],
                        "variable": "widget_links_args"
                    },
                    {
                        "name": "param",
                        "content": "The settings for the particular instance of the widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_{$this->id_base}_instance_schema",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-media.php",
            "line": 168,
            "doc": {
                "summary": "Filters the media widget instance schema to add additional properties.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Instance schema.",
                        "types": [
                            "array"
                        ],
                        "variable": "schema"
                    },
                    {
                        "name": "param",
                        "content": "Widget object.",
                        "types": [
                            "\\WP_Widget_Media"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "widget_{$this->id_base}_instance",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/widgets\/class-wp-widget-media.php",
            "line": 251,
            "doc": {
                "summary": "Filters the media widget instance prior to rendering the media.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Instance data.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "Widget args.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Widget object.",
                        "types": [
                            "\\WP_Widget_Media"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "widget_meta_poweredby",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-meta.php",
            "line": 87,
            "endLine": 95,
            "doc": {
                "summary": "Filters the \"WordPress.org\" list item HTML in the Meta widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Default HTML for the WordPress.org list item.",
                        "types": [
                            "string"
                        ],
                        "variable": "html"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_title",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/widgets\/class-wp-widget-pages.php",
            "line": 56,
            "doc": {
                "summary": "Filters the widget title.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget title. Default 'Pages'.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "The widget ID.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "id_base"
                    }
                ]
            }
        },
        {
            "name": "widget_pages_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-pages.php",
            "line": 77,
            "endLine": 86,
            "doc": {
                "summary": "Filters the arguments for the Pages widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_list_pages()"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to retrieve the pages list.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "show_recent_comments_widget_style",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-recent-comments.php",
            "line": 54,
            "doc": {
                "summary": "Filters the Recent Comments default widget styles.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the widget is active. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "active"
                    },
                    {
                        "name": "param",
                        "content": "The widget ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "id_base"
                    }
                ]
            }
        },
        {
            "name": "widget_comments_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-recent-comments.php",
            "line": 109,
            "endLine": 117,
            "doc": {
                "summary": "Filters the arguments for the Recent Comments widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "for information on accepted arguments.",
                        "reference": "\\WP_Comment_Query::query()"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments used to retrieve the recent comments.",
                        "types": [
                            "array"
                        ],
                        "variable": "comment_args"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_posts_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-recent-posts.php",
            "line": 73,
            "endLine": 82,
            "doc": {
                "summary": "Filters the arguments for the Recent Posts widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\WP_Query::get_posts()"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments used to retrieve the recent posts.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "rss_widget_feed_link",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-rss.php",
            "line": 111,
            "doc": {
                "summary": "Filters the classic RSS widget's feed icon link.",
                "description": "<p>Themes can remove the icon link by using <code>add_filter( 'rss_widget_feed_link', '__return_empty_string' );<\/code>.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML for link to RSS feed.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "feed_link"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_tag_cloud_args",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets\/class-wp-widget-tag-cloud.php",
            "line": 73,
            "endLine": 81,
            "doc": {
                "summary": "Filters the taxonomy used in the Tag Cloud widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0",
                        "description": "Added taxonomy drop-down."
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$instance<\/code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\wp_tag_cloud()"
                    },
                    {
                        "name": "param",
                        "content": "Args used for the tag cloud widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    }
                ]
            }
        },
        {
            "name": "widget_text",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/widgets\/class-wp-widget-text.php",
            "line": 281,
            "doc": {
                "summary": "Filters the content of the Text widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$widget<\/code> parameter."
                    },
                    {
                        "name": "since",
                        "content": "4.8.1",
                        "description": "The <code>$widget<\/code> param may now be a <code>WP_Widget_Custom_HTML<\/code> object in addition to a <code>WP_Widget_Text<\/code> object."
                    },
                    {
                        "name": "param",
                        "content": "The widget content.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "Current text or HTML widget instance.",
                        "types": [
                            "\\WP_Widget_Text",
                            "\\WP_Widget_Custom_HTML"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "widget_text_content",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-includes\/widgets\/class-wp-widget-text.php",
            "line": 296,
            "doc": {
                "summary": "Filters the content of the Text widget to apply changes expected from the visual (TinyMCE) editor.",
                "description": "<p>By default a subset of the_content filters are applied, including wpautop and wptexturize.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget content.",
                        "types": [
                            "string"
                        ],
                        "variable": "text"
                    },
                    {
                        "name": "param",
                        "content": "Array of settings for the current widget.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "Current Text widget instance.",
                        "types": [
                            "\\WP_Widget_Text"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "register_sidebar_defaults",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/widgets.php",
            "line": 290,
            "doc": {
                "summary": "Filters the sidebar default arguments.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\register_sidebar()"
                    },
                    {
                        "name": "param",
                        "content": "The default sidebar arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "defaults"
                    }
                ]
            }
        },
        {
            "name": "register_sidebar",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/widgets.php",
            "line": 317,
            "doc": {
                "summary": "Fires once a sidebar has been registered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Parsed arguments for the registered sidebar.",
                        "types": [
                            "array"
                        ],
                        "variable": "sidebar"
                    }
                ]
            }
        },
        {
            "name": "wp_register_sidebar_widget",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/widgets.php",
            "line": 422,
            "doc": {
                "summary": "Fires once for each registered widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of default widget arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "wp_unregister_sidebar_widget",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/widgets.php",
            "line": 494,
            "doc": {
                "summary": "Fires just before a widget is removed from a sidebar.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget ID.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "id"
                    }
                ]
            }
        },
        {
            "name": "dynamic_sidebar_before",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets.php",
            "line": 728,
            "doc": {
                "summary": "Fires before widgets are rendered in a dynamic sidebar.",
                "description": "<p>Note: The action also fires for empty sidebars, and on both the front end and back end, including the Inactive Widgets sidebar on the Widgets screen.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Index, name, or ID of the dynamic sidebar.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "index"
                    },
                    {
                        "name": "param",
                        "content": "Whether the sidebar is populated with widgets.<br>Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "has_widgets"
                    }
                ]
            }
        },
        {
            "name": "dynamic_sidebar_params",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/widgets.php",
            "line": 803,
            "doc": {
                "summary": "Filters the parameters passed to a widget's display callback.",
                "description": "<p>Note: The filter is evaluated on both the front end and back end, including for the Inactive Widgets sidebar on the Widgets screen.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "reference": "\\register_sidebar()"
                    },
                    {
                        "name": "param",
                        "content": "{     @type array $args  {         An array of widget display arguments.<br>        @type string $name          Name of the sidebar the widget is assigned to.<br>        @type string $id            ID of the sidebar the widget is assigned to.<br>        @type string $description   The sidebar description.<br>        @type string $class         CSS class applied to the sidebar container.<br>        @type string $before_widget HTML markup to prepend to each widget in the sidebar.<br>        @type string $after_widget  HTML markup to append to each widget in the sidebar.<br>        @type string $before_title  HTML markup to prepend to the widget title when displayed.<br>        @type string $after_title   HTML markup to append to the widget title when displayed.<br>        @type string $widget_id     ID of the widget.<br>        @type string $widget_name   Name of the widget.<br>    }     @type array $widget_args {         An array of multi-widget arguments.<br>        @type int $number Number increment used for multiples of the same widget.<br>    } }",
                        "types": [
                            "array"
                        ],
                        "variable": "params"
                    }
                ]
            }
        },
        {
            "name": "dynamic_sidebar",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-includes\/widgets.php",
            "line": 832,
            "doc": {
                "summary": "Fires before a widget's display callback is called.",
                "description": "<p>Note: The action fires on both the front end and back end, including for widgets in the Inactive Widgets sidebar on the Widgets screen.<\/p> <p>The action is not fired for empty sidebars.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An associative array of widget arguments.<br>    @type string   $name        Name of the widget.<br>    @type string   $id          Widget ID.<br>    @type callable $callback    When the hook is fired on the front end, <code>$callback<\/code> is an array                                 containing the widget object. Fired on the back end, <code>$callback<\/code>                                 is 'wp_widget_control', see <code>$_callback<\/code>.<br>    @type array    $params      An associative array of multi-widget arguments.<br>    @type string   $classname   CSS class applied to the widget container.<br>    @type string   $description The widget description.<br>    @type array    $_callback   When the hook is fired on the back end, <code>$_callback<\/code> is populated                                 with an array containing the widget object, see <code>$callback<\/code>.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "widget"
                    }
                ]
            }
        },
        {
            "name": "dynamic_sidebar_after",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets.php",
            "line": 856,
            "doc": {
                "summary": "Fires after widgets are rendered in a dynamic sidebar.",
                "description": "<p>Note: The action also fires for empty sidebars, and on both the front end and back end, including the Inactive Widgets sidebar on the Widgets screen.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Index, name, or ID of the dynamic sidebar.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "index"
                    },
                    {
                        "name": "param",
                        "content": "Whether the sidebar is populated with widgets.<br>Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "has_widgets"
                    }
                ]
            }
        },
        {
            "name": "dynamic_sidebar_has_widgets",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets.php",
            "line": 870,
            "doc": {
                "summary": "Filters whether a sidebar has widgets.",
                "description": "<p>Note: The filter is also evaluated for empty sidebars, and on both the front end and back end, including the Inactive Widgets sidebar on the Widgets screen.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether at least one widget was rendered in the sidebar.<br>Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "did_one"
                    },
                    {
                        "name": "param",
                        "content": "Index, name, or ID of the dynamic sidebar.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "index"
                    }
                ]
            }
        },
        {
            "name": "is_active_sidebar",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-includes\/widgets.php",
            "line": 987,
            "doc": {
                "summary": "Filters whether a dynamic sidebar is considered \"active\".",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether or not the sidebar should be considered &quot;active&quot;.<br>In other words, whether the sidebar contains any widgets.",
                        "types": [
                            "bool"
                        ],
                        "variable": "is_active_sidebar"
                    },
                    {
                        "name": "param",
                        "content": "Index, name, or ID of the dynamic sidebar.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "index"
                    }
                ]
            }
        },
        {
            "name": "sidebars_widgets",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/widgets.php",
            "line": 1039,
            "doc": {
                "summary": "Filters the list of sidebars and their widgets.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "An associative array of sidebars and their widgets.",
                        "types": [
                            "array"
                        ],
                        "variable": "sidebars_widgets"
                    }
                ]
            }
        },
        {
            "name": "the_widget",
            "type": "action",
            "numArgs": 3,
            "path": "\/wp-includes\/widgets.php",
            "line": 1254,
            "doc": {
                "summary": "Fires before rendering the requested widget.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget's class name.",
                        "types": [
                            "string"
                        ],
                        "variable": "widget"
                    },
                    {
                        "name": "param",
                        "content": "The current widget instance's settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "instance"
                    },
                    {
                        "name": "param",
                        "content": "An array of the widget's sidebar arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "widgets_init",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-includes\/widgets.php",
            "line": 1854,
            "doc": {
                "summary": "Fires after all default WordPress widgets have been registered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ]
            }
        },
        {
            "name": "use_widgets_block_editor",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-includes\/widgets.php",
            "line": 1886,
            "endLine": 1889,
            "doc": {
                "summary": "Filters whether to use the block editor to manage widgets.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to use the block editor to manage widgets.",
                        "types": [
                            "bool"
                        ],
                        "variable": "use_widgets_block_editor"
                    }
                ]
            }
        },
        {
            "name": "opml_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-links-opml.php",
            "line": 43,
            "doc": {
                "summary": "Fires in the OPML header.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "link_title",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-links-opml.php",
            "line": 81,
            "doc": {
                "summary": "Filters the OPML outline link title text.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The OPML outline title text.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "shake_error_codes",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 63,
            "doc": {
                "summary": "Filters the error codes array for shaking the login form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Error codes that shake the login form.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "shake_error_codes"
                    }
                ]
            }
        },
        {
            "name": "login_title",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-login.php",
            "line": 87,
            "doc": {
                "summary": "Filters the title tag content for login page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The page title, with extra context added.",
                        "types": [
                            "string"
                        ],
                        "variable": "login_title"
                    },
                    {
                        "name": "param",
                        "content": "The original page title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    }
                ]
            }
        },
        {
            "name": "login_enqueue_scripts",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 114,
            "doc": {
                "summary": "Enqueue scripts and styles for the login page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "login_head",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 121,
            "doc": {
                "summary": "Fires in the login page header after scripts are enqueued.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "login_headerurl",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 132,
            "doc": {
                "summary": "Filters link URL of the header logo above login form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Login header logo URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "login_header_url"
                    }
                ]
            }
        },
        {
            "name": "login_headertitle",
            "type": "filter",
            "numArgs": 4,
            "path": "\/wp-login.php",
            "line": 144,
            "endLine": 150,
            "doc": {
                "summary": "Filters the title attribute of the header logo above login form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "5.2.0",
                        "description": "Use {@see 'login_headertext'} instead."
                    },
                    {
                        "name": "param",
                        "content": "Login header logo title attribute.",
                        "types": [
                            "string"
                        ],
                        "variable": "login_header_title"
                    }
                ]
            }
        },
        {
            "name": "login_headertext",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 161,
            "doc": {
                "summary": "Filters the link text of the header logo above the login form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The login header logo link text.",
                        "types": [
                            "string"
                        ],
                        "variable": "login_header_text"
                    }
                ]
            }
        },
        {
            "name": "login_body_class",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-login.php",
            "line": 191,
            "doc": {
                "summary": "Filters the login page body classes.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of body classes.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "classes"
                    },
                    {
                        "name": "param",
                        "content": "The action that brought the visitor to the login page.",
                        "types": [
                            "string"
                        ],
                        "variable": "action"
                    }
                ]
            }
        },
        {
            "name": "login_header",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 205,
            "doc": {
                "summary": "Fires in the login page header after the body tag is opened.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    }
                ]
            }
        },
        {
            "name": "login_message",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 218,
            "doc": {
                "summary": "Filters the message to display above the login form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Login message text.",
                        "types": [
                            "string"
                        ],
                        "variable": "message"
                    }
                ]
            }
        },
        {
            "name": "login_errors",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 253,
            "doc": {
                "summary": "Filters the error messages displayed above the login form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Login error message.",
                        "types": [
                            "string"
                        ],
                        "variable": "errors"
                    }
                ]
            }
        },
        {
            "name": "login_messages",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 264,
            "doc": {
                "summary": "Filters instructional messages displayed above the login form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Login messages.",
                        "types": [
                            "string"
                        ],
                        "variable": "messages"
                    }
                ]
            }
        },
        {
            "name": "login_site_html_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 303,
            "doc": {
                "summary": "Filter the \"Go to site\" link displayed in the login page footer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.7.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML link to the home URL of the current site.",
                        "types": [
                            "string"
                        ],
                        "variable": "link"
                    }
                ]
            }
        },
        {
            "name": "login_display_language_dropdown",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 324,
            "doc": {
                "summary": "Filters the Languages select input activation on the login screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to display the Languages select input on the login screen.",
                        "types": [
                            "bool"
                        ],
                        "variable": ""
                    }
                ]
            }
        },
        {
            "name": "login_language_dropdown_args",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 362,
            "doc": {
                "summary": "Filters default arguments for the Languages select input on the login screen.",
                "description": "<p>The arguments get passed to the wp_dropdown_languages() function.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Arguments for the Languages select input on the login screen.",
                        "types": [
                            "array"
                        ],
                        "variable": "args"
                    }
                ]
            }
        },
        {
            "name": "login_footer",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 399,
            "doc": {
                "summary": "Fires in the login page footer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ]
            }
        },
        {
            "name": "login_init",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 502,
            "doc": {
                "summary": "Fires when the login form is initialized.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    }
                ]
            }
        },
        {
            "name": "login_form_{$action}",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 527,
            "doc": {
                "summary": "Fires before a specified login form action.",
                "description": "<p>The dynamic portion of the hook name, <code>$action<\/code>, refers to the action that brought the visitor to the login form.<\/p> <p>Possible hook names include:<\/p> <ul> <li><code>login_form_checkemail<\/code><\/li> <li><code>login_form_confirm_admin_email<\/code><\/li> <li><code>login_form_confirmaction<\/code><\/li> <li><code>login_form_entered_recovery_mode<\/code><\/li> <li><code>login_form_login<\/code><\/li> <li><code>login_form_logout<\/code><\/li> <li><code>login_form_lostpassword<\/code><\/li> <li><code>login_form_postpass<\/code><\/li> <li><code>login_form_register<\/code><\/li> <li><code>login_form_resetpass<\/code><\/li> <li><code>login_form_retrievepassword<\/code><\/li> <li><code>login_form_rp<\/code><\/li> <\/ul>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "login_link_separator",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 539,
            "doc": {
                "summary": "Filters the separator used between login form navigation links.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The separator used between login form navigation links.",
                        "types": [
                            "string"
                        ],
                        "variable": "login_link_separator"
                    }
                ]
            }
        },
        {
            "name": "admin_email_remind_interval",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 576,
            "doc": {
                "summary": "Filters the interval for dismissing the admin email confirmation screen.",
                "description": "<p>If <code>0<\/code> (zero) is returned, the &quot;Remind me later&quot; link will not be displayed.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.1"
                    },
                    {
                        "name": "param",
                        "content": "Interval time (in seconds). Default is 3 days.",
                        "types": [
                            "int"
                        ],
                        "variable": "interval"
                    }
                ]
            }
        },
        {
            "name": "admin_email_check_interval",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 608,
            "doc": {
                "summary": "Filters the interval for redirecting the user to the admin email confirmation screen.",
                "description": "<p>If <code>0<\/code> (zero) is returned, the user will not be redirected.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Interval time (in seconds). Default is 6 months.",
                        "types": [
                            "int"
                        ],
                        "variable": "interval"
                    }
                ]
            }
        },
        {
            "name": "admin_email_confirm",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 628,
            "doc": {
                "summary": "Fires before the admin email confirm form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "A <code>WP_Error<\/code> object containing any errors generated by using invalid credentials. Note that the error object may not contain any errors.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    }
                ]
            }
        },
        {
            "name": "admin_email_confirm_form",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 639,
            "doc": {
                "summary": "Fires inside the admin-email-confirm-form form tags, before the hidden fields.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    }
                ]
            }
        },
        {
            "name": "post_password_expires",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 741,
            "doc": {
                "summary": "Filters the life span of the post password cookie.",
                "description": "<p>By default, the cookie expires 10 days from creation. To turn this into a session cookie, return 0.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The expiry time, as passed to setcookie().",
                        "types": [
                            "int"
                        ],
                        "variable": "expires"
                    }
                ]
            }
        },
        {
            "name": "logout_redirect",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-login.php",
            "line": 786,
            "doc": {
                "summary": "Filters the log out redirect URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The redirect destination URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "redirect_to"
                    },
                    {
                        "name": "param",
                        "content": "The requested redirect destination URL passed as a parameter.",
                        "types": [
                            "string"
                        ],
                        "variable": "requested_redirect_to"
                    },
                    {
                        "name": "param",
                        "content": "The WP_User object for the user that's logging out.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "lostpassword_redirect",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 819,
            "doc": {
                "summary": "Filters the URL redirected to after submitting the lostpassword\/retrievepassword form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The redirect destination URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "lostpassword_redirect"
                    }
                ]
            }
        },
        {
            "name": "lost_password",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 830,
            "doc": {
                "summary": "Fires before the lost password form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "Added the <code>$errors<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "A <code>WP_Error<\/code> object containing any errors generated by using invalid credentials. Note that the error object may not contain any errors.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    }
                ]
            }
        },
        {
            "name": "lostpassword_form",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 854,
            "doc": {
                "summary": "Fires inside the lostpassword form tags, before the hidden fields.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "validate_password_reset",
            "type": "action",
            "numArgs": 2,
            "path": "\/wp-login.php",
            "line": 944,
            "doc": {
                "summary": "Fires before the password reset procedure is validated.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "WP Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object if the login and reset key match. WP_Error object otherwise.",
                        "types": [
                            "\\WP_User",
                            "\\WP_Error"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "resetpass_form",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 999,
            "doc": {
                "summary": "Fires following the 'Strength indicator' meter in the user password reset form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "User object of the user whose password is being reset.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_signup_location",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 1038,
            "doc": {
                "summary": "Filters the Multisite sign up URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The sign up URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "sign_up_url"
                    }
                ]
            }
        },
        {
            "name": "registration_redirect",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-login.php",
            "line": 1080,
            "doc": {
                "summary": "Filters the registration redirect URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.9.0",
                        "description": "Added the <code>$errors<\/code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The redirect destination URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "registration_redirect"
                    },
                    {
                        "name": "param",
                        "content": "User id if registration was successful, WP_Error object otherwise.",
                        "types": [
                            "int",
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    }
                ]
            }
        },
        {
            "name": "register_form",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 1101,
            "doc": {
                "summary": "Fires following the 'Email' field in the user registration form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "user_request_action_confirmed",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 1195,
            "doc": {
                "summary": "Fires an action hook when the account action has been confirmed by the user.",
                "description": "<p>Using this you can assume the user has agreed to perform the action by clicking on the link in the confirmation email.<\/p> <p>After firing this action hook the page will redirect to wp-login a callback redirects or exits first.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "Request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "request_id"
                    }
                ]
            }
        },
        {
            "name": "login_redirect",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-login.php",
            "line": 1277,
            "doc": {
                "summary": "Filters the login redirect URL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The redirect destination URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "redirect_to"
                    },
                    {
                        "name": "param",
                        "content": "The requested redirect destination URL passed as a parameter.",
                        "types": [
                            "string"
                        ],
                        "variable": "requested_redirect_to"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object if login was successful, WP_Error object otherwise.",
                        "types": [
                            "\\WP_User",
                            "\\WP_Error"
                        ],
                        "variable": "user"
                    }
                ]
            }
        },
        {
            "name": "wp_login_errors",
            "type": "filter",
            "numArgs": 2,
            "path": "\/wp-login.php",
            "line": 1396,
            "doc": {
                "summary": "Filters the login page errors.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "WP Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    },
                    {
                        "name": "param",
                        "content": "Redirect destination URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "redirect_to"
                    }
                ]
            }
        },
        {
            "name": "login_form",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-login.php",
            "line": 1447,
            "doc": {
                "summary": "Fires following the 'Password' field in the login form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ]
            }
        },
        {
            "name": "lost_password_html_link",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 1501,
            "doc": {
                "summary": "Filters the link that allows the user to reset the lost password.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "HTML link to the lost password form.",
                        "types": [
                            "string"
                        ],
                        "variable": "html_link"
                    }
                ]
            }
        },
        {
            "name": "enable_login_autofocus",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-login.php",
            "line": 1534,
            "doc": {
                "summary": "Filters whether to print the call to `wp_attempt_focus()` on the login screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to print the function call. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "print"
                    }
                ]
            }
        },
        {
            "name": "wp-mail.php",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-mail.php",
            "line": 29,
            "doc": {
                "summary": "Fires to allow a plugin to do a complete takeover of Post by Email.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ]
            }
        },
        {
            "name": "wp_mail_original_content",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-mail.php",
            "line": 193,
            "doc": {
                "summary": "Filters the original content of the email.",
                "description": "<p>Give Post-By-Email extending plugins full access to the content, either the raw content, or the content of the last quoted-printable section.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The original email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "phone_content",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-mail.php",
            "line": 216,
            "doc": {
                "summary": "Filters the content of the post submitted by email before saving.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The email content.",
                        "types": [
                            "string"
                        ],
                        "variable": "content"
                    }
                ]
            }
        },
        {
            "name": "publish_phone",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-mail.php",
            "line": 246,
            "doc": {
                "summary": "Fires after a post submitted by email is published.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_ID"
                    }
                ]
            }
        },
        {
            "name": "enable_loading_advanced_cache_dropin",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-settings.php",
            "line": 93,
            "doc": {
                "summary": "Filters whether to enable loading of the advanced-cache.php drop-in.",
                "description": "<p>This filter runs before it can be used by plugins. It is designed for non-web run-times. If false is returned, advanced-cache.php will never be loaded.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable loading advanced-cache.php (if present).<br>Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "enable_advanced_cache"
                    }
                ]
            }
        },
        {
            "name": "mu_plugin_loaded",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-settings.php",
            "line": 388,
            "doc": {
                "summary": "Fires once a single must-use plugin has loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the plugin's main file.",
                        "types": [
                            "string"
                        ],
                        "variable": "mu_plugin"
                    }
                ]
            }
        },
        {
            "name": "network_plugin_loaded",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-settings.php",
            "line": 408,
            "doc": {
                "summary": "Fires once a single network-activated plugin has loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the plugin's main file.",
                        "types": [
                            "string"
                        ],
                        "variable": "network_plugin"
                    }
                ]
            }
        },
        {
            "name": "muplugins_loaded",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-settings.php",
            "line": 418,
            "doc": {
                "summary": "Fires once all must-use and network-activated plugins have loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ]
            }
        },
        {
            "name": "plugin_loaded",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-settings.php",
            "line": 463,
            "doc": {
                "summary": "Fires once a single activated plugin has loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the plugin's main file.",
                        "types": [
                            "string"
                        ],
                        "variable": "plugin"
                    }
                ]
            }
        },
        {
            "name": "plugins_loaded",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-settings.php",
            "line": 486,
            "doc": {
                "summary": "Fires once activated plugins have loaded.",
                "description": "<p>Pluggable functions are also available at this point in the loading order.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ]
            }
        },
        {
            "name": "sanitize_comment_cookies",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-settings.php",
            "line": 499,
            "doc": {
                "summary": "Fires when comment cookies are sanitized.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.11"
                    }
                ]
            }
        },
        {
            "name": "setup_theme",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-settings.php",
            "line": 555,
            "doc": {
                "summary": "Fires before the theme is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ]
            }
        },
        {
            "name": "after_setup_theme",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-settings.php",
            "line": 601,
            "doc": {
                "summary": "Fires after the theme is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "init",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-settings.php",
            "line": 623,
            "doc": {
                "summary": "Fires after WordPress has finished loading but before any headers are sent.",
                "description": "<p>Most of WP is loaded at this stage, and the user is authenticated. WP continues to load on the {@see 'init'} hook that follows (e.g. widgets), and many plugins instantiate themselves on it for all sorts of reasons (e.g. they need a user, a taxonomy, etc.).<\/p> <p>If you wish to plug an action once WP is loaded, use the {@see 'wp_loaded'} hook below.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ]
            }
        },
        {
            "name": "wp_loaded",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-settings.php",
            "line": 645,
            "doc": {
                "summary": "This hook is fired once WP, all plugins, and the theme are fully loaded and instantiated.",
                "description": "<p>Ajax requests should use wp-admin\/admin-ajax.php. admin-ajax.php can handle requests for users not logged in.<\/p>",
                "tags": [
                    {
                        "name": "link",
                        "content": "",
                        "link": "https:\/\/codex.wordpress.org\/AJAX_in_Plugins"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "signup_header",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-signup.php",
            "line": 28,
            "doc": {
                "summary": "Fires within the head section of the site sign-up screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "before_signup_header",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-signup.php",
            "line": 50,
            "doc": {
                "summary": "Fires before the Site Sign-up page is loaded.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ]
            }
        },
        {
            "name": "before_signup_form",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-signup.php",
            "line": 96,
            "doc": {
                "summary": "Fires before the site Sign-up form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "signup_blogform",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-signup.php",
            "line": 236,
            "doc": {
                "summary": "Fires after the site sign-up form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object possibly containing 'blogname' or 'blog_title' errors.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    }
                ]
            }
        },
        {
            "name": "signup_extra_fields",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-signup.php",
            "line": 308,
            "doc": {
                "summary": "Fires at the end of the new user account registration form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object containing 'user_name' or 'user_email' errors.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "errors"
                    }
                ]
            }
        },
        {
            "name": "signup_another_blog_init",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-signup.php",
            "line": 358,
            "doc": {
                "summary": "Filters the default site sign-up variables.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of default site sign-up variables.<br>    @type string   $blogname   The site blogname.<br>    @type string   $blog_title The site title.<br>    @type WP_Error $errors     A WP_Error object possibly containing 'blogname' or 'blog_title' errors.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "signup_defaults"
                    }
                ]
            }
        },
        {
            "name": "signup_hidden_fields",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-signup.php",
            "line": 409,
            "doc": {
                "summary": "Hidden sign-up form fields output when creating another site or user.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "A string describing the steps of the sign-up process. The value can be 'create-another-site', 'validate-user', or 'validate-site'.",
                        "types": [
                            "string"
                        ],
                        "variable": "context"
                    }
                ]
            }
        },
        {
            "name": "signup_create_blog_meta",
            "type": "filter",
            "numArgs": 3,
            "path": "\/wp-signup.php",
            "line": 483,
            "doc": {
                "summary": "Filters the new site meta variables.",
                "description": "<p>Use the {@see 'add_signup_meta'} filter instead.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0",
                        "description": "Use the {@see 'add_signup_meta'} filter instead."
                    },
                    {
                        "name": "param",
                        "content": "An array of default blog meta variables.",
                        "types": [
                            "array"
                        ],
                        "variable": "blog_meta_defaults"
                    }
                ]
            }
        },
        {
            "name": "add_signup_meta",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-signup.php",
            "line": 497,
            "doc": {
                "summary": "Filters the new default site meta variables.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of default site meta variables.<br>    @type int $lang_id     The language ID.<br>    @type int $blog_public Whether search engines should be discouraged from indexing the site. 1 for true, 0 for false.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "meta"
                    }
                ]
            }
        },
        {
            "name": "signup_finished",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-signup.php",
            "line": 569,
            "doc": {
                "summary": "Fires when the site or user sign-up process is complete.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "signup_user_init",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-signup.php",
            "line": 612,
            "doc": {
                "summary": "Filters the default user variables used on the user sign-up form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of default user variables.<br>    @type string   $user_name  The user username.<br>    @type string   $user_email The user email address.<br>    @type WP_Error $errors     A WP_Error object with possible errors relevant to the sign-up user.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "signup_user_defaults"
                    }
                ]
            }
        },
        {
            "name": "signup_blog_init",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-signup.php",
            "line": 756,
            "doc": {
                "summary": "Filters the default site creation variables for the site sign-up form.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{     An array of default site creation variables.<br>    @type string   $user_name  The user username.<br>    @type string   $user_email The user email address.<br>    @type string   $blogname   The blogname.<br>    @type string   $blog_title The title of the site.<br>    @type WP_Error $errors     A WP_Error object with possible errors relevant to new site creation variables.<br>}",
                        "types": [
                            "array"
                        ],
                        "variable": "signup_blog_defaults"
                    }
                ]
            }
        },
        {
            "name": "signup_get_available_languages",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-signup.php",
            "line": 911,
            "doc": {
                "summary": "Filters the list of available languages for front-end site sign-ups.",
                "description": "<p>Passing an empty array to this hook will disable output of the setting on the sign-up form, and the default language will be used when creating the site.<\/p> <p>Languages not already installed will be stripped.<\/p>",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of available language codes. Language codes are formed by stripping the .mo extension from the language file names.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "languages"
                    }
                ]
            }
        },
        {
            "name": "wpmu_active_signup",
            "type": "filter",
            "numArgs": 1,
            "path": "\/wp-signup.php",
            "line": 933,
            "doc": {
                "summary": "Filters the type of site sign-up.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "String that returns registration type. The value can be 'all', 'none', 'blog', or 'user'.",
                        "types": [
                            "string"
                        ],
                        "variable": "active_signup"
                    }
                ]
            }
        },
        {
            "name": "preprocess_signup_form",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-signup.php",
            "line": 1002,
            "doc": {
                "summary": "Fires when the site sign-up form is sent.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "after_signup_form",
            "type": "action",
            "numArgs": 0,
            "path": "\/wp-signup.php",
            "line": 1042,
            "doc": {
                "summary": "Fires after the sign-up forms, before wp_footer.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ]
            }
        },
        {
            "name": "pre_trackback_post",
            "type": "action",
            "numArgs": 6,
            "path": "\/wp-trackback.php",
            "line": 111,
            "doc": {
                "summary": "Fires before the trackback is added to a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID related to the trackback.",
                        "types": [
                            "int"
                        ],
                        "variable": "post_id"
                    },
                    {
                        "name": "param",
                        "content": "Trackback URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "trackback_url"
                    },
                    {
                        "name": "param",
                        "content": "Character set.",
                        "types": [
                            "string"
                        ],
                        "variable": "charset"
                    },
                    {
                        "name": "param",
                        "content": "Trackback title.",
                        "types": [
                            "string"
                        ],
                        "variable": "title"
                    },
                    {
                        "name": "param",
                        "content": "Trackback excerpt.",
                        "types": [
                            "string"
                        ],
                        "variable": "excerpt"
                    },
                    {
                        "name": "param",
                        "content": "Blog name.",
                        "types": [
                            "string"
                        ],
                        "variable": "blog_name"
                    }
                ]
            }
        },
        {
            "name": "trackback_post",
            "type": "action",
            "numArgs": 1,
            "path": "\/wp-trackback.php",
            "line": 168,
            "doc": {
                "summary": "Fires after a trackback is added to a post.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Trackback ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "trackback_id"
                    }
                ]
            }
        },
        {
            "name": "xmlrpc_rsd_apis",
            "type": "action",
            "numArgs": 0,
            "path": "\/xmlrpc.php",
            "line": 55,
            "doc": {
                "summary": "Add additional APIs to the Really Simple Discovery (RSD) endpoint.",
                "tags": [
                    {
                        "name": "link",
                        "content": "",
                        "link": "http:\/\/cyber.law.harvard.edu\/blogs\/gems\/tech\/rsd.html"
                    },
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ]
            }
        },
        {
            "name": "wp_xmlrpc_server_class",
            "type": "filter",
            "numArgs": 1,
            "path": "\/xmlrpc.php",
            "line": 83,
            "doc": {
                "summary": "Filters the class used for handling XML-RPC requests.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the XML-RPC server class.",
                        "types": [
                            "string"
                        ],
                        "variable": "class"
                    }
                ]
            }
        }
    ]
}